PseuCoParser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function(program) { return program; },
        peg$c2 = { type: "any", description: "any character" },
        peg$c3 = { type: "other", description: "whitespace" },
        peg$c4 = /^[ \t\x0B\f]/,
        peg$c5 = { type: "class", value: "[ \\t\\x0B\\f]", description: "[ \\t\\x0B\\f]" },
        peg$c6 = function() {},
        peg$c7 = /^[\n\r]/,
        peg$c8 = { type: "class", value: "[\\n\\r]", description: "[\\n\\r]" },
        peg$c9 = { type: "other", description: "end of line" },
        peg$c10 = "\n",
        peg$c11 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c12 = "\r\n",
        peg$c13 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c14 = "\r",
        peg$c15 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c16 = { type: "other", description: "comment" },
        peg$c17 = "/*",
        peg$c18 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c19 = [],
        peg$c20 = void 0,
        peg$c21 = "*/",
        peg$c22 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c23 = "/**",
        peg$c24 = { type: "literal", value: "/**", description: "\"/**\"" },
        peg$c25 = "//",
        peg$c26 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c27 = { type: "other", description: "integer" },
        peg$c28 = "0",
        peg$c29 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c30 = function() { return 0; },
        peg$c31 = /^[1-9]/,
        peg$c32 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c33 = /^[0-9]/,
        peg$c34 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c35 = function(head, tail) { return parseInt(head + tail.join(""), 10); },
        peg$c36 = { type: "other", description: "string" },
        peg$c37 = "\"",
        peg$c38 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c39 = null,
        peg$c40 = function(stringLiteral) { return stringLiteral[1] != null ? stringLiteral[1] : ""; },
        peg$c41 = function(chars) { return chars.join(""); },
        peg$c42 = "\\",
        peg$c43 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c44 = function(char_) { return char_; },
        peg$c45 = function(seq) { return "\\" + seq; },
        peg$c46 = function(con) { return con; },
        peg$c47 = function(seq) { return seq; },
        peg$c48 = /^['"\\bfnrtv]/,
        peg$c49 = { type: "class", value: "['\"\\\\bfnrtv]", description: "['\"\\\\bfnrtv]" },
        peg$c50 = /^[0-7]/,
        peg$c51 = { type: "class", value: "[0-7]", description: "[0-7]" },
        peg$c52 = function(first, second) { return first + (second != null ? second : ""); },
        peg$c53 = /^[0-3]/,
        peg$c54 = { type: "class", value: "[0-3]", description: "[0-3]" },
        peg$c55 = function(first, second, third) { return first + second + third; },
        peg$c56 = { type: "other", description: "identifier" },
        peg$c57 = function(head, tail) { return head + tail.join(""); },
        peg$c58 = /^[$A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\xFF\u0100-\u1FFF\u3040-\u318F\u3300-\u337F\u3400-\u3D2D\u4E00-\u9FFF\uF900-\uFAFF]/,
        peg$c59 = { type: "class", value: "[$A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF\\u0100-\\u1FFF\\u3040-\\u318F\\u3300-\\u337F\\u3400-\\u3D2D\\u4E00-\\u9FFF\\uF900-\\uFAFF]", description: "[$A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF\\u0100-\\u1FFF\\u3040-\\u318F\\u3300-\\u337F\\u3400-\\u3D2D\\u4E00-\\u9FFF\\uF900-\\uFAFF]" },
        peg$c60 = function(letter) { return letter; },
        peg$c61 = /^[0-9\u0660-\u0669\u06F0-\u06F9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE7-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u1040-\u1049]/,
        peg$c62 = { type: "class", value: "[0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE7-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u1040-\\u1049]", description: "[0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE7-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u1040-\\u1049]" },
        peg$c63 = function(digit) { return digit; },
        peg$c64 = function(source) { return construct(PCProgram, source); },
        peg$c65 = function(head, tail) {
        														var elements = [];
        														elements.push(head);
        														for (var i = 0; i < tail.length; ++i)
        														{
        															elements.push(tail[i][1]);
        														}
        														return elements;
        													},
        peg$c66 = function(elem) { return elem; },
        peg$c67 = "monitor",
        peg$c68 = { type: "literal", value: "monitor", description: "\"monitor\"" },
        peg$c69 = "{",
        peg$c70 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c71 = "}",
        peg$c72 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c73 = function(id, code) {
        																		code.unshift(id);
        																		return construct(PCMonitor, code);
        																	},
        peg$c74 = function(code) {
        																						var declarations = [];
        																						for (var i = 0; i < code.length; ++i)
        																						{
        																							declarations.push(code[i][0]);
        																						}
        																						return declarations;
        																					},
        peg$c75 = "mainAgent",
        peg$c76 = { type: "literal", value: "mainAgent", description: "\"mainAgent\"" },
        peg$c77 = function(stmtBlock) { return new PCMainAgent(stmtBlock); },
        peg$c78 = function(type, id, fp, stmtBlock) {
        																							fp.unshift(type, id, stmtBlock);
        																							return construct(PCProcedureDecl, fp);
        																						},
        peg$c79 = "(",
        peg$c80 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c81 = ",",
        peg$c82 = { type: "literal", value: ",", description: "\",\"" },
        peg$c83 = ")",
        peg$c84 = { type: "literal", value: ")", description: "\")\"" },
        peg$c85 = function(test) {
        																				if (test != null)
        																				{
        																					var fp = [];
        																					fp.push(test[0]);
        																					for (var i = 0; i < test[1].length; ++i)
        																					{
        																						fp.push(test[1][i][3]);
        																					}
        																					return fp;
        																				}
        																				else
        																				{
        																					return [];
        																				}
        																			},
        peg$c86 = function(type, id) { return new PCFormalParameter(type, id); },
        peg$c87 = "struct",
        peg$c88 = { type: "literal", value: "struct", description: "\"struct\"" },
        peg$c89 = function(id, code) {
        																	code.unshift(id);
        																	return construct(PCStruct, code);
        																},
        peg$c90 = function(decls) {
        														var declarations = [];
        														for (var i = 0; i < decls.length; ++i)
        														{
        															declarations.push(decls[i][0]);
        														}
        														return declarations;
        													},
        peg$c91 = "condition",
        peg$c92 = { type: "literal", value: "condition", description: "\"condition\"" },
        peg$c93 = "with",
        peg$c94 = { type: "literal", value: "with", description: "\"with\"" },
        peg$c95 = ";",
        peg$c96 = { type: "literal", value: ";", description: "\";\"" },
        peg$c97 = function(id, exp) { return new PCConditionDecl(id, exp); },
        peg$c98 = function(decl) {
        									decl.isStatement = true;
        									return decl;
        								},
        peg$c99 = function(type, head, tail) {
        																					var declarations = [];
        																					declarations.push(false, type, head);
        																					for (var i = 0; i < tail.length; ++i)
        																					{
        																						declarations.push(tail[i][3]);
        																					}
        																					return construct(PCDecl, declarations);
        																				},
        peg$c100 = "=",
        peg$c101 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c102 = function(id, varInit) { return varInit != null ? new PCVariableDeclarator(id, varInit[3]) : new PCVariableDeclarator(id); },
        peg$c103 = function(test, uncomplete) {
        																												if (test != null)
        																												{
        																													var inits = [];
        																													inits.push(test[0]);
        																													for (var i = 0; i < test[1].length; ++i)
        																													{
        																														inits.push(test[1][i][3]);
        																													}
        																													return new PCVariableInitializer(uncomplete != null, inits);
        																												}
        																												else
        																												{
        																													return new PCVariableInitializer(uncomplete != null);
        																												}
        																											},
        peg$c104 = function(exp) { return new PCVariableInitializer(false, exp); },
        peg$c105 = "[",
        peg$c106 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c107 = "]",
        peg$c108 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c109 = function(type, ranges) {
        																var res = type;
        																for (var i = 0; i < ranges.length; ++i)
        																{
        																	res = new PCArrayType(res, ranges[i][1]);
        																}
        																return res;
        															},
        peg$c110 = function(ch) { return ch; },
        peg$c111 = "bool",
        peg$c112 = { type: "literal", value: "bool", description: "\"bool\"" },
        peg$c113 = function() { return new PCSimpleType(PCSimpleType.BOOL); },
        peg$c114 = "int",
        peg$c115 = { type: "literal", value: "int", description: "\"int\"" },
        peg$c116 = function() { return new PCSimpleType(PCSimpleType.INT); },
        peg$c117 = "string",
        peg$c118 = { type: "literal", value: "string", description: "\"string\"" },
        peg$c119 = function() { return new PCSimpleType(PCSimpleType.STRING); },
        peg$c120 = "mutex",
        peg$c121 = { type: "literal", value: "mutex", description: "\"mutex\"" },
        peg$c122 = function() { return new PCSimpleType(PCSimpleType.MUTEX); },
        peg$c123 = "agent",
        peg$c124 = { type: "literal", value: "agent", description: "\"agent\"" },
        peg$c125 = function() { return new PCSimpleType(PCSimpleType.AGENT); },
        peg$c126 = function(id) { return new PCClassType(id); },
        peg$c127 = "intchan",
        peg$c128 = { type: "literal", value: "intchan", description: "\"intchan\"" },
        peg$c129 = function(int_) { return new PCChannelType(PCSimpleType.INT, int_ != null ? int_ : PCChannelType.CAPACITY_UNKNOWN); },
        peg$c130 = "boolchan",
        peg$c131 = { type: "literal", value: "boolchan", description: "\"boolchan\"" },
        peg$c132 = function(int_) { return new PCChannelType(PCSimpleType.BOOL, int_ != null ? int_ : PCChannelType.CAPACITY_UNKNOWN); },
        peg$c133 = "stringchan",
        peg$c134 = { type: "literal", value: "stringchan", description: "\"stringchan\"" },
        peg$c135 = function(int_) { return new PCChannelType(PCSimpleType.STRING, int_ != null ? int_ : PCChannelType.CAPACITY_UNKNOWN); },
        peg$c136 = "void",
        peg$c137 = { type: "literal", value: "void", description: "\"void\"" },
        peg$c138 = function() { return new PCSimpleType(PCSimpleType.VOID); },
        peg$c139 = function(type) { return type; },
        peg$c140 = function(exp) { return exp; },
        peg$c141 = "start",
        peg$c142 = { type: "literal", value: "start", description: "\"start\"" },
        peg$c143 = function(exp) { return new PCStartExpression(exp); },
        peg$c144 = function(head, tail) {
        														var exps = [];
        														exps.push(head);
        														for (var i = 0; i < tail.length; ++i)
        														{
        															exps.push(tail[i][3]);
        														}
        														return exps;
        													},
        peg$c145 = function(dest, op, exp) { return new PCAssignExpression(dest, op, exp); },
        peg$c146 = function(id, pos) {
        													var ind = [];
        													for (var i = 0; i < pos.length; ++i)
        													{
        														ind.push(pos[i][1]);
        													}
        													return new PCAssignDestination(id, ind);
        												},
        peg$c147 = function() { return "="; },
        peg$c148 = "*=",
        peg$c149 = { type: "literal", value: "*=", description: "\"*=\"" },
        peg$c150 = function() { return "*="; },
        peg$c151 = "/=",
        peg$c152 = { type: "literal", value: "/=", description: "\"/=\"" },
        peg$c153 = function() { return "/="; },
        peg$c154 = "+=",
        peg$c155 = { type: "literal", value: "+=", description: "\"+=\"" },
        peg$c156 = function() { return "+="; },
        peg$c157 = "-=",
        peg$c158 = { type: "literal", value: "-=", description: "\"-=\"" },
        peg$c159 = function() { return "-="; },
        peg$c160 = "<!",
        peg$c161 = { type: "literal", value: "<!", description: "\"<!\"" },
        peg$c162 = function(callExp, exp) { return new PCSendExpression(callExp, exp); },
        peg$c163 = "?",
        peg$c164 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c165 = ":",
        peg$c166 = { type: "literal", value: ":", description: "\":\"" },
        peg$c167 = function(exp, rest) { return rest != null ? new PCConditionalExpression(exp, rest[3], rest[7]) : exp; },
        peg$c168 = "||",
        peg$c169 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c170 = function(exp, rest) {
        																					var res = exp;
        																					for (var i = 0; i < rest.length; ++i)
        																					{
        																						res = new PCOrExpression(res, rest[i][3]);
        																					}
        																					return res;
        																				},
        peg$c171 = "&&",
        peg$c172 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c173 = function(exp, rest) {
        																		var res = exp;
        																		for (var i = 0; i < rest.length; ++i)
        																		{
        																			res = new PCAndExpression(res, rest[i][3]);
        																		}
        																		return res;
        																	},
        peg$c174 = "==",
        peg$c175 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c176 = "!=",
        peg$c177 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c178 = function(exp, rest) {
        																					var res = exp;
        																					for (var i = 0; i < rest.length; ++i)
        																					{
        																						res = new PCEqualityExpression(res, rest[i][1], rest[i][3]);
        																					}
        																					return res;
        																				},
        peg$c179 = "<=",
        peg$c180 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c181 = "<",
        peg$c182 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c183 = ">=",
        peg$c184 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c185 = ">",
        peg$c186 = { type: "literal", value: ">", description: "\">\"" },
        peg$c187 = function(exp, rest) {
        																							var res = exp;
        																							for (var i = 0; i < rest.length; ++i)
        																							{
        																								res = new PCRelationalExpression(res, rest[i][1], rest[i][3]);
        																							}
        																							return res;
        																						},
        peg$c188 = "+",
        peg$c189 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c190 = "-",
        peg$c191 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c192 = function(exp, rest) {
        																						var res = exp;
        																						for (var i = 0; i < rest.length; ++i)
        																						{
        																							res = new PCAdditiveExpression(res, rest[i][1], rest[i][3]);
        																						}
        																						return res;
        																					},
        peg$c193 = "*",
        peg$c194 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c195 = "/",
        peg$c196 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c197 = "%",
        peg$c198 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c199 = function(exp, rest) {
        																			var res = exp;
        																			for (var i = 0; i < rest.length; ++i)
        																			{
        																				res = new PCMultiplicative(res, rest[i][1], rest[i][3]);
        																			}
        																			return res;
        																		},
        peg$c200 = "!",
        peg$c201 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c202 = function(op, exp) { return new PCUnaryExpression(op, exp); },
        peg$c203 = "++",
        peg$c204 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c205 = "--",
        peg$c206 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c207 = function(dest, op) { return new PCPostfixExpression(dest, op); },
        peg$c208 = "<?",
        peg$c209 = { type: "literal", value: "<?", description: "\"<?\"" },
        peg$c210 = function(op, exp) { return op.length > 0 ? new PCReceiveExpression(exp) : exp; },
        peg$c211 = function(call) { return call; },
        peg$c212 = function(id, args) { return new PCProcedureCall(id, args); },
        peg$c213 = function(expList) { return expList != null ? expList : []; },
        peg$c214 = ".",
        peg$c215 = { type: "literal", value: ".", description: "\".\"" },
        peg$c216 = function(exp, call) {
        														var res = new PCClassCall(exp, call[0][1]);
        														for (var i = 1; i < call.length; ++i)
        														{
        															res = new PCClassCall(res, call[i][1]);
        														}
        														return res;
        													},
        peg$c217 = function(exp, call) {
        															var res = exp;
        															for (var i = 0; i < call.length; ++i)
        															{
        																res = new PCArrayExpression(res, call[i][1]);
        															}
        															return res;
        														},
        peg$c218 = function(exp) { return new PCLiteralExpression(exp); },
        peg$c219 = function(exp) { return new PCIdentifierExpression(exp); },
        peg$c220 = function(literal) { return literal; },
        peg$c221 = "true",
        peg$c222 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c223 = function() { return true; },
        peg$c224 = "false",
        peg$c225 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c226 = function() { return false; },
        peg$c227 = function(blockStmts) {
        														var stmts = [];
        														for (var i = 0; i < blockStmts.length; ++i)
        														{
        															stmts.push(blockStmts[i][0]);
        														}
        														return construct(PCStmtBlock, stmts);
        													},
        peg$c228 = function(stmt) { return stmt; },
        peg$c229 = function(stmt) { return new PCStatement(stmt); },
        peg$c230 = "break",
        peg$c231 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c232 = function() { return new PCStatement(new PCBreakStmt()); },
        peg$c233 = "continue",
        peg$c234 = { type: "literal", value: "continue", description: "\"continue\"" },
        peg$c235 = function() { return new PCStatement(new PCContinueStmt()); },
        peg$c236 = function() { return new PCStatement(); },
        peg$c237 = function(stmtExp) { return new PCStmtExpression(stmtExp); },
        peg$c238 = function(head, tail) {
        																			var stmts = [];
        																			stmts.push(head);
        																			for (var i = 0; i < tail.length; ++i)
        																			{
        																				stmts.push(tail[i][3]);
        																			}
        																			return stmts;
        																		},
        peg$c239 = "select",
        peg$c240 = { type: "literal", value: "select", description: "\"select\"" },
        peg$c241 = function(stmts) {
        															var caseStmts = [];
        															for (var i = 0; i < stmts.length; ++i)
        															{
        																caseStmts.push(stmts[i]);
        															}
        															return construct(PCSelectStmt, caseStmts);
        														},
        peg$c242 = "case",
        peg$c243 = { type: "literal", value: "case", description: "\"case\"" },
        peg$c244 = function(exp, stmt) { return new PCCase(stmt, exp); },
        peg$c245 = "default",
        peg$c246 = { type: "literal", value: "default", description: "\"default\"" },
        peg$c247 = function(stmt) { return new PCCase(stmt); },
        peg$c248 = "if",
        peg$c249 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c250 = "else",
        peg$c251 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c252 = function(exp, ifStmt, test) { return test != null ? new PCIfStmt(exp, ifStmt, test[2]) : new PCIfStmt(exp, ifStmt); },
        peg$c253 = "while",
        peg$c254 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c255 = function(exp, stmt) { return new PCWhileStmt(exp, stmt); },
        peg$c256 = "do",
        peg$c257 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c258 = function(stmt, exp) { return new PCDoStmt(stmt, exp); },
        peg$c259 = "for",
        peg$c260 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c261 = function(init, exp, update, stmt) {
        																														var res = [];
        																														if (update != null)
        																														{
        																															res = res.concat(update);
        																														}
        																														res.unshift(stmt, init, exp);
        																														return construct(PCForStmt, res);
        																													},
        peg$c262 = function(head, tail) {
        																										var inits = [];
        																										inits.push(head);
        																										for (var i = 0; i < tail.length; ++i)
        																										{
        																											inits.push(tail[i][3]);
        																										}
        																										return construct(PCForInit, inits);
        																									},
        peg$c263 = function(stmtList) { return stmtList; },
        peg$c264 = "return",
        peg$c265 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c266 = function(exp) { return exp != null ? new PCReturnStmt(exp) : new PCReturnStatement(); },
        peg$c267 = "join",
        peg$c268 = { type: "literal", value: "join", description: "\"join\"" },
        peg$c269 = function(exp) { return new PCPrimitiveStmt(PCPrimitiveStmt.JOIN, exp); },
        peg$c270 = "lock",
        peg$c271 = { type: "literal", value: "lock", description: "\"lock\"" },
        peg$c272 = function(exp) { return new PCPrimitiveStmt(PCPrimitiveStmt.LOCK, exp); },
        peg$c273 = "unlock",
        peg$c274 = { type: "literal", value: "unlock", description: "\"unlock\"" },
        peg$c275 = function(exp) { return new PCPrimitiveStmt(PCPrimitiveStmt.UNLOCK, exp); },
        peg$c276 = "waitForCondition",
        peg$c277 = { type: "literal", value: "waitForCondition", description: "\"waitForCondition\"" },
        peg$c278 = function(exp) { return new PCPrimitiveStmt(PCPrimitiveStmt.WAIT, exp); },
        peg$c279 = "signal",
        peg$c280 = { type: "literal", value: "signal", description: "\"signal\"" },
        peg$c281 = function(exp) { return new PCPrimitiveStmt(PCPrimitiveStmt.SIGNAL, exp); },
        peg$c282 = "signalAll",
        peg$c283 = { type: "literal", value: "signalAll", description: "\"signalAll\"" },
        peg$c284 = function(exp) { return exp != null ? new PCPrimitiveStmt(PCPrimitiveStmt.SIGNAL_ALL, exp) : new PCPrimitiveStmt(PCPrimitiveStmt.SIGNAL_ALL); },
        peg$c285 = "println",
        peg$c286 = { type: "literal", value: "println", description: "\"println\"" },
        peg$c287 = function(expList) { return new PCPrintStmt(expList); },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseProgram();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOF();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c1(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }

      return s0;
    }

    function peg$parseWhiteSpace() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c4.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c7.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 10) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s1 = peg$c12;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c6();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 13) {
            s1 = peg$c14;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c6();
          }
          s0 = s1;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseMultiLineComment();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFormalComment();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c6();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSingleLineComment();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c6();
          }
          s0 = s1;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }

      return s0;
    }

    function peg$parseMultiLineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c17) {
        s1 = peg$c17;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c21) {
          s5 = peg$c21;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c20;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c21) {
            s5 = peg$c21;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c20;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c21) {
            s3 = peg$c21;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c6();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMultiLineCommentNoLineTerminator() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c17) {
        s1 = peg$c17;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c21) {
          s5 = peg$c21;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseLineTerminator();
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c20;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c21) {
            s5 = peg$c21;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseLineTerminator();
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c20;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c21) {
            s3 = peg$c21;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c6();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFormalComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c23) {
        s1 = peg$c23;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c21) {
          s5 = peg$c21;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c20;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c21) {
            s5 = peg$c21;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c20;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c21) {
            s3 = peg$c21;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c6();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSingleLineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c20;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseLineTerminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c20;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c6();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = peg$parseMultiLineCommentNoLineTerminator();
        if (s2 === peg$FAILED) {
          s2 = peg$parseSingleLineComment();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWhiteSpace();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMultiLineCommentNoLineTerminator();
          if (s2 === peg$FAILED) {
            s2 = peg$parseSingleLineComment();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;

      return s0;
    }

    function peg$parse__() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLineTerminatorSequence();
        if (s2 === peg$FAILED) {
          s2 = peg$parseComment();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWhiteSpace();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminatorSequence();
          if (s2 === peg$FAILED) {
            s2 = peg$parseComment();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c20;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIntegerLiteral() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c28;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c30();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (peg$c31.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c33.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c33.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c35(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c37;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseStringCharacters();
        if (s3 === peg$FAILED) {
          s3 = peg$c39;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s4 = peg$c37;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c40(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }

      return s0;
    }

    function peg$parseStringCharacters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseStringCharacter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseStringCharacter();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c41(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c37;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c42;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c20;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c44(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c42;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c45(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLineContinuation();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c46(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseLineContinuation() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c42;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLineTerminatorSequence();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c47(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseCharacterEscapeSequence();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c47(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOctalEscapeSequence();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c47(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c48.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c44(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOctalEscapeSequence() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c50.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c50.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c39;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c52(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (peg$c53.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c50.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s2 !== peg$FAILED) {
            if (peg$c50.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c55(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseLetter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseLetter();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDigit();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseLetter();
          if (s3 === peg$FAILED) {
            s3 = peg$parseDigit();
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c57(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }

      return s0;
    }

    function peg$parseLetter() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c58.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c60(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDigit() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c61.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c63(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseProgram() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseSourceElements();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c64(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSourceElements() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSourceElement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceElement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c65(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSourceElement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseMonitor();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c66(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseStruct();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c66(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseMainAgent();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c66(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseProcedure();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c66(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDeclarationStatement();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c66(s1);
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseMonitor() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c67) {
        s1 = peg$c67;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c69;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseMonitorCode();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c71;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c72); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c73(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMonitorCode() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseProcedure();
      if (s3 === peg$FAILED) {
        s3 = peg$parseConditionDeclarationStatement();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDeclarationStatement();
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseProcedure();
        if (s3 === peg$FAILED) {
          s3 = peg$parseConditionDeclarationStatement();
          if (s3 === peg$FAILED) {
            s3 = peg$parseDeclarationStatement();
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c74(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMainAgent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c75) {
        s1 = peg$c75;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseStatementBlock();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c77(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseProcedure() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseResultType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFormalParameters();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseStatementBlock();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c78(s1, s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFormalParameters() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c79;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseFormalParameter();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c81;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseFormalParameter();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c81;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c82); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseFormalParameter();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c39;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c83;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c85(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFormalParameter() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c86(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseStruct() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c87) {
        s1 = peg$c87;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c69;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseStructCode();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c71;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c89(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseStructCode() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseProcedure();
      if (s3 === peg$FAILED) {
        s3 = peg$parseDeclarationStatement();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseProcedure();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDeclarationStatement();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c90(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseConditionDeclarationStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c91) {
        s1 = peg$c91;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c93) {
                s5 = peg$c93;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c94); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseExpression();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s9 = peg$c95;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c96); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c97(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDeclarationStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s3 = peg$c95;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c98(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVariableDeclarator();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c81;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseVariableDeclarator();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c81;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c82); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseVariableDeclarator();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c99(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseVariableDeclarator() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c100;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c101); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseVariableInitializer();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c39;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c102(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseVariableInitializer() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseVariableInitializer();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c81;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseVariableInitializer();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c81;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c82); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseVariableInitializer();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c39;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c81;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c39;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c71;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c72); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c103(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseExpression();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c104(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseType() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsePrimitiveType();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c105;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseIntegerLiteral();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s6 = peg$c107;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c105;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c106); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIntegerLiteral();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c107;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c108); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c109(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePrimitiveType() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseChan();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c110(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c111) {
          s1 = peg$c111;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c114) {
            s1 = peg$c114;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c115); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c116();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c117) {
              s1 = peg$c117;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c118); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c119();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c120) {
                s1 = peg$c120;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c122();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c123) {
                  s1 = peg$c123;
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c124); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c125();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseIdentifier();
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c126(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseChan() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c127) {
        s1 = peg$c127;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c128); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIntegerLiteral();
        if (s2 === peg$FAILED) {
          s2 = peg$c39;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c129(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c130) {
          s1 = peg$c130;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIntegerLiteral();
          if (s2 === peg$FAILED) {
            s2 = peg$c39;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c132(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 10) === peg$c133) {
            s1 = peg$c133;
            peg$currPos += 10;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c134); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIntegerLiteral();
            if (s2 === peg$FAILED) {
              s2 = peg$c39;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c135(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseResultType() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c136) {
        s1 = peg$c136;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c138();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseType();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c139(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseStartExpression();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c140(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAssignmentExpression();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c140(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSendExpression();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c140(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseConditionalExpression();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c140(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseStartExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c141) {
        s1 = peg$c141;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMonCall();
          if (s3 === peg$FAILED) {
            s3 = peg$parseProcCall();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c143(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseExpressionList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c81;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c82); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c81;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c82); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c144(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAssignmentExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseAssignDestination();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAssignmentOperator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c145(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAssignDestination() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c105;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseExpression();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s6 = peg$c107;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c105;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c106); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExpression();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c107;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c108); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c146(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAssignmentOperator() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c147();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c148) {
          s1 = peg$c148;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c149); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c150();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c151) {
            s1 = peg$c151;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c152); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c153();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c154) {
              s1 = peg$c154;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c155); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c156();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c157) {
                s1 = peg$c157;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c158); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c159();
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSendExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCallExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c160) {
            s3 = peg$c160;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c161); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c162(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseConditionalExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseConditionalOrExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c163;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c164); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseExpression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s8 = peg$c165;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c166); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseConditionalExpression();
                      if (s10 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8, s9, s10];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c39;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c167(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseConditionalOrExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseConditionalAndExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c168) {
            s5 = peg$c168;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c169); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseConditionalAndExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c168) {
              s5 = peg$c168;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c169); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseConditionalAndExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c170(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseConditionalAndExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseEqualityExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c171) {
            s5 = peg$c171;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c172); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseEqualityExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c171) {
              s5 = peg$c171;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c172); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseEqualityExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c173(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEqualityExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseRelationalExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c174) {
            s5 = peg$c174;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c175); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c176) {
              s5 = peg$c176;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c177); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseRelationalExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c174) {
              s5 = peg$c174;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c175); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c176) {
                s5 = peg$c176;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c177); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseRelationalExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c178(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRelationalExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseAdditiveExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c179) {
            s5 = peg$c179;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c180); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 60) {
              s5 = peg$c181;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c182); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c183) {
                s5 = peg$c183;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c184); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s5 = peg$c185;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c186); }
                }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAdditiveExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c179) {
              s5 = peg$c179;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c180); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 60) {
                s5 = peg$c181;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c182); }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c183) {
                  s5 = peg$c183;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c184); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s5 = peg$c185;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c186); }
                  }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAdditiveExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c187(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAdditiveExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseMultiplicativeExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s5 = peg$c188;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c189); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c190;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c191); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseMultiplicativeExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c188;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c189); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c190;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c191); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseMultiplicativeExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c192(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMultiplicativeExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s5 = peg$c193;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c194); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s5 = peg$c195;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c196); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s5 = peg$c197;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c198); }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseUnaryExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s5 = peg$c193;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c194); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c195;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c196); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 37) {
                  s5 = peg$c197;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c198); }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseUnaryExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c199(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseUnaryExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c188;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c189); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c190;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c191); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s1 = peg$c200;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c201); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseUnaryExpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c202(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseReceiveExpression();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c140(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePostfixExpression();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c140(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsePostfixExpression() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAssignDestination();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c203) {
          s2 = peg$c203;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c204); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c205) {
            s2 = peg$c205;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c206); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c207(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseReceiveExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c208) {
          s4 = peg$c208;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c208) {
            s4 = peg$c208;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c209); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCallExpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c210(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCallExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseMonCall();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c211(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseProcCall();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c211(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseArrayExpression();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c211(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseProcCall() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseArguments();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c212(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseArguments() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c79;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpressionList();
          if (s3 === peg$FAILED) {
            s3 = peg$c39;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c83;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c213(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMonCall() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsePrimaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c214;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c215); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseProcCall();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s4 = peg$c214;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c215); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseProcCall();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c216(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseArrayExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsePrimaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c105;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseExpression();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s6 = peg$c107;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c105;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c106); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExpression();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c107;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c108); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c217(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePrimaryExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLiteral();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c218(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c219(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c79;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseExpression();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s3 = peg$c83;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c140(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseIntegerLiteral();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c220(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseStringLiteral();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c220(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseBooleanLiteral();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c220(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseBooleanLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c221) {
        s1 = peg$c221;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c222); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c223();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c224) {
          s1 = peg$c224;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c225); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c226();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseStatementBlock() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseBlockStatement();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseBlockStatement();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c71;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c227(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBlockStatement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseStatement();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c228(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseProcedure();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c228(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDeclarationStatement();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c229(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseConditionDeclarationStatement();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c228(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseStatementBlock();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c229(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseStatementExpression();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s2 = peg$c95;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c229(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSelectStatement();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c229(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseIfStatement();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c229(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseWhileStatement();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c229(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseDoStatement();
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c229(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseForStatement();
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c229(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 5) === peg$c230) {
                      s1 = peg$c230;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c231); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s3 = peg$c95;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c96); }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c232();
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 8) === peg$c233) {
                        s1 = peg$c233;
                        peg$currPos += 8;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c234); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (s2 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s3 = peg$c95;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c96); }
                          }
                          if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c235();
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseReturnStatement();
                        if (s1 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c229(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsePrimitiveStatement();
                          if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c229(s1);
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsePrintln();
                            if (s1 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c229(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parse_();
                              if (s1 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                  s2 = peg$c95;
                                  peg$currPos++;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c96); }
                                }
                                if (s2 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c236();
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseStatementExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseStartExpression();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c237(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAssignmentExpression();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c237(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSendExpression();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c237(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsePostfixExpression();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c237(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCallExpression();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c237(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseReceiveExpression();
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c237(s1);
                }
                s0 = s1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseStatementExpressionList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseStatementExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c81;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c82); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseStatementExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c81;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c82); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseStatementExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c238(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSelectStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c239) {
        s1 = peg$c239;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c240); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c69;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseCaseStatement();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseCaseStatement();
                }
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s7 = peg$c71;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c72); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c241(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCaseStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c242) {
        s1 = peg$c242;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseStatementExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s5 = peg$c165;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c166); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseStatement();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c244(s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c245) {
          s1 = peg$c245;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c246); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c165;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c166); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseStatement();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c247(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseIfStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c248) {
        s1 = peg$c248;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c79;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c83;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c84); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseStatement();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse__();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$currPos;
                          if (input.substr(peg$currPos, 4) === peg$c250) {
                            s12 = peg$c250;
                            peg$currPos += 4;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c251); }
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse__();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parseStatement();
                              if (s14 !== peg$FAILED) {
                                s12 = [s12, s13, s14];
                                s11 = s12;
                              } else {
                                peg$currPos = s11;
                                s11 = peg$c0;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$c0;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c0;
                          }
                          if (s11 === peg$FAILED) {
                            s11 = peg$c39;
                          }
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c252(s5, s9, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseWhileStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c253) {
        s1 = peg$c253;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c79;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c83;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c84); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseStatement();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c255(s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDoStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c256) {
        s1 = peg$c256;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c257); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseStatement();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c253) {
                s5 = peg$c253;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c254); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s7 = peg$c79;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c80); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseExpression();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s11 = peg$c83;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c84); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parse_();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 59) {
                                s13 = peg$c95;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c96); }
                              }
                              if (s13 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c258(s3, s9);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseForStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c259) {
        s1 = peg$c259;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c260); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c79;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseForInit();
              if (s5 === peg$FAILED) {
                s5 = peg$c39;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s7 = peg$c95;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c96); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseExpression();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c39;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s11 = peg$c95;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c96); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parse_();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseForUpdate();
                              if (s13 === peg$FAILED) {
                                s13 = peg$c39;
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parse_();
                                if (s14 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 41) {
                                    s15 = peg$c83;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c84); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parse__();
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parseStatement();
                                      if (s17 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c261(s5, s9, s13, s17);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseForInit() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseDeclaration();
      if (s1 === peg$FAILED) {
        s1 = peg$parseStatementExpression();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c81;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c82); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseDeclaration();
              if (s7 === peg$FAILED) {
                s7 = peg$parseStatementExpression();
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c81;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c82); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDeclaration();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseStatementExpression();
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c262(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseForUpdate() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseStatementExpressionList();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c263(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseReturnStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c264) {
        s1 = peg$c264;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c265); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 === peg$FAILED) {
            s3 = peg$c39;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c95;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c96); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c266(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePrimitiveStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c267) {
        s1 = peg$c267;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c268); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c95;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c96); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c269(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c270) {
          s1 = peg$c270;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c271); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s5 = peg$c95;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c96); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c272(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c273) {
            s1 = peg$c273;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c274); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseExpression();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s5 = peg$c95;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c96); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c275(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 16) === peg$c276) {
              s1 = peg$c276;
              peg$currPos += 16;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c277); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseExpression();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s5 = peg$c95;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c96); }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c278(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c279) {
                s1 = peg$c279;
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c280); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseExpression();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s5 = peg$c95;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c96); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c281(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9) === peg$c282) {
                  s1 = peg$c282;
                  peg$currPos += 9;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c283); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseExpression();
                    if (s3 === peg$FAILED) {
                      s3 = peg$c39;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s5 = peg$c95;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c96); }
                        }
                        if (s5 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c284(s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsePrintln() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c285) {
        s1 = peg$c285;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c286); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c79;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpressionList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c83;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c84); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s9 = peg$c95;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c96); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c287(s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }


    	function construct(constructor, args)
    	{
    		function F()
    		{
    			return constructor.apply(this, args);
    		}
    		F.prototype = constructor.prototype;
    		return new F();
    	}


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
// Generated by CoffeeScript 1.6.3
/* ###
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
### */;
/*

	The following classes represent the PseuCo tree. Its implementation is partly incomplete.
	Method _getType is not implemented everywhere and does not perform type checking anywhere at the moment!
	
	toString returns the string representation of the tree with minimal brackets and correctly indented.
*/

var PCAdditiveExpression, PCAndExpression, PCArrayExpression, PCArrayType, PCAssignDestination, PCAssignExpression, PCBaseType, PCBreakStmt, PCCase, PCChannelType, PCClassCall, PCClassType, PCConditionDecl, PCConditionalExpression, PCContinueStmt, PCDecl, PCDeclStmt, PCDoStmt, PCEqualityExpression, PCExpression, PCForInit, PCForStmt, PCFormalParameter, PCIdentifierExpression, PCIfStmt, PCIndent, PCLiteralExpression, PCMainAgent, PCMonitor, PCMultiplicativeExpression, PCNode, PCOrExpression, PCPostfixExpression, PCPrimitiveStmt, PCPrintStmt, PCProcedureCall, PCProcedureDecl, PCProgram, PCReceiveExpression, PCRelationalExpression, PCReturnStmt, PCSelectStmt, PCSendExpression, PCSimpleType, PCStartExpression, PCStatement, PCStmtBlock, PCStmtExpression, PCStruct, PCTArrayType, PCTChannelType, PCTClass, PCTClassType, PCTEnvironmentController, PCTEnvironmentNode, PCTProcedure, PCTProcedureType, PCTType, PCTTypeType, PCTVariable, PCUnaryExpression, PCVariableDeclarator, PCVariableInitializer, PCWhileStmt, exports, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PCIndent = "   ";

PCNode = (function() {
  function PCNode() {
    var c, children, _i, _len, _ref;
    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.children = children;
    this.parent = null;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      c.parent = this;
    }
  }

  PCNode.prototype.getType = function(env) {
    if (!this._type) {
      this._type = this._getType(env);
      if (!this._type) {
        this._type = true;
      }
    }
    if (this._type === true) {
      return null;
    } else {
      return this._type;
    }
  };

  PCNode.prototype._getType = function() {
    throw new Error("Not implemented");
  };

  return PCNode;

})();

PCProgram = (function(_super) {
  __extends(PCProgram, _super);

  function PCProgram() {
    _ref = PCProgram.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PCProgram.prototype.collectClasses = function(env) {
    var c, _i, _len, _ref1, _results;
    _ref1 = this.children;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      c = _ref1[_i];
      _results.push(c.collectClasses(env));
    }
    return _results;
  };

  PCProgram.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref1, _results;
    _ref1 = this.children;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      c = _ref1[_i];
      _results.push(c.collectEnvironment(env));
    }
    return _results;
  };

  PCProgram.prototype.toString = function() {
    var o;
    return ((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.children;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        o = _ref1[_i];
        _results.push(o.toString(""));
      }
      return _results;
    }).call(this)).join("\n");
  };

  return PCProgram;

})(PCNode);

PCMainAgent = (function(_super) {
  __extends(PCMainAgent, _super);

  function PCMainAgent() {
    _ref1 = PCMainAgent.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  PCMainAgent.prototype.collectClasses = function(env) {
    return null;
  };

  PCMainAgent.prototype.collectEnvironment = function(env) {
    env.beginMainAgent(this);
    this.children[0].collectEnvironment(env);
    return env.endMainAgent();
  };

  PCMainAgent.prototype.toString = function() {
    return "mainAgent " + this.children[0].toString("");
  };

  return PCMainAgent;

})(PCNode);

PCProcedureDecl = (function(_super) {
  __extends(PCProcedureDecl, _super);

  function PCProcedureDecl() {
    var body, name, parameters, resultType;
    resultType = arguments[0], name = arguments[1], body = arguments[2], parameters = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.name = name;
    parameters.unshift(resultType, body);
    PCProcedureDecl.__super__.constructor.apply(this, parameters);
  }

  PCProcedureDecl.prototype.getResultType = function() {
    return this.children[0];
  };

  PCProcedureDecl.prototype.getBody = function() {
    return this.children[1];
  };

  PCProcedureDecl.prototype.getArgumentCount = function() {
    return this.children.length - 2;
  };

  PCProcedureDecl.prototype.getArgumentAtIndex = function(index) {
    return this.children[index + 2];
  };

  PCProcedureDecl.prototype.collectClasses = function(env) {
    return null;
  };

  PCProcedureDecl.prototype.collectEnvironment = function(env) {
    var args, p;
    args = (function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.children.slice(2, this.children.length);
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i += 1) {
        p = _ref2[_i];
        _results.push(p.getVariable(env));
      }
      return _results;
    }).call(this);
    env.beginNewProcedure(this, this.name, this.getResultType().getType(env).type, args);
    this.getBody().collectEnvironment(env);
    return env.endProcedure();
  };

  PCProcedureDecl.prototype.toString = function(indent) {
    var i;
    return "" + indent + (this.getResultType().toString()) + " " + this.name + "(" + (((function() {
      var _i, _ref2, _results;
      _results = [];
      for (i = _i = 0, _ref2 = this.getArgumentCount(); _i < _ref2; i = _i += 1) {
        _results.push(this.getArgumentAtIndex(i).toString());
      }
      return _results;
    }).call(this)).join(", ")) + ") " + (this.getBody().toString(indent));
  };

  return PCProcedureDecl;

})(PCNode);

PCFormalParameter = (function(_super) {
  __extends(PCFormalParameter, _super);

  function PCFormalParameter(type, identifier) {
    this.identifier = identifier;
    PCFormalParameter.__super__.constructor.call(this, type);
  }

  PCFormalParameter.prototype.getVariable = function(env) {
    return new PCTVariable(this, this.identifier, this.children[0].getType(env).type);
  };

  PCFormalParameter.prototype.toString = function() {
    return this.children[0].toString() + " " + this.identifier;
  };

  return PCFormalParameter;

})(PCNode);

PCMonitor = (function(_super) {
  __extends(PCMonitor, _super);

  function PCMonitor() {
    var declarations, name;
    name = arguments[0], declarations = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.name = name;
    PCMonitor.__super__.constructor.apply(this, declarations);
  }

  PCMonitor.prototype.collectClasses = function(env) {
    return env.processNewClass(this, new PCTClassType(true, this.name));
  };

  PCMonitor.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref2;
    env.beginClass(this.name);
    _ref2 = this.children;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      c = _ref2[_i];
      c.collectEnvironment(env);
    }
    return env.endClass();
  };

  PCMonitor.prototype.toString = function() {
    var o;
    return "monitor " + this.name + " {\n" + (((function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.children;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        o = _ref2[_i];
        _results.push(o.toString(PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n}";
  };

  return PCMonitor;

})(PCNode);

PCStruct = (function(_super) {
  __extends(PCStruct, _super);

  function PCStruct() {
    var declarations, name;
    name = arguments[0], declarations = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.name = name;
    PCStruct.__super__.constructor.apply(this, declarations);
  }

  PCStruct.prototype.collectClasses = function(env) {
    return env.processNewClass(this, new PCTClassType(false, this.name));
  };

  PCStruct.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref2;
    env.beginClass(this.name);
    _ref2 = this.children;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      c = _ref2[_i];
      c.collectEnvironment(env);
    }
    return env.endClass();
  };

  PCStruct.prototype.toString = function() {
    var o;
    return "struct " + this.name + " {\n" + (((function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.children;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        o = _ref2[_i];
        _results.push(o.toString(PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n}";
  };

  return PCStruct;

})(PCNode);

PCConditionDecl = (function(_super) {
  __extends(PCConditionDecl, _super);

  function PCConditionDecl(name, expression) {
    this.name = name;
    PCConditionDecl.__super__.constructor.call(this, expression);
  }

  PCConditionDecl.prototype.getExpression = function() {
    return this.children[0];
  };

  PCConditionDecl.prototype.collectEnvironment = function(env) {
    return env.processNewVariable(new PCTVariable(this, this.name, new PCTType(PCTType.CONDITION)));
  };

  PCConditionDecl.prototype.toString = function(indent) {
    return "" + indent + "condition " + this.name + " with " + (this.children[0].toString()) + ";";
  };

  return PCConditionDecl;

})(PCNode);

PCDecl = (function(_super) {
  __extends(PCDecl, _super);

  function PCDecl() {
    var children, isStatement;
    isStatement = arguments[0], children = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.isStatement = isStatement;
    PCDecl.__super__.constructor.apply(this, children);
  }

  PCDecl.prototype.getType = function() {
    return this.children[0];
  };

  PCDecl.prototype.getDeclarators = function() {
    return this.children.slice(1);
  };

  PCDecl.prototype.collectClasses = function(env) {
    return null;
  };

  PCDecl.prototype.collectEnvironment = function(env) {
    var i, type, _i, _ref2, _results;
    type = this.children[0].getType(env).type;
    _results = [];
    for (i = _i = 1, _ref2 = this.children.length; _i < _ref2; i = _i += 1) {
      _results.push(this.children[i].collectEnvironment(env, type));
    }
    return _results;
  };

  PCDecl.prototype.toString = function(indent) {
    var res;
    res = indent + this.children[0].toString() + " " + this.children[1].toString();
    if (this.isStatement) {
      res += ";";
    }
    return res;
  };

  return PCDecl;

})(PCNode);

PCDeclStmt = (function(_super) {
  __extends(PCDeclStmt, _super);

  function PCDeclStmt() {
    var children;
    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    PCDeclStmt.__super__.constructor.apply(this, [true].concat(__slice.call(children)));
  }

  return PCDeclStmt;

})(PCDecl);

PCVariableDeclarator = (function(_super) {
  __extends(PCVariableDeclarator, _super);

  function PCVariableDeclarator(name, initializer) {
    this.name = name;
    if (initializer) {
      PCVariableDeclarator.__super__.constructor.call(this, initializer);
    } else {
      PCVariableDeclarator.__super__.constructor.apply(this, []);
    }
  }

  PCVariableDeclarator.prototype.getInitializer = function() {
    if (this.children.length > 0) {
      return this.children[0];
    } else {
      return null;
    }
  };

  PCVariableDeclarator.prototype.getTypeNode = function() {
    return this.parent.getType();
  };

  PCVariableDeclarator.prototype.collectEnvironment = function(env, type) {
    return env.processNewVariable(new PCTVariable(this, this.name, type));
  };

  PCVariableDeclarator.prototype.toString = function() {
    var res;
    res = this.name;
    if (this.children.length > 0) {
      res += " = " + (this.children[0].toString());
    }
    return res;
  };

  return PCVariableDeclarator;

})(PCNode);

PCVariableInitializer = (function(_super) {
  __extends(PCVariableInitializer, _super);

  function PCVariableInitializer() {
    var children, isUncompletedArray;
    isUncompletedArray = arguments[0], children = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.isUncompletedArray = isUncompletedArray != null ? isUncompletedArray : false;
    PCVariableInitializer.__super__.constructor.apply(this, children);
  }

  PCVariableInitializer.prototype.isArray = function() {
    return !(this.children[0] instanceof PCExpression);
  };

  PCVariableInitializer.prototype.getTypeNode = function() {
    return this.parent.getTypeNode();
  };

  PCVariableInitializer.prototype.toString = function() {
    var o;
    if (this.children[0] instanceof PCExpression) {
      return "" + (this.children[0].toString());
    } else {
      return "{" + (((function() {
        var _i, _len, _ref2, _results;
        _ref2 = this.children;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          o = _ref2[_i];
          _results.push(o.toString());
        }
        return _results;
      }).call(this)).join(", ")) + (this.isUncompletedArray ? "," : "") + "}";
    }
  };

  return PCVariableInitializer;

})(PCNode);

PCArrayType = (function(_super) {
  __extends(PCArrayType, _super);

  function PCArrayType(baseType, size) {
    this.size = size;
    PCArrayType.__super__.constructor.call(this, baseType);
  }

  PCArrayType.prototype._getType = function(env) {
    return new PCTTypeType(new PCTArrayType(this.children[0].getType(env).type, this.size));
  };

  PCArrayType.prototype.toString = function() {
    return "" + this.children[0] + "[" + this.size + "]";
  };

  return PCArrayType;

})(PCNode);

PCBaseType = (function(_super) {
  __extends(PCBaseType, _super);

  function PCBaseType() {
    PCBaseType.__super__.constructor.apply(this, []);
  }

  return PCBaseType;

})(PCNode);

PCSimpleType = (function(_super) {
  __extends(PCSimpleType, _super);

  function PCSimpleType(type) {
    this.type = type;
    if (this.type < 0 || this.type > 5) {
      throw "Unknown type";
    }
    PCSimpleType.__super__.constructor.apply(this, arguments);
  }

  PCSimpleType.prototype._getType = function() {
    return new PCTTypeType(new PCTType(PCSimpleType.typeToTypeKind(this.type)));
  };

  PCSimpleType.prototype.toString = function() {
    return PCSimpleType.typeToString(this.type);
  };

  return PCSimpleType;

})(PCBaseType);

PCSimpleType.VOID = 0;

PCSimpleType.BOOL = 1;

PCSimpleType.INT = 2;

PCSimpleType.STRING = 3;

PCSimpleType.MUTEX = 4;

PCSimpleType.AGENT = 5;

PCSimpleType.typeToString = function(type) {
  switch (type) {
    case PCSimpleType.VOID:
      return "void";
    case PCSimpleType.BOOL:
      return "bool";
    case PCSimpleType.INT:
      return "int";
    case PCSimpleType.STRING:
      return "string";
    case PCSimpleType.MUTEX:
      return "mutex";
    case PCSimpleType.AGENT:
      return "agent";
    default:
      throw new Error("Unknown type!");
  }
};

PCSimpleType.typeToTypeKind = function(type) {
  switch (type) {
    case PCSimpleType.MUTEX:
      return PCTType.MUTEX;
    case PCSimpleType.AGENT:
      return PCTType.AGENT;
    case PCSimpleType.VOID:
      return PCTType.VOID;
    case PCSimpleType.BOOL:
      return PCTType.BOOL;
    case PCSimpleType.INT:
      return PCTType.INT;
    case PCSimpleType.STRING:
      return PCTType.STRING;
    default:
      throw new Error("Unknown type!");
  }
};

PCChannelType = (function(_super) {
  __extends(PCChannelType, _super);

  function PCChannelType(valueType, capacity) {
    this.valueType = valueType;
    this.capacity = capacity;
    PCChannelType.__super__.constructor.apply(this, []);
  }

  PCChannelType.prototype._getType = function() {
    return new PCTTypeType(new PCTChannelType(new PCTType(PCSimpleType.typeToTypeKind(this.valueType)), this.capacity));
  };

  PCChannelType.prototype.toString = function() {
    return "" + (PCSimpleType.typeToString(this.valueType)) + "chan" + (this.capacity !== PCChannelType.CAPACITY_UNKNOWN ? this.capacity : "");
  };

  return PCChannelType;

})(PCNode);

PCChannelType.CAPACITY_UNKNOWN = -1;

PCClassType = (function(_super) {
  __extends(PCClassType, _super);

  function PCClassType(className) {
    this.className = className;
    PCClassType.__super__.constructor.apply(this, arguments);
  }

  PCClassType.prototype._getType = function(env) {
    return new PCTTypeType(env.getClassWithName(this.className).type);
  };

  PCClassType.prototype.toString = function() {
    return this.className;
  };

  return PCClassType;

})(PCBaseType);

PCExpression = (function(_super) {
  __extends(PCExpression, _super);

  function PCExpression() {
    _ref2 = PCExpression.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  PCExpression.prototype.childToString = function(i, diff) {
    var res;
    if (i == null) {
      i = 0;
    }
    if (diff == null) {
      diff = 0;
    }
    res = this.children[i].toString();
    if (this.getPrecedence() + diff > this.children[i].getPrecedence()) {
      res = "(" + res + ")";
    }
    return res;
  };

  return PCExpression;

})(PCNode);

PCStartExpression = (function(_super) {
  __extends(PCStartExpression, _super);

  function PCStartExpression() {
    _ref3 = PCStartExpression.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  PCStartExpression.prototype.getPrecedence = function() {
    return 42;
  };

  PCStartExpression.prototype.toString = function() {
    return "start " + (this.childToString(0));
  };

  PCStartExpression.prototype._getType = function() {
    return new PCType(PCType.AGENT);
  };

  return PCStartExpression;

})(PCExpression);

PCAssignExpression = (function(_super) {
  __extends(PCAssignExpression, _super);

  function PCAssignExpression(destination, operator, expression) {
    this.operator = operator;
    PCAssignExpression.__super__.constructor.call(this, destination, expression);
  }

  PCAssignExpression.prototype.getDestination = function() {
    return this.children[0];
  };

  PCAssignExpression.prototype.getExpression = function() {
    return this.children[1];
  };

  PCAssignExpression.prototype._getType = function(env) {
    return this.children[1].getType(env);
  };

  PCAssignExpression.prototype.getPrecedence = function() {
    return 39;
  };

  PCAssignExpression.prototype.toString = function() {
    return "" + (this.getDestination().toString()) + " " + this.operator + " " + (this.childToString(1));
  };

  return PCAssignExpression;

})(PCExpression);

PCAssignDestination = (function(_super) {
  __extends(PCAssignDestination, _super);

  function PCAssignDestination() {
    var arrayIndexExpressions, identifier;
    identifier = arguments[0], arrayIndexExpressions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.identifier = identifier;
    PCAssignDestination.__super__.constructor.apply(this, arrayIndexExpressions);
  }

  PCAssignDestination.prototype.toString = function() {
    var o;
    return "" + this.identifier + (((function() {
      var _i, _len, _ref4, _results;
      _ref4 = this.children;
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        o = _ref4[_i];
        _results.push("[" + (o.toString()) + "]");
      }
      return _results;
    }).call(this)).join(""));
  };

  return PCAssignDestination;

})(PCNode);

PCSendExpression = (function(_super) {
  __extends(PCSendExpression, _super);

  function PCSendExpression() {
    _ref4 = PCSendExpression.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  PCSendExpression.prototype._getType = function(env) {
    return this.children[1].getType(env);
  };

  PCSendExpression.prototype.getPrecedence = function() {
    return 39;
  };

  PCSendExpression.prototype.toString = function() {
    return "" + (this.childToString(0, 1)) + " <! " + (this.childToString(1));
  };

  return PCSendExpression;

})(PCExpression);

PCConditionalExpression = (function(_super) {
  __extends(PCConditionalExpression, _super);

  function PCConditionalExpression() {
    _ref5 = PCConditionalExpression.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  PCConditionalExpression.prototype._getType = function(env) {
    return this.children[1].getType(env);
  };

  PCConditionalExpression.prototype.getPrecedence = function() {
    return 45;
  };

  PCConditionalExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " ? " + (this.children[1].toString()) + " : " + (this.children[2].toString());
  };

  return PCConditionalExpression;

})(PCExpression);

PCOrExpression = (function(_super) {
  __extends(PCOrExpression, _super);

  function PCOrExpression() {
    _ref6 = PCOrExpression.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  PCOrExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCOrExpression.prototype.getPrecedence = function() {
    return 48;
  };

  PCOrExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " || " + (this.childToString(1, 1));
  };

  return PCOrExpression;

})(PCExpression);

PCAndExpression = (function(_super) {
  __extends(PCAndExpression, _super);

  function PCAndExpression() {
    _ref7 = PCAndExpression.__super__.constructor.apply(this, arguments);
    return _ref7;
  }

  PCAndExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCAndExpression.prototype.getPrecedence = function() {
    return 51;
  };

  PCAndExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " && " + (this.childToString(1, 1));
  };

  return PCAndExpression;

})(PCExpression);

PCEqualityExpression = (function(_super) {
  __extends(PCEqualityExpression, _super);

  function PCEqualityExpression(left, operator, right) {
    this.operator = operator;
    PCEqualityExpression.__super__.constructor.call(this, left, right);
  }

  PCEqualityExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCEqualityExpression.prototype.getPrecedence = function() {
    return 54;
  };

  PCEqualityExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCEqualityExpression;

})(PCExpression);

PCRelationalExpression = (function(_super) {
  __extends(PCRelationalExpression, _super);

  function PCRelationalExpression(left, operator, right) {
    this.operator = operator;
    PCRelationalExpression.__super__.constructor.call(this, left, right);
  }

  PCRelationalExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCRelationalExpression.prototype.getPrecedence = function() {
    return 57;
  };

  PCRelationalExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCRelationalExpression;

})(PCExpression);

PCAdditiveExpression = (function(_super) {
  __extends(PCAdditiveExpression, _super);

  function PCAdditiveExpression(left, operator, right) {
    this.operator = operator;
    PCAdditiveExpression.__super__.constructor.call(this, left, right);
  }

  PCAdditiveExpression.prototype._getType = function() {
    return new PCTType(PCType.INT);
  };

  PCAdditiveExpression.prototype.getPrecedence = function() {
    return 60;
  };

  PCAdditiveExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCAdditiveExpression;

})(PCExpression);

PCMultiplicativeExpression = (function(_super) {
  __extends(PCMultiplicativeExpression, _super);

  function PCMultiplicativeExpression(left, operator, right) {
    this.operator = operator;
    PCMultiplicativeExpression.__super__.constructor.call(this, left, right);
  }

  PCMultiplicativeExpression.prototype._getType = function() {
    return new PCTType(PCType.INT);
  };

  PCMultiplicativeExpression.prototype.getPrecedence = function() {
    return 63;
  };

  PCMultiplicativeExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCMultiplicativeExpression;

})(PCExpression);

PCUnaryExpression = (function(_super) {
  __extends(PCUnaryExpression, _super);

  function PCUnaryExpression(operator, expression) {
    this.operator = operator;
    PCUnaryExpression.__super__.constructor.call(this, expression);
  }

  PCUnaryExpression.prototype._getType = function(env) {
    return this.children[0].getType(env);
  };

  PCUnaryExpression.prototype.getPrecedence = function() {
    return 66;
  };

  PCUnaryExpression.prototype.toString = function() {
    return "" + this.operator + (this.childToString(0));
  };

  return PCUnaryExpression;

})(PCExpression);

PCPostfixExpression = (function(_super) {
  __extends(PCPostfixExpression, _super);

  function PCPostfixExpression(assignDestination, operator) {
    this.operator = operator;
    PCPostfixExpression.__super__.constructor.call(this, assignDestination);
  }

  PCPostfixExpression.prototype._getType = function() {
    return new PCTType(PCType.INT);
  };

  PCPostfixExpression.prototype.getPrecedence = function() {
    return 69;
  };

  PCPostfixExpression.prototype.toString = function() {
    return "" + (this.children[0].toString()) + this.operator;
  };

  return PCPostfixExpression;

})(PCExpression);

PCReceiveExpression = (function(_super) {
  __extends(PCReceiveExpression, _super);

  function PCReceiveExpression() {
    _ref8 = PCReceiveExpression.__super__.constructor.apply(this, arguments);
    return _ref8;
  }

  PCReceiveExpression.prototype._getType = function(env) {
    return this.children[0].getType(env).chanelledType;
  };

  PCReceiveExpression.prototype.getPrecedence = function() {
    return 72;
  };

  PCReceiveExpression.prototype.toString = function() {
    return "<? " + (this.childToString(0));
  };

  return PCReceiveExpression;

})(PCExpression);

PCProcedureCall = (function(_super) {
  __extends(PCProcedureCall, _super);

  function PCProcedureCall() {
    var args, procedureName;
    procedureName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.procedureName = procedureName;
    PCProcedureCall.__super__.constructor.apply(this, args);
  }

  PCProcedureCall.prototype.getProcedure = function(env, className) {
    return (className ? env.getClassWithName(className) : env).getProcedureWithName(this.procedureName);
  };

  PCProcedureCall.prototype.getType = function(env, className) {
    if (!className) {
      return PCProcedureCall.__super__.getType.apply(this, arguments);
    } else {
      return this._getType(env, className);
    }
  };

  PCProcedureCall.prototype._getType = function(env, className) {
    return this.getProcedure(env, className).returnType;
  };

  PCProcedureCall.prototype.getPrecedence = function() {
    return 75;
  };

  PCProcedureCall.prototype.toString = function() {
    var o;
    return "" + this.procedureName + "(" + (((function() {
      var _i, _len, _ref9, _results;
      _ref9 = this.children;
      _results = [];
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        o = _ref9[_i];
        _results.push(o.toString());
      }
      return _results;
    }).call(this)).join(", ")) + ")";
  };

  return PCProcedureCall;

})(PCExpression);

PCClassCall = (function(_super) {
  __extends(PCClassCall, _super);

  function PCClassCall() {
    _ref9 = PCClassCall.__super__.constructor.apply(this, arguments);
    return _ref9;
  }

  PCClassCall.prototype.getProcedure = function(env) {
    return this.children[1].getProcedure(env, this.children[0].getType(env).identifier);
  };

  PCClassCall.prototype._getType = function(env) {
    return this.children[1].getType(env, this.children[0].getType(env).identifier);
  };

  PCClassCall.prototype.getPrecedence = function() {
    return 78;
  };

  PCClassCall.prototype.toString = function() {
    return "" + (this.children[0].toString()) + "." + (this.children[1].toString());
  };

  return PCClassCall;

})(PCExpression);

PCArrayExpression = (function(_super) {
  __extends(PCArrayExpression, _super);

  function PCArrayExpression() {
    _ref10 = PCArrayExpression.__super__.constructor.apply(this, arguments);
    return _ref10;
  }

  PCArrayExpression.prototype._getType = function(env) {
    return this.children[0].getType(env).elementsType;
  };

  PCArrayExpression.prototype.getPrecedence = function() {
    return 81;
  };

  PCArrayExpression.prototype.toString = function() {
    return "" + (this.children[0].toString()) + "[" + (this.children[1].toString()) + "]";
  };

  return PCArrayExpression;

})(PCExpression);

PCLiteralExpression = (function(_super) {
  __extends(PCLiteralExpression, _super);

  function PCLiteralExpression(value) {
    this.value = value;
    PCLiteralExpression.__super__.constructor.apply(this, []);
  }

  PCLiteralExpression.prototype._getType = function() {
    switch (typeof this.value) {
      case "boolean":
        return new PCTType(PCTType.BOOL);
      case "string":
        return PCTType(PCTType.STRING);
      default:
        return PCTType(PCTType.INT);
    }
  };

  PCLiteralExpression.prototype.getPrecedence = function() {
    return 84;
  };

  PCLiteralExpression.prototype.toString = function() {
    switch (typeof this.value) {
      case "boolean":
        if (this.value) {
          return "true";
        } else {
          return "false";
        }
      case "string":
        return "\"" + this.value + "\"";
      default:
        return "" + this.value;
    }
  };

  return PCLiteralExpression;

})(PCExpression);

PCIdentifierExpression = (function(_super) {
  __extends(PCIdentifierExpression, _super);

  function PCIdentifierExpression(identifier) {
    this.identifier = identifier;
    PCIdentifierExpression.__super__.constructor.apply(this, []);
  }

  PCIdentifierExpression.prototype._getType = function(env) {
    return env.getVariableWithName(this.identifier).type;
  };

  PCIdentifierExpression.prototype.getPrecedence = function() {
    return 84;
  };

  PCIdentifierExpression.prototype.toString = function() {
    return this.identifier;
  };

  return PCIdentifierExpression;

})(PCExpression);

PCStatement = (function(_super) {
  __extends(PCStatement, _super);

  function PCStatement() {
    _ref11 = PCStatement.__super__.constructor.apply(this, arguments);
    return _ref11;
  }

  PCStatement.prototype.collectEnvironment = function(env) {
    return this.children.length > 0 && this.children[0].collectEnvironment(env);
  };

  PCStatement.prototype.toString = function(indent, expectsNewBlock) {
    var addIndent, res;
    addIndent = expectsNewBlock === true && (this.children.length === 0 || !(this.children[0] instanceof PCStmtBlock));
    if (addIndent) {
      indent += PCIndent;
    }
    if (this.children.length === 0) {
      res = indent + ";";
    } else {
      res = this.children[0].toString(indent);
      if (this.children[0] instanceof PCStmtExpression) {
        res += ";";
      }
    }
    if (addIndent) {
      res = "\n" + res;
    }
    return res;
  };

  return PCStatement;

})(PCNode);

PCBreakStmt = (function(_super) {
  __extends(PCBreakStmt, _super);

  function PCBreakStmt() {
    PCBreakStmt.__super__.constructor.apply(this, []);
  }

  PCBreakStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCBreakStmt.prototype.toString = function(indent) {
    return indent + "break";
  };

  return PCBreakStmt;

})(PCNode);

PCContinueStmt = (function(_super) {
  __extends(PCContinueStmt, _super);

  function PCContinueStmt() {
    PCContinueStmt.__super__.constructor.apply(this, []);
  }

  PCContinueStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCContinueStmt.prototype.toString = function(indent) {
    return indent + "continue";
  };

  return PCContinueStmt;

})(PCNode);

PCStmtBlock = (function(_super) {
  __extends(PCStmtBlock, _super);

  function PCStmtBlock() {
    _ref12 = PCStmtBlock.__super__.constructor.apply(this, arguments);
    return _ref12;
  }

  PCStmtBlock.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref13, _results;
    _ref13 = this.children;
    _results = [];
    for (_i = 0, _len = _ref13.length; _i < _len; _i++) {
      c = _ref13[_i];
      _results.push(c.collectEnvironment(env));
    }
    return _results;
  };

  PCStmtBlock.prototype.toString = function(indent) {
    var o;
    return "{\n" + (((function() {
      var _i, _len, _ref13, _results;
      _ref13 = this.children;
      _results = [];
      for (_i = 0, _len = _ref13.length; _i < _len; _i++) {
        o = _ref13[_i];
        _results.push(o.toString(indent + PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n" + indent + "}";
  };

  return PCStmtBlock;

})(PCNode);

PCStmtExpression = (function(_super) {
  __extends(PCStmtExpression, _super);

  function PCStmtExpression() {
    _ref13 = PCStmtExpression.__super__.constructor.apply(this, arguments);
    return _ref13;
  }

  PCStmtExpression.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCStmtExpression.prototype.toString = function(indent) {
    return indent + this.children[0].toString();
  };

  return PCStmtExpression;

})(PCNode);

PCSelectStmt = (function(_super) {
  __extends(PCSelectStmt, _super);

  function PCSelectStmt() {
    _ref14 = PCSelectStmt.__super__.constructor.apply(this, arguments);
    return _ref14;
  }

  PCSelectStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCSelectStmt.prototype.toString = function(indent) {
    var o;
    return "" + indent + "select {\n" + (((function() {
      var _i, _len, _ref15, _results;
      _ref15 = this.children;
      _results = [];
      for (_i = 0, _len = _ref15.length; _i < _len; _i++) {
        o = _ref15[_i];
        _results.push(o.toString(indent + PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n" + indent + "}";
  };

  return PCSelectStmt;

})(PCNode);

PCCase = (function(_super) {
  __extends(PCCase, _super);

  function PCCase(execution, condition) {
    if (condition) {
      PCCase.__super__.constructor.call(this, execution, condition);
    } else {
      PCCase.__super__.constructor.call(this, execution);
    }
  }

  PCCase.prototype.getCondition = function() {
    if (this.children.length === 2) {
      return this.children[1];
    } else {
      return null;
    }
  };

  PCCase.prototype.getExecution = function() {
    return this.children[0];
  };

  PCCase.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCCase.prototype.toString = function(indent) {
    return "" + indent + (this.children.length === 2 ? "case " + (this.children[1].toString()) : "default") + ": " + (this.children[0].toString(indent, true));
  };

  return PCCase;

})(PCNode);

PCIfStmt = (function(_super) {
  __extends(PCIfStmt, _super);

  function PCIfStmt() {
    _ref15 = PCIfStmt.__super__.constructor.apply(this, arguments);
    return _ref15;
  }

  PCIfStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCIfStmt.prototype.toString = function(indent) {
    return "" + indent + "if (" + (this.children[0].toString()) + ") " + (this.children[1].toString(indent, true)) + (this.children[2] ? " " + (this.children[2].toString(indent, true)) : "");
  };

  return PCIfStmt;

})(PCNode);

PCWhileStmt = (function(_super) {
  __extends(PCWhileStmt, _super);

  function PCWhileStmt() {
    _ref16 = PCWhileStmt.__super__.constructor.apply(this, arguments);
    return _ref16;
  }

  PCWhileStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCWhileStmt.prototype.toString = function(indent) {
    return "" + indent + "while (" + (this.children[0].toString()) + ") " + (this.children[1].toString(indent, true));
  };

  return PCWhileStmt;

})(PCNode);

PCDoStmt = (function(_super) {
  __extends(PCDoStmt, _super);

  function PCDoStmt() {
    _ref17 = PCDoStmt.__super__.constructor.apply(this, arguments);
    return _ref17;
  }

  PCDoStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCDoStmt.prototype.toString = function(indent) {
    return "" + indent + "do " + (this.children[0].toString(indent, true)) + "\n" + indent + "while (" + (this.children[1].toString()) + ")";
  };

  return PCDoStmt;

})(PCNode);

PCForStmt = (function(_super) {
  __extends(PCForStmt, _super);

  function PCForStmt() {
    var body, children, expression, init, update;
    body = arguments[0], init = arguments[1], expression = arguments[2], update = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.body = body;
    this.init = init;
    this.expression = expression;
    this.update = update;
    children = this.update.concat([this.body]);
    if (this.expression) {
      children.unshift(this.expression);
    }
    if (this.init) {
      children.unshift(this.init);
    }
    PCForStmt.__super__.constructor.apply(this, children);
  }

  PCForStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCForStmt.prototype.toString = function(indent) {
    var o;
    return "" + indent + "for (" + (this.init ? this.init.toString() : "") + "; " + (this.expression ? this.expression.toString() : "") + "; " + (((function() {
      var _i, _len, _ref18, _results;
      _ref18 = this.update;
      _results = [];
      for (_i = 0, _len = _ref18.length; _i < _len; _i++) {
        o = _ref18[_i];
        _results.push(o.toString(""));
      }
      return _results;
    }).call(this)).join(", ")) + ") " + (this.body.toString(indent, true));
  };

  return PCForStmt;

})(PCNode);

PCForInit = (function(_super) {
  __extends(PCForInit, _super);

  function PCForInit() {
    _ref18 = PCForInit.__super__.constructor.apply(this, arguments);
    return _ref18;
  }

  PCForInit.prototype.toString = function() {
    var o;
    return "" + (((function() {
      var _i, _len, _ref19, _results;
      _ref19 = this.children;
      _results = [];
      for (_i = 0, _len = _ref19.length; _i < _len; _i++) {
        o = _ref19[_i];
        _results.push(o.toString(""));
      }
      return _results;
    }).call(this)).join(", "));
  };

  return PCForInit;

})(PCNode);

PCReturnStmt = (function(_super) {
  __extends(PCReturnStmt, _super);

  function PCReturnStmt() {
    _ref19 = PCReturnStmt.__super__.constructor.apply(this, arguments);
    return _ref19;
  }

  PCReturnStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCReturnStmt.prototype.toString = function(indent) {
    return "" + indent + "return" + (this.children.length === 1 ? " " + (this.children[0].toString()) : "") + ";";
  };

  return PCReturnStmt;

})(PCNode);

PCPrimitiveStmt = (function(_super) {
  __extends(PCPrimitiveStmt, _super);

  function PCPrimitiveStmt(kind, expression) {
    this.kind = kind;
    if (expression) {
      PCPrimitiveStmt.__super__.constructor.call(this, expression);
    } else {
      PCPrimitiveStmt.__super__.constructor.call(this);
    }
  }

  PCPrimitiveStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCPrimitiveStmt.prototype.toString = function(indent) {
    return "" + indent + (PCPrimitiveStmt.kindToString(this.kind)) + (this.children.length === 1 ? " " + (this.children[0].toString()) : "") + ";";
  };

  return PCPrimitiveStmt;

})(PCNode);

PCPrimitiveStmt.JOIN = 0;

PCPrimitiveStmt.LOCK = 1;

PCPrimitiveStmt.UNLOCK = 2;

PCPrimitiveStmt.WAIT = 3;

PCPrimitiveStmt.SIGNAL = 4;

PCPrimitiveStmt.SIGNAL_ALL = 5;

PCPrimitiveStmt.kindToString = function(kind) {
  switch (kind) {
    case PCPrimitiveStmt.JOIN:
      return "join";
    case PCPrimitiveStmt.LOCK:
      return "lock";
    case PCPrimitiveStmt.UNLOCK:
      return "unlock";
    case PCPrimitiveStmt.WAIT:
      return "waitForCondition";
    case PCPrimitiveStmt.SIGNAL:
      return "signal";
    case PCPrimitiveStmt.SIGNAL_ALL:
      return "signal all";
  }
};

PCPrintStmt = (function(_super) {
  __extends(PCPrintStmt, _super);

  function PCPrintStmt() {
    _ref20 = PCPrintStmt.__super__.constructor.apply(this, arguments);
    return _ref20;
  }

  PCPrintStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCPrintStmt.prototype.toString = function(indent) {
    var o;
    return "" + indent + "println(" + (((function() {
      var _i, _len, _ref21, _results;
      _ref21 = this.children;
      _results = [];
      for (_i = 0, _len = _ref21.length; _i < _len; _i++) {
        o = _ref21[_i];
        _results.push(o.toString());
      }
      return _results;
    }).call(this)).join(", ")) + ");";
  };

  return PCPrintStmt;

})(PCNode);

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/*
	This class represents PseuCo's types.
	May be partly incomplete as type checking is not yet completely supported by the PseuCo tree.
*/


PCTType = (function() {
  function PCTType(kind) {
    this.kind = kind;
    if (this.kind < 0 || this.kind > 14) {
      throw new Error("Unknown kind of type!");
    }
  }

  PCTType.prototype.isEqual = function(type) {
    return type.kind === this.kind;
  };

  PCTType.prototype.toString = function() {
    switch (this.kind) {
      case PCTType.INT:
        return "int";
      case PCTType.BOOL:
        return "bool";
      case PCTType.STRING:
        return "string";
      case PCTType.CHANNEL:
        return "channel";
      case PCTType.ARRAY:
        return "array";
      case PCTType.MONITOR:
        return "monitor";
      case PCTType.STRUCTURE:
        return "struct";
      case PCTType.MUTEX:
        return "mutex";
      case PCTType.CONDITION:
        return "condition";
      case PCTType.PROCEDURE:
        return "procedure";
      case PCTType.TYPE:
        return "type";
      case PCTType.MAINAGENT:
        return "mainAgent";
      case PCTType.AGENT:
        return "agent";
      case PCTType.WILDCARD:
        return "wildcard";
      default:
        return "void";
    }
  };

  return PCTType;

})();

PCTType.VOID = 0;

PCTType.BOOL = 1;

PCTType.INT = 2;

PCTType.STRING = 3;

PCTType.CHANNEL = 4;

PCTType.ARRAY = 5;

PCTType.MONITOR = 6;

PCTType.STRUCT = 7;

PCTType.MUTEX = 8;

PCTType.CONDITION = 9;

PCTType.PROCEDURE = 10;

PCTType.TYPE = 11;

PCTType.MAINAGENT = 12;

PCTType.AGENT = 13;

PCTType.WILDCARD = 14;

PCTArrayType = (function(_super) {
  __extends(PCTArrayType, _super);

  function PCTArrayType(elementsType, capacity) {
    this.elementsType = elementsType;
    this.capacity = capacity;
    PCTArrayType.__super__.constructor.call(this, PCTType.ARRAY);
  }

  PCTArrayType.prototype.isEqual = function(type) {
    var capacityFulfilled;
    capacityFulfilled = type.capacity === this.capacity || this.capacity === 0 || type.capacity === 0;
    return type.kind === this.kind && capacityFulfilled && this.elementsType.isEqual(type.elementsType);
  };

  PCTArrayType.prototype.toString = function() {
    return "" + (this.elementsType.toString()) + "[" + this.capacity + "]";
  };

  return PCTArrayType;

})(PCTType);

PCTChannelType = (function(_super) {
  __extends(PCTChannelType, _super);

  function PCTChannelType(channelledType, capacity) {
    this.channelledType = channelledType;
    this.capacity = capacity;
    PCTChannelType.__super__.constructor.call(this, PCTType.CHANNEL);
  }

  PCTChannelType.prototype.isEqual = function(type) {
    return this.kind === type.kind && this.capacity === type.capacity && this.channelledType.isEqual(type.channelledType);
  };

  PCTChannelType.prototype.isAssignableTo = function(type) {
    return this.kind === type.kind && (this.capacity === type.capacity || type.capacity === 0) && this.channelledType.isEqual(type.channelledType);
  };

  PCTChannelType.prototype.getApplicableCapacity = function() {
    if (this.capacity === PCChannelType.CAPACITY_UNKNOWN) {
      return 0;
    } else {
      return this.capacity;
    }
  };

  PCTChannelType.prototype.toString = function() {
    if (this.capacity === PCChannelType.CAPACITY_UNKNOWN) {
      return "handshake " + (this.channelledType.toString()) + " " + PCTChannelType.__super__.toString.apply(this, arguments);
    } else {
      return "" + (this.channelledType.toString()) + " " + PCTChannelType.__super__.toString.apply(this, arguments) + " of capacity " + this.capacity;
    }
  };

  return PCTChannelType;

})(PCTType);

PCTClassType = (function(_super) {
  __extends(PCTClassType, _super);

  function PCTClassType(isMonitor, identifier) {
    this.identifier = identifier;
    PCTClassType.__super__.constructor.call(this, (isMonitor ? PCTType.MONITOR : PCTType.STRUCT));
  }

  PCTClassType.prototype.isMonitor = function() {
    return this.kind === PCTType.MONITOR;
  };

  PCTClassType.prototype.isEqual = function(type) {
    return this.kind === type.kind && this.identifier === type.identifier;
  };

  PCTClassType.prototype.toString = function() {
    return "" + PCTClassType.__super__.toString.apply(this, arguments) + " " + this.identifier;
  };

  return PCTClassType;

})(PCTType);

PCTProcedureType = (function(_super) {
  __extends(PCTProcedureType, _super);

  function PCTProcedureType(returnType, argumentTypes) {
    this.returnType = returnType;
    this.argumentTypes = argumentTypes;
    PCTProcedureType.__super__.constructor.call(this, PCTType.PROCEDURE);
  }

  PCTProcedureType.prototype.isEqual = function(type) {
    var i, _i, _ref21;
    if (type.argumentTypes.length !== this.argumentTypes) {
      return false;
    }
    for (i = _i = 0, _ref21 = this.argumentTypes.length; _i < _ref21; i = _i += 1) {
      if (!type.argumentTypes[i].isEqual(this.argumentTypes[i])) {
        return false;
      }
    }
    return type.returnType.isEqual(this.returnType);
  };

  PCTProcedureType.prototype.toString = function() {
    var args, t;
    args = ((function() {
      var _i, _len, _ref21, _results;
      _ref21 = this.argumentTypes;
      _results = [];
      for (_i = 0, _len = _ref21.length; _i < _len; _i++) {
        t = _ref21[_i];
        _results.push(t.toString());
      }
      return _results;
    }).call(this)).join(" x ");
    return "" + (this.returnType.toString()) + " -> (" + args + ")";
  };

  return PCTProcedureType;

})(PCTType);

PCTTypeType = (function(_super) {
  __extends(PCTTypeType, _super);

  function PCTTypeType(type) {
    this.type = type;
    PCTTypeType.__super__.constructor.call(this, PCTType.TYPE);
  }

  PCTTypeType.prototype.isEqual = function(type) {
    return this.kind === type.kind && this.type.isEqual(type.type);
  };

  return PCTTypeType;

})(PCTType);

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/*
	ToDo
*/


PCTEnvironmentController = (function() {
  function PCTEnvironmentController() {
    this.root = new PCTEnvironmentNode(null, "");
    this.classes = {};
    this._envStack = this.root;
  }

  PCTEnvironmentController.prototype.getGlobal = function() {
    return this.root;
  };

  PCTEnvironmentController.prototype.getClassWithName = function(name) {
    var result;
    result = this.classes[name];
    if (result === void 0) {
      throw new Error("Unknown class");
    }
    return result;
  };

  PCTEnvironmentController.prototype.getAllClasses = function() {
    return this.root.getAllClasses();
  };

  PCTEnvironmentController.prototype.getVariableWithName = function(name) {
    return this._envStack.getVariableWithName(name);
  };

  PCTEnvironmentController.prototype.getProcedureWithName = function(name) {
    return this._envStack.getProcedureWithName(name);
  };

  PCTEnvironmentController.prototype.processNewClass = function(node, classType) {
    var tnode;
    tnode = new PCTClass(node, classType);
    return this._processNewClass(tnode);
  };

  PCTEnvironmentController.prototype._processNewClass = function(node) {
    if (this.classes[node.getName()]) {
      throw new Error("Class already registered!");
    }
    this._envStack.addChild(node);
    return this.classes[node.getName()] = node;
  };

  PCTEnvironmentController.prototype.beginClass = function(className) {
    var node;
    node = this.getClassWithName(className);
    if (!node) {
      throw new Error("Node must not be null!");
    }
    this._envStack = node;
    return node;
  };

  PCTEnvironmentController.prototype.endClass = function() {
    if (!this._envStack instanceof PCTClass) {
      throw new Error("No class did begin!");
    }
    return this._envStack = this._envStack.parent;
  };

  PCTEnvironmentController.prototype.beginNewProcedure = function(node, procedureName, returnType, args) {
    var tnode;
    tnode = new PCTProcedure(node, procedureName, returnType, args);
    return this._beginNewProcedure(tnode);
  };

  PCTEnvironmentController.prototype._beginNewProcedure = function(node) {
    this._envStack.addChild(node);
    return this.beginProcedure(node.getName());
  };

  PCTEnvironmentController.prototype.beginProcedure = function(procedureName) {
    var node;
    node = this._envStack.getProcedureWithName(procedureName);
    if (!node) {
      throw new Error("Node must not be null!");
    }
    this._envStack = node;
    return node;
  };

  PCTEnvironmentController.prototype.endProcedure = function() {
    if (!this._envStack instanceof PCTProcedure) {
      throw new Error("No procedure did begin!");
    }
    return this._envStack = this._envStack.parent;
  };

  PCTEnvironmentController.prototype.beginMainAgent = function(node) {
    if (this._envStack.getProcedureWithName("#mainAgent")) {
      return this.beginProcedure("#mainAgent");
    } else {
      return this.beginNewProcedure(node, "#mainAgent", new PCTType(PCTType.VOID), []);
    }
  };

  PCTEnvironmentController.prototype.endMainAgent = function() {
    return this.endProcedure();
  };

  PCTEnvironmentController.prototype.processNewVariable = function(variable) {
    return this._processNewVariable(variable);
  };

  PCTEnvironmentController.prototype._processNewVariable = function(node) {
    this._envStack.addChild(node);
    return node;
  };

  return PCTEnvironmentController;

})();

PCTEnvironmentNode = (function() {
  function PCTEnvironmentNode(node, label) {
    this.node = node;
    this.label = label;
    this.parent = null;
    this.children = [];
    this.variables = {};
    this.procedures = {};
  }

  PCTEnvironmentNode.prototype.addChild = function(child) {
    this.children.push(child);
    child.parent = this;
    if (child instanceof PCTProcedure) {
      this.procedures[child.getName()] = child;
    } else if (child instanceof PCTVariable) {
      this.variables[child.getIdentifier()] = child;
    }
    return child;
  };

  PCTEnvironmentNode.prototype.getVariableWithName = function(name) {
    return this.variables[name];
  };

  PCTEnvironmentNode.prototype.getProcedureWithName = function(name) {
    return this.procedures[name];
  };

  PCTEnvironmentNode.prototype.getComposedLabel = function() {
    return "" + (this.parent ? "" + (this.parent.getComposedLabel()) + "_" : "") + this.label;
  };

  PCTEnvironmentNode.prototype.getAllClasses = function() {
    var c, result, _i, _len, _ref21;
    result = [];
    _ref21 = this.children;
    for (_i = 0, _len = _ref21.length; _i < _len; _i++) {
      c = _ref21[_i];
      if (c instanceof PCTClass) {
        result.push(c);
      }
    }
    return result;
  };

  return PCTEnvironmentNode;

})();

PCTClass = (function(_super) {
  __extends(PCTClass, _super);

  function PCTClass(node, type) {
    this.type = type;
    PCTClass.__super__.constructor.call(this, node, this.type.identifier);
  }

  PCTClass.prototype.getName = function() {
    return this.label;
  };

  PCTClass.prototype.isMonitor = function() {
    return this.type.isMonitor();
  };

  return PCTClass;

})(PCTEnvironmentNode);

PCTProcedure = (function(_super) {
  __extends(PCTProcedure, _super);

  function PCTProcedure(node, name, returnType, _arguments) {
    this.returnType = returnType;
    this["arguments"] = _arguments;
    PCTProcedure.__super__.constructor.call(this, node, name);
  }

  PCTProcedure.prototype.getName = function() {
    return this.label;
  };

  PCTProcedure.prototype.isClassProcedure = function() {
    return this.parent instanceof PCClass;
  };

  PCTProcedure.prototype.isMonitorProcedure = function() {
    return this.parent instanceof PCClass && this.parent.isMonitor();
  };

  return PCTProcedure;

})(PCTEnvironmentNode);

PCTVariable = (function() {
  function PCTVariable(node, name, type) {
    this.node = node;
    this.type = type;
    if (typeof this.node === "string") {
      debugger;
    }
    this.label = name;
    this.parent = null;
  }

  PCTVariable.prototype.getName = function() {
    return this.label;
  };

  PCTVariable.prototype.getIdentifier = function() {
    return this.label;
  };

  PCTVariable.prototype.getComposedLabel = function() {
    return "" + (this.parent ? "" + (this.parent.getComposedLabel()) + "_" : "") + this.label;
  };

  return PCTVariable;

})();

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


exports = module && module.exports ? module.exports : {};

exports["parser"] = PseuCoParser;

exports["EnvironmentController"] = PCTEnvironmentController;

exports["EnvironmentNode"] = PCTEnvironmentNode;

exports["Class"] = PCTClass;

exports["Procedure"] = PCTProcedure;

exports["Variable"] = PCTVariable;

exports["Type"] = PCTType;

exports["ArrayType"] = PCTArrayType;

exports["ChannelType"] = PCTChannelType;

exports["ClassType"] = PCTClassType;

exports["ProcedureType"] = PCTProcedureType;

exports["TypeType"] = PCTTypeType;

exports["Node"] = PCNode;

exports["Program"] = PCProgram;

exports["MainAgent"] = PCMainAgent;

exports["ProcedureDecl"] = PCProcedureDecl;

exports["FormalParameter"] = PCFormalParameter;

exports["Monitor"] = PCMonitor;

exports["Struct"] = PCStruct;

exports["ConditionDecl"] = PCConditionDecl;

exports["Decl"] = PCDecl;

exports["DeclStmt"] = PCDeclStmt;

exports["VariableDeclarator"] = PCVariableDeclarator;

exports["VariableInitializer"] = PCVariableInitializer;

exports["ArrayTypeNode"] = PCArrayType;

exports["BaseTypeNode"] = PCBaseType;

exports["SimpleTypeNode"] = PCSimpleType;

exports["ChannelTypeNode"] = PCChannelType;

exports["ClassTypeNode"] = PCClassType;

exports["Expression"] = PCExpression;

exports["StartExpression"] = PCStartExpression;

exports["AssignExpression"] = PCAssignExpression;

exports["AssignDestination"] = PCAssignDestination;

exports["SendExpression"] = PCSendExpression;

exports["ConditionalExpression"] = PCConditionalExpression;

exports["OrExpression"] = PCOrExpression;

exports["AndExpression"] = PCAndExpression;

exports["EqualityExpression"] = PCEqualityExpression;

exports["RelationalExpression"] = PCRelationalExpression;

exports["AdditiveExpression"] = PCAdditiveExpression;

exports["MultiplicativeExpression"] = PCMultiplicativeExpression;

exports["UnaryExpression"] = PCUnaryExpression;

exports["PostfixExpression"] = PCPostfixExpression;

exports["ReceiveExpression"] = PCReceiveExpression;

exports["ProcedureCall"] = PCProcedureCall;

exports["ClassCall"] = PCClassCall;

exports["ArrayExpression"] = PCArrayExpression;

exports["LiteralExpression"] = PCLiteralExpression;

exports["IdentifierExpression"] = PCIdentifierExpression;

exports["Statement"] = PCStatement;

exports["BreakStmt"] = PCBreakStmt;

exports["ContinueStmt"] = PCContinueStmt;

exports["StmtBlock"] = PCStmtBlock;

exports["StmtExpression"] = PCStmtExpression;

exports["SelectStmt"] = PCSelectStmt;

exports["Case"] = PCCase;

exports["IfStmt"] = PCIfStmt;

exports["WhileStmt"] = PCWhileStmt;

exports["DoStmt"] = PCDoStmt;

exports["ForStmt"] = PCForStmt;

exports["ForInit"] = PCForInit;

exports["ReturnStmt"] = PCReturnStmt;

exports["PrimitiveStmt"] = PCPrimitiveStmt;

exports["PrintStmt"] = PCPrintStmt;
