// Generated by CoffeeScript 1.6.2
var CCSBaseStep, CCSStep, ChoiceLRule, ChoiceRRule, InputRule, MatchRule, OutputRule, ParLRule, ParRRule, PrefixRule, SyncRule,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CCSStep = (function() {
  function CCSStep(index, action, substeps…) {
    this.index = index;
    this.action = action;
    this.substeps… = substeps…;
  }

  CCSStep.prototype.getBaseActions = function() {
    var step;

    return concatChildren((function() {
      var _i, _len, _ref, _results;

      _ref = this.substeps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        _results.push(step.getBaseActions());
      }
      return _results;
    }).call(this));
  };

  return CCSStep;

})();

CCSBaseStep = (function(_super) {
  __extends(CCSBaseStep, _super);

  function CCSBaseStep(baseAction) {
    this.baseAction = baseAction;
    CCSBaseStep.__super__.constructor.call(this, 0, this.baseAction);
  }

  CCSBaseStep.prototype.getBaseActions = function() {
    return [this.baseAction];
  };

  return CCSBaseStep;

})(CCSStep);

PrefixRule = {
  getPossibleSteps: function(prefix, syncableWith) {
    if (syncableWith == null) {
      syncableWith = null;
    }
    if (syncableWith === null && prefix.action.isSimpleAction()) {
      return [new CCSBaseStep(prefix.action)];
    } else {
      return [];
    }
  }
};

OutputRule = {
  getPossibleSteps: function(prefix, syncableWith) {
    if (syncableWith == null) {
      syncableWith = null;
    }
    if (!prefix.action.isOutputAction()) {
      return [];
    }
    if (syncableWith) {
      if (!syncableWith.action.isInputAction() || syncableWith.action.channel !== prefix.action.channel || syncableWith.supportsValuePassing() !== prefix.supportsValuePassing()) {
        return [];
      }
    }
    return [new CCSBaseStep(prefix.action)];
  }
};

InputRule = {
  getPossibleSteps: function(prefix, syncableWith) {
    if (syncableWith == null) {
      syncableWith = null;
    }
    if (!prefix.action.isInputAction()) {
      return [];
    }
    if (syncableWith) {
      if (!syncableWith.action.isOutputAction() || syncableWith.action.channel !== prefix.action.channel || syncableWith.supportsValuePassing() !== prefix.supportsValuePassing()) {
        return [];
      }
    }
    return [new CCSBaseStep(prefix.action)];
  }
};

MatchRule = {
  getPossibleSteps: function(prefix, syncableWith) {
    if (syncableWith == null) {
      syncableWith = null;
    }
    if (!prefix.action.isMatchAction()) {
      return [];
    }
    if (syncableWith) {
      if (!syncableWith.action.isOutputAction() || syncableWith.action.channel !== prefix.action.channel || !syncableWith.supportsValuePassing() || syncableWith.expression.evaluate() !== prefix.expression.evaluate()) {
        return [];
      }
    }
    return [new CCSBaseStep(prefix.action)];
  }
};

ChoiceLRule = {
  getPossibleSteps: function(choice) {
    return choice.left.getPossibleSteps();
  }
};

ChoiceRRule = {
  getPossibleSteps: function(choice) {
    return choice.right.getPossibleSteps();
  }
};

ParLRule = {
  getPossibleSteps: function(parallel) {
    return choice.left.getPossibleSteps();
  }
};

ParRRule = {
  getPossibleSteps: function(parallel) {
    return choice.right.getPossibleSteps();
  }
};

SyncRule = {
  getPossibleSteps: function(parallel) {
    var c, compatibleRight, i, j, l, left, r, result, right, _i, _j, _ref, _ref1, _results;

    left = choice.left.getPossibleSteps();
    right = choice.right.getPossibleSteps();
    result = [];
    c = 0;
    _results = [];
    for (i = _i = 0, _ref = left.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      l = left[i];
      compatibleRight = [];
      for (j = _j = 0, _ref1 = right.length; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        r = right[j];
        compatibleRight.concat(r.getPossibleSteps(l));
      }
      _results.push((function() {
        var _k, _ref2, _results1;

        _results1 = [];
        for (j = _k = 0, _ref2 = compatibleRight.length; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
          _results1.push(result.push(new CCSStep(c++, new SimpleAction("i"), l, compatibleRight[j])));
        }
        return _results1;
      })());
    }
    return _results;
  }
};
