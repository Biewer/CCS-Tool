CCSParser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "CCS": parse_CCS,
        "Process": parse_Process,
        "Restriction": parse_Restriction,
        "Sequence": parse_Sequence,
        "Parallel": parse_Parallel,
        "Choice": parse_Choice,
        "Prefix": parse_Prefix,
        "Condition": parse_Condition,
        "Input": parse_Input,
        "Output": parse_Output,
        "SimpleAction": parse_SimpleAction,
        "Action": parse_Action,
        "Trivial": parse_Trivial,
        "name": parse_name,
        "identifier": parse_identifier,
        "channel": parse_channel,
        "int": parse_int,
        "_": parse__,
        "__": parse___,
        "expression": parse_expression,
        "equalityExpression": parse_equalityExpression,
        "relationalExpression": parse_relationalExpression,
        "concatenatingExpression": parse_concatenatingExpression,
        "additiveExpression": parse_additiveExpression,
        "multiplicativeExpression": parse_multiplicativeExpression,
        "primaryExpression": parse_primaryExpression,
        "exp_identifier": parse_exp_identifier,
        "exp_boolean": parse_exp_boolean,
        "exp_integer": parse_exp_integer,
        "exp_string": parse_exp_string,
        "exp_escapeSequence": parse_exp_escapeSequence,
        "___": parse____
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_CCS();
        if (result0 !== null) {
          result0 = (function(offset, line, column, C) { return C; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CCS() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_Process();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Process();
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_Restriction();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, PDefs, System) { 
        		                                	var defs = [];
        		                                  	for (var i = 0; i < PDefs.length; i++) {
        		                                  		defs.push(PDefs[i]);
        		                                  	}
        		                                  	return new CCS(defs, System);
        		                                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Process() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1, pos2, pos3, pos4, pos5;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_name();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              if (input.charCodeAt(pos.offset) === 91) {
                result3 = "[";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_identifier();
                  if (result5 !== null) {
                    result6 = [];
                    pos4 = clone(pos);
                    pos5 = clone(pos);
                    result7 = parse__();
                    if (result7 !== null) {
                      if (input.charCodeAt(pos.offset) === 44) {
                        result8 = ",";
                        advance(pos, 1);
                      } else {
                        result8 = null;
                        if (reportFailures === 0) {
                          matchFailed("\",\"");
                        }
                      }
                      if (result8 !== null) {
                        result9 = parse__();
                        if (result9 !== null) {
                          result10 = parse_identifier();
                          if (result10 !== null) {
                            result7 = [result7, result8, result9, result10];
                          } else {
                            result7 = null;
                            pos = clone(pos5);
                          }
                        } else {
                          result7 = null;
                          pos = clone(pos5);
                        }
                      } else {
                        result7 = null;
                        pos = clone(pos5);
                      }
                    } else {
                      result7 = null;
                      pos = clone(pos5);
                    }
                    if (result7 !== null) {
                      result7 = (function(offset, line, column, v2) { return v2; })(pos4.offset, pos4.line, pos4.column, result7[3]);
                    }
                    if (result7 === null) {
                      pos = clone(pos4);
                    }
                    while (result7 !== null) {
                      result6.push(result7);
                      pos4 = clone(pos);
                      pos5 = clone(pos);
                      result7 = parse__();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 44) {
                          result8 = ",";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = parse__();
                          if (result9 !== null) {
                            result10 = parse_identifier();
                            if (result10 !== null) {
                              result7 = [result7, result8, result9, result10];
                            } else {
                              result7 = null;
                              pos = clone(pos5);
                            }
                          } else {
                            result7 = null;
                            pos = clone(pos5);
                          }
                        } else {
                          result7 = null;
                          pos = clone(pos5);
                        }
                      } else {
                        result7 = null;
                        pos = clone(pos5);
                      }
                      if (result7 !== null) {
                        result7 = (function(offset, line, column, v2) { return v2; })(pos4.offset, pos4.line, pos4.column, result7[3]);
                      }
                      if (result7 === null) {
                        pos = clone(pos4);
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse__();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 93) {
                          result8 = "]";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = parse__();
                          if (result9 !== null) {
                            result3 = [result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result3 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result3 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result3 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result3 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, v, vs) { vs.unshift(v); return vs; })(pos2.offset, pos2.line, pos2.column, result3[2], result3[3]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.substr(pos.offset, 2) === ":=") {
                  result4 = ":=";
                  advance(pos, 2);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":=\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_Restriction();
                  if (result5 !== null) {
                    result6 = parse___();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos.offset) === 10) {
                        result7 = "\n";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\n\"");
                        }
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n, params, P) { 
        		                                  return new CCSProcessDefinition(n.name, P, params == "" ? null : params);
        		                                })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Restriction() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1, pos2, pos3, pos4, pos5, pos6, pos7;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_Sequence();
          if (result1 !== null) {
            pos2 = clone(pos);
            pos3 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 92) {
                result3 = "\\";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  if (input.charCodeAt(pos.offset) === 123) {
                    result5 = "{";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"{\"");
                    }
                  }
                  if (result5 !== null) {
                    pos4 = clone(pos);
                    pos5 = clone(pos);
                    result6 = parse__();
                    if (result6 !== null) {
                      result7 = parse_channel();
                      if (result7 === null) {
                        if (input.charCodeAt(pos.offset) === 42) {
                          result7 = "*";
                          advance(pos, 1);
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"*\"");
                          }
                        }
                      }
                      if (result7 !== null) {
                        result8 = [];
                        pos6 = clone(pos);
                        pos7 = clone(pos);
                        result9 = parse__();
                        if (result9 !== null) {
                          if (input.charCodeAt(pos.offset) === 44) {
                            result10 = ",";
                            advance(pos, 1);
                          } else {
                            result10 = null;
                            if (reportFailures === 0) {
                              matchFailed("\",\"");
                            }
                          }
                          if (result10 !== null) {
                            result11 = parse__();
                            if (result11 !== null) {
                              result12 = parse_channel();
                              if (result12 !== null) {
                                result9 = [result9, result10, result11, result12];
                              } else {
                                result9 = null;
                                pos = clone(pos7);
                              }
                            } else {
                              result9 = null;
                              pos = clone(pos7);
                            }
                          } else {
                            result9 = null;
                            pos = clone(pos7);
                          }
                        } else {
                          result9 = null;
                          pos = clone(pos7);
                        }
                        if (result9 !== null) {
                          result9 = (function(offset, line, column, a2) { return a2; })(pos6.offset, pos6.line, pos6.column, result9[3]);
                        }
                        if (result9 === null) {
                          pos = clone(pos6);
                        }
                        while (result9 !== null) {
                          result8.push(result9);
                          pos6 = clone(pos);
                          pos7 = clone(pos);
                          result9 = parse__();
                          if (result9 !== null) {
                            if (input.charCodeAt(pos.offset) === 44) {
                              result10 = ",";
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\",\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = parse__();
                              if (result11 !== null) {
                                result12 = parse_channel();
                                if (result12 !== null) {
                                  result9 = [result9, result10, result11, result12];
                                } else {
                                  result9 = null;
                                  pos = clone(pos7);
                                }
                              } else {
                                result9 = null;
                                pos = clone(pos7);
                              }
                            } else {
                              result9 = null;
                              pos = clone(pos7);
                            }
                          } else {
                            result9 = null;
                            pos = clone(pos7);
                          }
                          if (result9 !== null) {
                            result9 = (function(offset, line, column, a2) { return a2; })(pos6.offset, pos6.line, pos6.column, result9[3]);
                          }
                          if (result9 === null) {
                            pos = clone(pos6);
                          }
                        }
                        if (result8 !== null) {
                          result6 = [result6, result7, result8];
                        } else {
                          result6 = null;
                          pos = clone(pos5);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos5);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos5);
                    }
                    if (result6 !== null) {
                      result6 = (function(offset, line, column, a1, as2) { as2.unshift(a1); return as2; })(pos4.offset, pos4.line, pos4.column, result6[1], result6[2]);
                    }
                    if (result6 === null) {
                      pos = clone(pos4);
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse__();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 125) {
                          result8 = "}";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"}\"");
                          }
                        }
                        if (result8 !== null) {
                          result2 = [result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, as) { return  as; })(pos2.offset, pos2.line, pos2.column, result2[4]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, P, res) {
          											return res == "" ? P : new CCSRestriction(P, res);
          										})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Sequence() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_Parallel();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            pos3 = clone(pos);
            result3 = parse__();
            if (result3 !== null) {
              if (input.charCodeAt(pos.offset) === 59) {
                result4 = ";";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\";\"");
                }
              }
              if (result4 !== null) {
                result5 = parse_Parallel();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
            } else {
              result3 = null;
              pos = clone(pos3);
            }
            if (result3 !== null) {
              result3 = (function(offset, line, column, Q) { return Q; })(pos2.offset, pos2.line, pos2.column, result3[2]);
            }
            if (result3 === null) {
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse__();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 59) {
                  result4 = ";";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\";\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_Parallel();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, Q) { return Q; })(pos2.offset, pos2.line, pos2.column, result3[2]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, P, Ps) {
        		                                  Ps.unshift(P);
        		                                  while(Ps.length > 1){
        		                                    var p = Ps.shift();
        		                                    var q = Ps.shift();
        		                                    Ps.unshift(new CCSSequence(p,q));
        		                                  }
        		                                  return Ps[0];
        		                                })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Parallel() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_Choice();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            pos3 = clone(pos);
            result3 = parse__();
            if (result3 !== null) {
              if (input.charCodeAt(pos.offset) === 124) {
                result4 = "|";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"|\"");
                }
              }
              if (result4 !== null) {
                result5 = parse_Choice();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
            } else {
              result3 = null;
              pos = clone(pos3);
            }
            if (result3 !== null) {
              result3 = (function(offset, line, column, Q) { return Q; })(pos2.offset, pos2.line, pos2.column, result3[2]);
            }
            if (result3 === null) {
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse__();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 124) {
                  result4 = "|";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"|\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_Choice();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, Q) { return Q; })(pos2.offset, pos2.line, pos2.column, result3[2]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, P, Ps) {
        		                                  Ps.unshift(P);
        		                                  while(Ps.length > 1){
        		                                    var p = Ps.shift();
        		                                    var q = Ps.shift();
        		                                    Ps.unshift(new CCSParallel(p,q));
        		                                  }
        		                                  return Ps[0];
        		                                })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Choice() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_Prefix();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            pos3 = clone(pos);
            result3 = parse__();
            if (result3 !== null) {
              if (input.charCodeAt(pos.offset) === 43) {
                result4 = "+";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (result4 !== null) {
                result5 = parse_Prefix();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
            } else {
              result3 = null;
              pos = clone(pos3);
            }
            if (result3 !== null) {
              result3 = (function(offset, line, column, Q) { return Q; })(pos2.offset, pos2.line, pos2.column, result3[2]);
            }
            if (result3 === null) {
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse__();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 43) {
                  result4 = "+";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"+\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_Prefix();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, Q) { return Q; })(pos2.offset, pos2.line, pos2.column, result3[2]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, P, Ps) {
        									    Ps.unshift(P);
        									    while(Ps.length > 1){
        									      var p = Ps.shift();
        									      var q = Ps.shift();
        									      Ps.unshift(new CCSChoice(p,q));
        									    }
        									    return Ps[0];
        									  })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Prefix() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        result0 = parse_Condition();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse__();
          if (result0 !== null) {
            result1 = parse_Input();
            if (result1 === null) {
              result1 = parse_Output();
              if (result1 === null) {
                result1 = parse_SimpleAction();
              }
            }
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 46) {
                  result3 = ".";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse_Prefix();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, A, P) { 
          										return new CCSPrefix(A, P); 
          									})(pos0.offset, pos0.line, pos0.column, result0[1], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_Trivial();
          }
        }
        return result0;
      }
      
      function parse_Condition() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          if (input.substr(pos.offset, 4) === "when") {
            result1 = "when";
            advance(pos, 4);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"when\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 40) {
                result3 = "(";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_expression();
                  if (result5 !== null) {
                    result6 = parse__();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result7 = ")";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse__();
                        if (result8 !== null) {
                          result9 = parse_Prefix();
                          if (result9 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, e, P) {
        	  									return new CCSCondition(e, P);
        	  								})(pos0.offset, pos0.line, pos0.column, result0[5], result0[9]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Input() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Action();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 63) {
              result2 = "?";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"?\"");
              }
            }
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_identifier();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, t) { return t; })(pos2.offset, pos2.line, pos2.column, result3[1]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, v) { 
        	  									return new CCSInput(a, v); 
        	  								})(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Output() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Action();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 33) {
              result2 = "!";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"!\"");
              }
            }
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_expression();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, t) { return t; })(pos2.offset, pos2.line, pos2.column, result3[1]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, e) { 
        	  									return new CCSOutput(a, (e == "") ? null : e); 
        	  								})(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_SimpleAction() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_Action();
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) { 
        	                                	return new CCSSimpleAction(a); 
        	                                })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Action() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_channel();
        if (result0 !== null) {
          pos2 = clone(pos);
          pos3 = clone(pos);
          if (input.charCodeAt(pos.offset) === 40) {
            result1 = "(";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_expression();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 41) {
                result3 = ")";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos3);
              }
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          if (result1 !== null) {
            result1 = (function(offset, line, column, e) { return e; })(pos2.offset, pos2.line, pos2.column, result1[1]);
          }
          if (result1 === null) {
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, c, e) {
          										if (e == "") e = null;
          										return new CCSChannel(c, e);
          									})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Trivial() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1, pos2, pos3, pos4, pos5;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 40) {
            result1 = "(";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_Restriction();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result4 = ")";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, P) { 
          										return P; 
          									})(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse__();
          if (result0 !== null) {
            if (input.charCodeAt(pos.offset) === 48) {
              result1 = "0";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { 
            										return new CCSStop(); 
            									})(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse__();
            if (result0 !== null) {
              if (input.charCodeAt(pos.offset) === 49) {
                result1 = "1";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"1\"");
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { 
              										return new CCSExit(); 
              									})(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse__();
              if (result0 !== null) {
                result1 = parse_name();
                if (result1 !== null) {
                  pos2 = clone(pos);
                  pos3 = clone(pos);
                  result2 = parse__();
                  if (result2 !== null) {
                    if (input.charCodeAt(pos.offset) === 91) {
                      result3 = "[";
                      advance(pos, 1);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"[\"");
                      }
                    }
                    if (result3 !== null) {
                      result4 = parse__();
                      if (result4 !== null) {
                        result5 = parse_expression();
                        if (result5 !== null) {
                          result6 = [];
                          pos4 = clone(pos);
                          pos5 = clone(pos);
                          result7 = parse__();
                          if (result7 !== null) {
                            if (input.charCodeAt(pos.offset) === 44) {
                              result8 = ",";
                              advance(pos, 1);
                            } else {
                              result8 = null;
                              if (reportFailures === 0) {
                                matchFailed("\",\"");
                              }
                            }
                            if (result8 !== null) {
                              result9 = parse__();
                              if (result9 !== null) {
                                result10 = parse_expression();
                                if (result10 !== null) {
                                  result7 = [result7, result8, result9, result10];
                                } else {
                                  result7 = null;
                                  pos = clone(pos5);
                                }
                              } else {
                                result7 = null;
                                pos = clone(pos5);
                              }
                            } else {
                              result7 = null;
                              pos = clone(pos5);
                            }
                          } else {
                            result7 = null;
                            pos = clone(pos5);
                          }
                          if (result7 !== null) {
                            result7 = (function(offset, line, column, e1) { return e1; })(pos4.offset, pos4.line, pos4.column, result7[3]);
                          }
                          if (result7 === null) {
                            pos = clone(pos4);
                          }
                          while (result7 !== null) {
                            result6.push(result7);
                            pos4 = clone(pos);
                            pos5 = clone(pos);
                            result7 = parse__();
                            if (result7 !== null) {
                              if (input.charCodeAt(pos.offset) === 44) {
                                result8 = ",";
                                advance(pos, 1);
                              } else {
                                result8 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\",\"");
                                }
                              }
                              if (result8 !== null) {
                                result9 = parse__();
                                if (result9 !== null) {
                                  result10 = parse_expression();
                                  if (result10 !== null) {
                                    result7 = [result7, result8, result9, result10];
                                  } else {
                                    result7 = null;
                                    pos = clone(pos5);
                                  }
                                } else {
                                  result7 = null;
                                  pos = clone(pos5);
                                }
                              } else {
                                result7 = null;
                                pos = clone(pos5);
                              }
                            } else {
                              result7 = null;
                              pos = clone(pos5);
                            }
                            if (result7 !== null) {
                              result7 = (function(offset, line, column, e1) { return e1; })(pos4.offset, pos4.line, pos4.column, result7[3]);
                            }
                            if (result7 === null) {
                              pos = clone(pos4);
                            }
                          }
                          if (result6 !== null) {
                            result7 = parse__();
                            if (result7 !== null) {
                              if (input.charCodeAt(pos.offset) === 93) {
                                result8 = "]";
                                advance(pos, 1);
                              } else {
                                result8 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"]\"");
                                }
                              }
                              if (result8 !== null) {
                                result2 = [result2, result3, result4, result5, result6, result7, result8];
                              } else {
                                result2 = null;
                                pos = clone(pos3);
                              }
                            } else {
                              result2 = null;
                              pos = clone(pos3);
                            }
                          } else {
                            result2 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result2 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                  if (result2 !== null) {
                    result2 = (function(offset, line, column, e, es) { es.unshift(e); return es; })(pos2.offset, pos2.line, pos2.column, result2[3], result2[4]);
                  }
                  if (result2 === null) {
                    pos = clone(pos2);
                  }
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, n, args) { 
                                                		return new CCSProcessApplication(n.name, (typeof args == "string" ? null : args));
                                              	})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_name() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[A-Z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[A-Za-z0-9_]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[A-Za-z0-9_]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { return {name: first + rest.join(''), line: line, column: column}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("name");
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[a-z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[A-Za-z0-9_]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[A-Za-z0-9_]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { return first + rest.join(''); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identifier");
        }
        return result0;
      }
      
      function parse_channel() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[a-z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[A-Za-z0-9_]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[A-Za-z0-9_]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { return first + rest.join(''); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("channel");
        }
        return result0;
      }
      
      function parse_int() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 48) {
          result0 = "0";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return 0; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (/^[1-9]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[1-9]");
            }
          }
          if (result0 !== null) {
            result1 = [];
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, first, rest) { return parseInt(first + rest.join('')); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("integer");
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[' '\n\r\t]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[' '\\n\\r\\t]");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 35) {
            result0 = "#";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            if (/^[^\n]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n]");
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^\n]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\n]");
                }
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 10) {
                result2 = "\n";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) {})(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse___();
            if (result0 !== null) {
              result0 = (function(offset, line, column) {})(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      function parse___() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[' '\t]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[' '\\t]");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 35) {
            result0 = "#";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            if (/^[^\n]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n]");
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^\n]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\n]");
                }
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 10) {
                result2 = "\n";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
              if (result2 !== null) {
                result3 = parse___();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) {})(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 35) {
              result0 = "#";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"#\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              if (/^[^\n]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\n]");
                }
              }
              while (result2 !== null) {
                result1.push(result2);
                if (/^[^\n]/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\n]");
                  }
                }
              }
              if (result1 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (/^[\S\s]/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^]");
                  }
                }
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) {})(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = [];
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("inline whitespace");
        }
        return result0;
      }
      
      function parse_expression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse____();
        if (result0 !== null) {
          result1 = parse_equalityExpression();
          if (result1 !== null) {
            result2 = parse____();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, result) { return result; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_equalityExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_relationalExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          result2 = parse____();
          if (result2 !== null) {
            if (input.substr(pos.offset, 2) === "==") {
              result3 = "==";
              advance(pos, 2);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"==\"");
              }
            }
            if (result3 === null) {
              if (input.substr(pos.offset, 2) === "!=") {
                result3 = "!=";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!=\"");
                }
              }
            }
            if (result3 !== null) {
              result4 = parse____();
              if (result4 !== null) {
                result5 = parse_relationalExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column, op, right) { return [op, right]; })(pos2.offset, pos2.line, pos2.column, result2[1], result2[3]);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            result2 = parse____();
            if (result2 !== null) {
              if (input.substr(pos.offset, 2) === "==") {
                result3 = "==";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"==\"");
                }
              }
              if (result3 === null) {
                if (input.substr(pos.offset, 2) === "!=") {
                  result3 = "!=";
                  advance(pos, 2);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"!=\"");
                  }
                }
              }
              if (result3 !== null) {
                result4 = parse____();
                if (result4 !== null) {
                  result5 = parse_relationalExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, op, right) { return [op, right]; })(pos2.offset, pos2.line, pos2.column, result2[1], result2[3]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, equal) { 
         			while (equal.length > 0) {
         				t = equal.shift();
         				left = new CCSEqualityExpression(left, t[1], t[0]);
         			}
         			return left;
         		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_relationalExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_concatenatingExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          result2 = parse____();
          if (result2 !== null) {
            pos4 = clone(pos);
            if (input.charCodeAt(pos.offset) === 60) {
              result3 = "<";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"<\"");
              }
            }
            if (result3 !== null) {
              if (input.charCodeAt(pos.offset) === 61) {
                result4 = "=";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos4);
              }
            } else {
              result3 = null;
              pos = clone(pos4);
            }
            if (result3 === null) {
              pos4 = clone(pos);
              if (input.charCodeAt(pos.offset) === 62) {
                result3 = ">";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos4);
                }
              } else {
                result3 = null;
                pos = clone(pos4);
              }
              if (result3 === null) {
                if (input.charCodeAt(pos.offset) === 60) {
                  result3 = "<";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"<\"");
                  }
                }
                if (result3 === null) {
                  if (input.charCodeAt(pos.offset) === 62) {
                    result3 = ">";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">\"");
                    }
                  }
                }
              }
            }
            if (result3 !== null) {
              result4 = parse____();
              if (result4 !== null) {
                result5 = parse_concatenatingExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column, op, right) { return [op, right]; })(pos2.offset, pos2.line, pos2.column, result2[1], result2[3]);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            result2 = parse____();
            if (result2 !== null) {
              pos4 = clone(pos);
              if (input.charCodeAt(pos.offset) === 60) {
                result3 = "<";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"<\"");
                }
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos4);
                }
              } else {
                result3 = null;
                pos = clone(pos4);
              }
              if (result3 === null) {
                pos4 = clone(pos);
                if (input.charCodeAt(pos.offset) === 62) {
                  result3 = ">";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">\"");
                  }
                }
                if (result3 !== null) {
                  if (input.charCodeAt(pos.offset) === 61) {
                    result4 = "=";
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"=\"");
                    }
                  }
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = clone(pos4);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos4);
                }
                if (result3 === null) {
                  if (input.charCodeAt(pos.offset) === 60) {
                    result3 = "<";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"<\"");
                    }
                  }
                  if (result3 === null) {
                    if (input.charCodeAt(pos.offset) === 62) {
                      result3 = ">";
                      advance(pos, 1);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\">\"");
                      }
                    }
                  }
                }
              }
              if (result3 !== null) {
                result4 = parse____();
                if (result4 !== null) {
                  result5 = parse_concatenatingExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, op, right) { return [op, right]; })(pos2.offset, pos2.line, pos2.column, result2[1], result2[3]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, relational) { 
         			while (relational.length > 0) {
         				t = relational.shift();
         				left = new CCSEqualityExpression(left, t[1], t[0]);
         			}
         			return left;
         		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_concatenatingExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_additiveExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          result2 = parse____();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 94) {
              result3 = "^";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"^\"");
              }
            }
            if (result3 !== null) {
              result4 = parse____();
              if (result4 !== null) {
                result5 = parse_additiveExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column, right) { return right; })(pos2.offset, pos2.line, pos2.column, result2[3]);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            result2 = parse____();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 94) {
                result3 = "^";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"^\"");
                }
              }
              if (result3 !== null) {
                result4 = parse____();
                if (result4 !== null) {
                  result5 = parse_additiveExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, right) { return right; })(pos2.offset, pos2.line, pos2.column, result2[3]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, concat) { 
         			while (concat.length > 0) {
         				t = concat.shift();
         				left = new CCSConcatenatingExpression(left, t);
         			}
         			return left;
         		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_additiveExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_multiplicativeExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          result2 = parse____();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 43) {
              result3 = "+";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"+\"");
              }
            }
            if (result3 === null) {
              if (input.charCodeAt(pos.offset) === 45) {
                result3 = "-";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
            }
            if (result3 !== null) {
              result4 = parse____();
              if (result4 !== null) {
                result5 = parse_multiplicativeExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column, op, right) { return [op, right]; })(pos2.offset, pos2.line, pos2.column, result2[1], result2[3]);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            result2 = parse____();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 43) {
                result3 = "+";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (result3 === null) {
                if (input.charCodeAt(pos.offset) === 45) {
                  result3 = "-";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
              }
              if (result3 !== null) {
                result4 = parse____();
                if (result4 !== null) {
                  result5 = parse_multiplicativeExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, op, right) { return [op, right]; })(pos2.offset, pos2.line, pos2.column, result2[1], result2[3]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, addition) {
         			while (addition.length > 0) {
         				t = addition.shift();
         				left = new CCSAdditiveExpression(left, t[1], t[0]);
         			}
         			return left;
         		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_multiplicativeExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_primaryExpression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          result2 = parse____();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 42) {
              result3 = "*";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (result3 === null) {
              if (input.charCodeAt(pos.offset) === 47) {
                result3 = "/";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
            }
            if (result3 !== null) {
              result4 = parse____();
              if (result4 !== null) {
                result5 = parse_primaryExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column, op, right) { return [op, right]; })(pos2.offset, pos2.line, pos2.column, result2[1], result2[3]);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            result2 = parse____();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 42) {
                result3 = "*";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*\"");
                }
              }
              if (result3 === null) {
                if (input.charCodeAt(pos.offset) === 47) {
                  result3 = "/";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"/\"");
                  }
                }
              }
              if (result3 !== null) {
                result4 = parse____();
                if (result4 !== null) {
                  result5 = parse_primaryExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, op, right) { return [op, right]; })(pos2.offset, pos2.line, pos2.column, result2[1], result2[3]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, multiplication) {
         			while (multiplication.length > 0) {
         				t = multiplication.shift();
         				left = new CCSMultiplicativeExpression(left, t[1], t[0]);
         			}
         			return left;
         		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_primaryExpression() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        result0 = parse_exp_boolean();
        if (result0 === null) {
          result0 = parse_exp_integer();
          if (result0 === null) {
            result0 = parse_exp_string();
            if (result0 === null) {
              result0 = parse_exp_identifier();
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 40) {
                  result0 = "(";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse____();
                  if (result1 !== null) {
                    result2 = parse_equalityExpression();
                    if (result2 !== null) {
                      result3 = parse____();
                      if (result3 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result4 = ")";
                          advance(pos, 1);
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result4 !== null) {
                          result0 = [result0, result1, result2, result3, result4];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, equality) { return equality; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_exp_identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[a-z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[A-Za-z0-9_]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[A-Za-z0-9_]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { return new CCSVariableExpression(first + rest.join('')); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identifier");
        }
        return result0;
      }
      
      function parse_exp_boolean() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "true") {
          result0 = "true";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return new CCSConstantExpression(true); })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 5) === "false") {
            result0 = "false";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return new CCSConstantExpression(false); })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("boolean literal");
        }
        return result0;
      }
      
      function parse_exp_integer() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 45) {
          result0 = "-";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, minus, digits) { return new CCSConstantExpression(parseInt(minus + digits.join(""))); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("integer literal");
        }
        return result0;
      }
      
      function parse_exp_string() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_exp_escapeSequence();
          if (result2 === null) {
            if (/^[^"]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\"]");
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_exp_escapeSequence();
            if (result2 === null) {
              if (/^[^"]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\"]");
                }
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 34) {
              result2 = "\"";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return new CCSConstantExpression((s.join ? s.join("") : "")); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("string literal");
        }
        return result0;
      }
      
      function parse_exp_escapeSequence() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 92) {
          result0 = "\\";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 116) {
            result1 = "t";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"t\"");
            }
          }
          if (result1 !== null) {
            result1 = (function(offset, line, column) { return '\\t'; })(pos1.offset, pos1.line, pos1.column);
          }
          if (result1 === null) {
            pos = clone(pos1);
          }
          if (result1 === null) {
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 110) {
              result1 = "n";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"n\"");
              }
            }
            if (result1 !== null) {
              result1 = (function(offset, line, column) { return '\\n'; })(pos1.offset, pos1.line, pos1.column);
            }
            if (result1 === null) {
              pos = clone(pos1);
            }
            if (result1 === null) {
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 114) {
                result1 = "r";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"r\"");
                }
              }
              if (result1 !== null) {
                result1 = (function(offset, line, column) { return '\\r'; })(pos1.offset, pos1.line, pos1.column);
              }
              if (result1 === null) {
                pos = clone(pos1);
              }
              if (result1 === null) {
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 34) {
                  result1 = "\"";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\"\"");
                  }
                }
                if (result1 !== null) {
                  result1 = (function(offset, line, column) { return '\\"'; })(pos1.offset, pos1.line, pos1.column);
                }
                if (result1 === null) {
                  pos = clone(pos1);
                }
                if (result1 === null) {
                  pos1 = clone(pos);
                  if (input.charCodeAt(pos.offset) === 92) {
                    result1 = "\\";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\\\\"");
                    }
                  }
                  if (result1 !== null) {
                    result1 = (function(offset, line, column) { return '\\\\'; })(pos1.offset, pos1.line, pos1.column);
                  }
                  if (result1 === null) {
                    pos = clone(pos1);
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse____() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        result0 = [];
        if (input.charCodeAt(pos.offset) === 32) {
          result1 = " ";
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.charCodeAt(pos.offset) === 32) {
            result1 = " ";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = [];
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
// Generated by CoffeeScript 1.6.3
/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var ActionSets, CCS, CCSAction, CCSAdditiveExpression, CCSBaseStep, CCSChannel, CCSChoice, CCSChoiceLRule, CCSChoiceRRule, CCSConcatenatingExpression, CCSCondRule, CCSCondition, CCSConstantExpression, CCSEqualityExpression, CCSExit, CCSExitChannel, CCSExitRule, CCSExpression, CCSGetMostGeneralType, CCSInput, CCSInputRule, CCSInputStep, CCSInternalActionCreate, CCSInternalChannel, CCSMatch, CCSMatchRule, CCSMultiplicativeExpression, CCSOutput, CCSOutputRule, CCSParLRule, CCSParRRule, CCSParallel, CCSPrefix, CCSPrefixRule, CCSProcess, CCSProcessApplication, CCSProcessDefinition, CCSRecRule, CCSRelationalExpression, CCSResRule, CCSRestriction, CCSSeq1Rule, CCSSeq2Rule, CCSSequence, CCSSimpleAction, CCSStep, CCSStop, CCSSyncExitRule, CCSSyncRule, CCSTypeChannel, CCSTypeUnknown, CCSTypeValue, CCSUIChannel, CCSVariableExpression, DP, DS, DSteps, ObjID, _DEBUG, _ref, _ref1, _ref2, _ref3,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CCSInternalChannel = "\u03c4";

CCSExitChannel = "\u03b4";

CCSUIChannel = "\u03c8";

ObjID = 1;

_DEBUG = [];

DSteps = [];

DS = function() {
  var i, s, _i, _len;
  console.log(ccs.system.toString());
  DSteps = ccs.getPossibleSteps();
  for (i = _i = 0, _len = DSteps.length; _i < _len; i = ++_i) {
    s = DSteps[i];
    console.log("\"" + i + "\": " + (s.toString()));
  }
  return null;
};

DP = function(i) {
  ccs.performStep(DSteps[i]);
  return DS();
};

CCSTypeUnknown = 0;

CCSTypeChannel = 1;

CCSTypeValue = 2;

CCSGetMostGeneralType = function(t1, t2) {
  if (t2 === CCSTypeUnknown) {
    return t1;
  }
  if (t1 === CCSTypeUnknown) {
    return t2;
  }
  if (t1 === t2) {
    return t1;
  }
  throw new Error("Incopatible Types: " + t1 + " and " + t2 + "!");
};

CCS = (function() {
  function CCS(processDefinitions, system) {
    var pd, _i, _len, _ref;
    this.processDefinitions = processDefinitions;
    this.system = system;
    this.system.setCCS(this);
    _ref = this.processDefinitions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pd = _ref[_i];
      pd.setCCS(this);
      pd.computeArgTypes();
    }
  }

  CCS.prototype.getProcessDefinition = function(name, argCount) {
    var pd, result, _i, _len, _ref;
    result = null;
    _ref = this.processDefinitions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pd = _ref[_i];
      if (pd.name === name && argCount === pd.getArgCount()) {
        result = pd;
      }
    }
    return result;
  };

  CCS.prototype.getPossibleSteps = function(copyOnPerform) {
    return this.system.getPossibleSteps(copyOnPerform);
  };

  CCS.prototype.toString = function(expressionOnly) {
    var process;
    if (expressionOnly) {
      return this.system.toString();
    } else {
      return "" + (((function() {
        var _i, _len, _ref, _results;
        _ref = this.processDefinitions;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          process = _ref[_i];
          _results.push(process.toString());
        }
        return _results;
      }).call(this)).join("")) + "\n" + (this.system.toString());
    }
  };

  return CCS;

})();

CCSProcessDefinition = (function() {
  function CCSProcessDefinition(name, process, params) {
    var p;
    this.name = name;
    this.process = process;
    this.params = params;
    if (this.params) {
      this.types = (function() {
        var _i, _len, _ref, _results;
        _ref = this.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push(CCSTypeUnknown);
        }
        return _results;
      }).call(this);
    }
  }

  CCSProcessDefinition.prototype.getArgCount = function() {
    if (this.params) {
      return this.params.length;
    } else {
      return 0;
    }
  };

  CCSProcessDefinition.prototype.setCCS = function(ccs) {
    return this.process.setCCS(ccs);
  };

  CCSProcessDefinition.prototype.computeArgTypes = function() {
    var x;
    if (!this.params) {
      return null;
    }
    return this.types = (function() {
      var _i, _len, _ref, _results;
      _ref = this.params;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        _results.push(this.process.getTypeOfIdentifier(x, CCSTypeUnknown));
      }
      return _results;
    }).call(this);
  };

  CCSProcessDefinition.prototype.toString = function() {
    var result, _ref;
    result = this.name;
    if (((_ref = this.params) != null ? _ref.length : void 0) > 0) {
      result += "[" + (this.params.join(", ")) + "]";
    }
    result += " := " + (this.process.toString()) + "\n";
    return result;
  };

  return CCSProcessDefinition;

})();

CCSProcess = (function() {
  function CCSProcess() {
    var subprocesses;
    subprocesses = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.subprocesses = subprocesses;
    this.__id = ObjID++;
  }

  CCSProcess.prototype.setCCS = function(ccs) {
    var p, _i, _len, _ref, _results;
    this.ccs = ccs;
    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.setCCS(this.ccs));
    }
    return _results;
  };

  CCSProcess.prototype._setCCS = function(ccs) {
    this.ccs = ccs;
    if (!this.ccs) {
      throw "no ccs";
    }
    return this;
  };

  CCSProcess.prototype.getLeft = function() {
    return this.subprocesses[0];
  };

  CCSProcess.prototype.getRight = function() {
    return this.subprocesses[1];
  };

  CCSProcess.prototype.setLeft = function(left) {
    return this.subprocesses[0] = left;
  };

  CCSProcess.prototype.setRight = function(right) {
    return this.subprocesses[1] = right;
  };

  CCSProcess.prototype.replaceVariable = function(varName, exp) {
    var p, _i, _len, _ref, _results;
    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.replaceVariable(varName, exp));
    }
    return _results;
  };

  CCSProcess.prototype.replaceVariableWithValue = function(varName, val) {
    return this.replaceVariable(varName, new CCSConstantExpression(val));
  };

  CCSProcess.prototype.replaceChannelName = function(old, newID) {
    var p, _i, _len, _ref, _results;
    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.replaceChannelName(old, newID));
    }
    return _results;
  };

  CCSProcess.prototype.getTypeOfIdentifier = function(identifier, type) {
    var p, t, _i, _len, _ref;
    _ref = (function() {
      var _j, _len, _ref, _results;
      _ref = this.subprocesses;
      _results = [];
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        p = _ref[_j];
        _results.push(p.getTypeOfIdentifier(identifier, type));
      }
      return _results;
    }).call(this);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      type = CCSGetMostGeneralType(type, t);
    }
    return type;
  };

  CCSProcess.prototype.getApplicapleRules = function() {
    return [];
  };

  CCSProcess.prototype.getPossibleSteps = function(copyOnPerform) {
    var rule;
    if (!copyOnPerform) {
      copyOnPerform = false;
    }
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = this.getApplicapleRules();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        _results.push(rule.getPossibleSteps(this, copyOnPerform));
      }
      return _results;
    }).call(this)).concatChildren();
  };

  CCSProcess.prototype.needsBracketsForSubprocess = function(process) {
    return (this.getPrecedence != null) && (process.getPrecedence != null) && process.getPrecedence() < this.getPrecedence();
  };

  CCSProcess.prototype.stringForSubprocess = function(process) {
    if (this.needsBracketsForSubprocess(process)) {
      return "(" + (process.toString()) + ")";
    } else {
      return "" + (process.toString());
    }
  };

  CCSProcess.prototype.getPrefixes = function() {
    var p;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = this.subprocesses;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.getPrefixes());
      }
      return _results;
    }).call(this)).concatChildren();
  };

  CCSProcess.prototype.getExits = function() {
    var p;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = this.subprocesses;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.getExits());
      }
      return _results;
    }).call(this)).concatChildren();
  };

  return CCSProcess;

})();

CCSStop = (function(_super) {
  __extends(CCSStop, _super);

  function CCSStop() {
    _ref = CCSStop.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CCSStop.prototype.getPrecedence = function() {
    return 12;
  };

  CCSStop.prototype.toString = function() {
    return "0";
  };

  CCSStop.prototype.copy = function() {
    return (new CCSStop())._setCCS(this.ccs);
  };

  return CCSStop;

})(CCSProcess);

CCSExit = (function(_super) {
  __extends(CCSExit, _super);

  function CCSExit() {
    _ref1 = CCSExit.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  CCSExit.prototype.getPrecedence = function() {
    return 12;
  };

  CCSExit.prototype.getApplicapleRules = function() {
    return [CCSExitRule];
  };

  CCSExit.prototype.getExits = function() {
    return [this];
  };

  CCSExit.prototype.toString = function() {
    return "1";
  };

  CCSExit.prototype.copy = function() {
    return (new CCSExit())._setCCS(this.ccs);
  };

  return CCSExit;

})(CCSProcess);

CCSProcessApplication = (function(_super) {
  __extends(CCSProcessApplication, _super);

  function CCSProcessApplication(processName, valuesToPass) {
    this.processName = processName;
    this.valuesToPass = valuesToPass != null ? valuesToPass : [];
    CCSProcessApplication.__super__.constructor.call(this);
  }

  CCSProcessApplication.prototype.getArgCount = function() {
    return this.valuesToPass.length;
  };

  CCSProcessApplication.prototype.getProcess = function() {
    var i, id, pd, _i, _ref2;
    if (this.process) {
      return this.process;
    }
    pd = this.ccs.getProcessDefinition(this.processName, this.getArgCount());
    this.process = pd.process.copy();
    if (pd.params) {
      for (i = _i = 0, _ref2 = pd.params.length - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
        id = pd.params[i];
        if (pd.types[i] === CCSTypeChannel) {
          this.process.replaceChannelName(id, this.valuesToPass[i].variableName);
        } else {
          this.process.replaceVariable(id, this.valuesToPass[i]);
        }
      }
    }
    return this.process;
  };

  CCSProcessApplication.prototype.getPrecedence = function() {
    return 12;
  };

  CCSProcessApplication.prototype.getTypeOfIdentifier = function(identifier, type) {
    var i, pd, _i, _ref2;
    pd = this.ccs.getProcessDefinition(this.processName, this.getArgCount());
    if (pd.params) {
      for (i = _i = 0, _ref2 = pd.params.length - 1; _i <= _ref2; i = _i += 1) {
        type = this.valuesToPass[i].getTypeOfIdentifier(identifier, type);
        type = CCSGetMostGeneralType(type, pd.types[i]);
      }
    }
    return type;
  };

  CCSProcessApplication.prototype.getApplicapleRules = function() {
    return [CCSRecRule];
  };

  CCSProcessApplication.prototype.getPrefixes = function() {
    return this.getProcess().getPrefixes();
  };

  CCSProcessApplication.prototype.getExits = function() {
    if (this.process) {
      return this.process.getExits();
    } else {
      return [];
    }
  };

  CCSProcessApplication.prototype.replaceVariable = function(varName, exp) {
    var e;
    return this.valuesToPass = (function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.valuesToPass;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        e = _ref2[_i];
        _results.push(e.replaceVariable(varName, exp));
      }
      return _results;
    }).call(this);
  };

  CCSProcessApplication.prototype.replaceChannelName = function(old, newID) {
    var e, _i, _len, _ref2, _results;
    _ref2 = this.valuesToPass;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      e = _ref2[_i];
      _results.push(e.replaceChannelName(old, newID));
    }
    return _results;
  };

  /*getProxy: -> 	# ToDo: cache result
  		pd = @ccs.getProcessDefinition(@processName, @getArgCount())
  		new ProcessApplicationProxy(@, pd.process.copy())
  */


  CCSProcessApplication.prototype.toString = function() {
    var e, result;
    result = this.processName;
    if (this.getArgCount() > 0) {
      result += "[" + (((function() {
        var _i, _len, _ref2, _results;
        _ref2 = this.valuesToPass;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          e = _ref2[_i];
          _results.push(e.toString());
        }
        return _results;
      }).call(this)).join(", ")) + "]";
    }
    return result;
  };

  CCSProcessApplication.prototype.copy = function() {
    var v;
    return (new CCSProcessApplication(this.processName, (function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.valuesToPass;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        _results.push(v.copy());
      }
      return _results;
    }).call(this)))._setCCS(this.ccs);
  };

  return CCSProcessApplication;

})(CCSProcess);

CCSPrefix = (function(_super) {
  __extends(CCSPrefix, _super);

  function CCSPrefix(action, process) {
    this.action = action;
    CCSPrefix.__super__.constructor.call(this, process);
  }

  CCSPrefix.prototype.getPrecedence = function() {
    return 12;
  };

  CCSPrefix.prototype.getApplicapleRules = function() {
    return [CCSPrefixRule, CCSOutputRule, CCSInputRule];
  };

  CCSPrefix.prototype.getProcess = function() {
    return this.subprocesses[0];
  };

  CCSPrefix.prototype.replaceVariable = function(varName, exp) {
    if (this.action.replaceVariable(varName, exp)) {
      return CCSPrefix.__super__.replaceVariable.call(this, varName, exp);
    }
  };

  CCSPrefix.prototype.replaceChannelName = function(old, newID) {
    if (this.action.replaceChannelName(old, newID)) {
      return CCSPrefix.__super__.replaceChannelName.call(this, old, newID);
    }
  };

  CCSPrefix.prototype.getPrefixes = function() {
    return [this];
  };

  CCSPrefix.prototype.getTypeOfIdentifier = function(identifier, type) {
    type = this.action.getTypeOfIdentifier(identifier, type);
    if (this.action.isInputAction() && this.action.variable === identifier) {
      CCSPrefix.__super__.getTypeOfIdentifier.call(this, identifier, CCSTypeValue);
      return type;
    } else {
      return CCSPrefix.__super__.getTypeOfIdentifier.call(this, identifier, type);
    }
  };

  CCSPrefix.prototype.toString = function() {
    return "" + (this.action.toString()) + "." + (this.stringForSubprocess(this.getProcess()));
  };

  CCSPrefix.prototype.copy = function() {
    return (new CCSPrefix(this.action.copy(), this.getProcess().copy()))._setCCS(this.ccs);
  };

  return CCSPrefix;

})(CCSProcess);

CCSCondition = (function(_super) {
  __extends(CCSCondition, _super);

  function CCSCondition(expression, process) {
    this.expression = expression;
    CCSCondition.__super__.constructor.call(this, process);
  }

  CCSCondition.prototype.getPrecedence = function() {
    return 12;
  };

  CCSCondition.prototype.getApplicapleRules = function() {
    return [CCSCondRule];
  };

  CCSCondition.prototype.getProcess = function() {
    return this.subprocesses[0];
  };

  CCSCondition.prototype.getTypeOfIdentifier = function(identifier, type) {
    type = this.expression.getTypeOfIdentifier(identifier, type);
    return CCSCondition.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  CCSCondition.prototype.replaceVariable = function(varName, exp) {
    this.expression = this.expression.replaceVariable(varName, exp);
    return CCSCondition.__super__.replaceVariable.call(this, varName, exp);
  };

  CCSCondition.prototype.toString = function() {
    return "when (" + (this.expression.toString()) + ") " + (this.stringForSubprocess(this.getProcess()));
  };

  CCSCondition.prototype.copy = function() {
    return (new CCSCondition(this.expression.copy(), this.getProcess().copy()))._setCCS(this.ccs);
  };

  return CCSCondition;

})(CCSProcess);

CCSChoice = (function(_super) {
  __extends(CCSChoice, _super);

  function CCSChoice(left, right) {
    CCSChoice.__super__.constructor.call(this, left, right);
  }

  CCSChoice.prototype.getPrecedence = function() {
    return 9;
  };

  CCSChoice.prototype.getApplicapleRules = function() {
    return [CCSChoiceLRule, CCSChoiceRRule];
  };

  CCSChoice.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getLeft())) + " + " + (this.stringForSubprocess(this.getRight()));
  };

  CCSChoice.prototype.copy = function() {
    return (new CCSChoice(this.getLeft().copy(), this.getRight().copy()))._setCCS(this.ccs);
  };

  return CCSChoice;

})(CCSProcess);

CCSParallel = (function(_super) {
  __extends(CCSParallel, _super);

  function CCSParallel(left, right) {
    CCSParallel.__super__.constructor.call(this, left, right);
  }

  CCSParallel.prototype.getPrecedence = function() {
    return 6;
  };

  CCSParallel.prototype.getApplicapleRules = function() {
    return [CCSParLRule, CCSParRRule, CCSSyncRule, CCSSyncExitRule];
  };

  CCSParallel.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getLeft())) + " | " + (this.stringForSubprocess(this.getRight()));
  };

  CCSParallel.prototype.copy = function() {
    return (new CCSParallel(this.getLeft().copy(), this.getRight().copy()))._setCCS(this.ccs);
  };

  return CCSParallel;

})(CCSProcess);

CCSSequence = (function(_super) {
  __extends(CCSSequence, _super);

  function CCSSequence(left, right) {
    CCSSequence.__super__.constructor.call(this, left, right);
  }

  CCSSequence.prototype.getPrecedence = function() {
    return 3;
  };

  CCSSequence.prototype.getApplicapleRules = function() {
    return [CCSSeq1Rule, CCSSeq2Rule];
  };

  CCSSequence.prototype.getPrefixes = function() {
    return this.getLeft().getPrefixes();
  };

  CCSSequence.prototype.getExits = function() {
    return this.getLeft().getExits();
  };

  CCSSequence.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getLeft())) + " ; " + (this.stringForSubprocess(this.getRight()));
  };

  CCSSequence.prototype.copy = function() {
    return (new CCSSequence(this.getLeft().copy(), this.getRight().copy()))._setCCS(this.ccs);
  };

  return CCSSequence;

})(CCSProcess);

CCSRestriction = (function(_super) {
  __extends(CCSRestriction, _super);

  function CCSRestriction(process, restrictedChannels) {
    this.restrictedChannels = restrictedChannels;
    CCSRestriction.__super__.constructor.call(this, process);
  }

  CCSRestriction.prototype.getPrecedence = function() {
    return 1;
  };

  CCSRestriction.prototype.getApplicapleRules = function() {
    return [CCSResRule];
  };

  CCSRestriction.prototype.getProcess = function() {
    return this.subprocesses[0];
  };

  CCSRestriction.prototype.setProcess = function(process) {
    return this.subprocesses[0] = process;
  };

  CCSRestriction.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getProcess())) + " \\ {" + (this.restrictedChannels.join(", ")) + "}";
  };

  CCSRestriction.prototype.copy = function() {
    return (new CCSRestriction(this.getProcess().copy(), this.restrictedChannels))._setCCS(this.ccs);
  };

  return CCSRestriction;

})(CCSProcess);

CCSChannel = (function() {
  function CCSChannel(name, expression) {
    this.name = name;
    this.expression = expression != null ? expression : null;
  }

  CCSChannel.prototype.isEqual = function(channel) {
    if (channel.name !== this.name) {
      return false;
    }
    if (!channel.expression && !this.expression) {
      return true;
    }
    if (!channel.expression || !this.expression) {
      return false;
    }
    return channel.expression.evaluate() === this.expression.evaluate();
  };

  CCSChannel.prototype.replaceVariable = function(varName, exp) {
    if (this.expression) {
      this.expression = this.expression.replaceVariable(varName, exp);
    }
    return null;
  };

  CCSChannel.prototype.replaceChannelName = function(old, newID) {
    if (this.name === old) {
      this.name = newID;
    }
    return null;
  };

  CCSChannel.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.name === identifier) {
      type = CCSGetMostGeneralType(type, CCSTypeChannel);
    }
    if (this.expression) {
      type = this.expression.getTypeOfIdentifier(identifier, type);
    }
    return type;
  };

  CCSChannel.prototype.toString = function() {
    var result;
    result = "" + this.name;
    if (this.expression) {
      if (this.expression.isEvaluatable()) {
        result += "(" + (this.expression.evaluate()) + ")";
      } else {
        result += "(" + (this.expression.toString()) + ")";
      }
    }
    return result;
  };

  CCSChannel.prototype.copy = function() {
    var _ref2;
    return new CCSChannel(this.name, (_ref2 = this.expression) != null ? _ref2.copy() : void 0);
  };

  return CCSChannel;

})();

/*
class CCSInternalChannel extends CCSChannel
	constructor: (name) ->
		if name != CCSInternalChannel or name != CCSExitChannel
			throw new Error("Only internal channel names are allowed!")
		super name, null
	isEqual: (channel) -> channel.name == @name and channel.expression == null
	replaceVariable: (varName, exp) -> null
	replaceChannelName: (old, newID) -> null
	getTypeOfIdentifier: (identifier, type) -> type
	toString: -> @name
*/


CCSAction = (function() {
  function CCSAction(channel) {
    this.channel = channel;
    if (this.channel === "i") {
      if (!this.isSimpleAction()) {
        throw new Error("Internal channel i is only allowed as simple action!");
      }
      this.channel = CCSInternalChannel;
    } else if (this.channel === "e") {
      if (!this.isSimpleAction()) {
        throw new Error("Exit channel e is only allowed as simple action!");
      }
      this.channel = CCSExitChannel;
    }
  }

  CCSAction.prototype.isSimpleAction = function() {
    return false;
  };

  CCSAction.prototype.isInputAction = function() {
    return false;
  };

  CCSAction.prototype.isMatchAction = function() {
    return false;
  };

  CCSAction.prototype.isOutputAction = function() {
    return false;
  };

  CCSAction.prototype.toString = function() {
    return this.channel.toString();
  };

  CCSAction.prototype.transferDescription = function() {
    return this.channel.toString();
  };

  CCSAction.prototype.isSyncableWithAction = function(action) {
    return false;
  };

  CCSAction.prototype.replaceVariable = function(varName, exp) {
    this.channel.replaceVariable(varName, exp);
    return true;
  };

  CCSAction.prototype.replaceChannelName = function(old, newID) {
    return this.channel.replaceChannelName(old, newID);
  };

  CCSAction.prototype.getTypeOfIdentifier = function(identifier, type) {
    return this.channel.getTypeOfIdentifier(identifier, type);
  };

  return CCSAction;

})();

CCSSimpleAction = (function(_super) {
  __extends(CCSSimpleAction, _super);

  function CCSSimpleAction() {
    _ref2 = CCSSimpleAction.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  CCSSimpleAction.prototype.isSimpleAction = function() {
    return true;
  };

  CCSSimpleAction.prototype.supportsValuePassing = function() {
    return false;
  };

  CCSSimpleAction.prototype.copy = function() {
    return new CCSSimpleAction(this.channel.copy());
  };

  return CCSSimpleAction;

})(CCSAction);

CCSInternalActionCreate = function(name) {
  if (name !== CCSInternalChannel && name !== CCSExitChannel) {
    throw new Error("Only internal channel names are allowed!");
  }
  return new CCSSimpleAction(new CCSChannel(name, null));
};

CCSInput = (function(_super) {
  __extends(CCSInput, _super);

  function CCSInput(channel, variable, range) {
    this.variable = variable;
    this.range = range;
    CCSInput.__super__.constructor.call(this, channel);
  }

  CCSInput.prototype.isInputAction = function() {
    return true;
  };

  CCSInput.prototype.supportsValuePassing = function() {
    return typeof this.variable === "string" && this.variable.length > 0;
  };

  CCSInput.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel.isEqual(this.channel) && action.supportsValuePassing() === this.supportsValuePassing();
  };

  CCSInput.prototype.replaceVariable = function(varName, exp) {
    CCSInput.__super__.replaceVariable.call(this, varName, exp);
    return this.variable !== varName;
  };

  CCSInput.prototype.toString = function() {
    return "" + CCSInput.__super__.toString.apply(this, arguments) + "?" + (this.supportsValuePassing() ? this.variable : "");
  };

  CCSInput.prototype.transferDescription = function(inputValue) {
    if (this.supportsValuePassing() && (inputValue === null || inputValue === void 0)) {
      throw new Error("CCSInput.transferDescription needs an input value as argument if it supports value passing!");
    }
    return "" + CCSInput.__super__.transferDescription.apply(this, arguments) + (this.supportsValuePassing() ? ": " + inputValue : "");
  };

  CCSInput.prototype.copy = function() {
    return new CCSInput(this.channel.copy(), this.variable, this.range);
  };

  return CCSInput;

})(CCSAction);

CCSMatch = (function(_super) {
  __extends(CCSMatch, _super);

  function CCSMatch(channel, expression) {
    this.expression = expression;
    CCSMatch.__super__.constructor.call(this, channel);
  }

  CCSMatch.prototype.isMatchAction = function() {
    return true;
  };

  CCSMatch.prototype.supportsValuePassing = function() {
    return true;
  };

  CCSMatch.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel.isEqual(this.channel) && action.supportsValuePassing() && action.expression.evaluate() === this.expression.evaluate();
  };

  CCSMatch.prototype.replaceVariable = function(varName, exp) {
    CCSMatch.__super__.replaceVariable.call(this, varName, exp);
    this.expression = this.expression.replaceVariable(varName, exp);
    return true;
  };

  CCSMatch.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.expression) {
      type = this.expression.getTypeOfIdentifier(identifier, type);
    }
    return CCSMatch.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  CCSMatch.prototype.toString = function() {
    return "" + CCSMatch.__super__.toString.apply(this, arguments) + "?=" + (this.expression ? this.expression.toString() : "");
  };

  CCSMatch.prototype.transferDescription = function() {
    throw new Error("Currently unsupported action");
  };

  CCSMatch.prototype.copy = function() {
    var _ref3;
    return new CCSMatch(this.channel.copy(), (_ref3 = this.expression) != null ? _ref3.copy() : void 0);
  };

  return CCSMatch;

})(CCSAction);

CCSOutput = (function(_super) {
  __extends(CCSOutput, _super);

  function CCSOutput(channel, expression) {
    this.expression = expression;
    CCSOutput.__super__.constructor.call(this, channel);
  }

  CCSOutput.prototype.isOutputAction = function() {
    return true;
  };

  CCSOutput.prototype.supportsValuePassing = function() {
    return this.expression instanceof CCSExpression;
  };

  CCSOutput.prototype.isSyncableWithAction = function(action) {
    if ((action != null ? action.isInputAction() : void 0) || action.isMatchAction()) {
      return action.isSyncableWithAction(this);
    } else {
      return false;
    }
  };

  CCSOutput.prototype.replaceVariable = function(varName, exp) {
    CCSOutput.__super__.replaceVariable.call(this, varName, exp);
    if (this.expression) {
      this.expression = this.expression.replaceVariable(varName, exp);
    }
    return true;
  };

  CCSOutput.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.expression) {
      type = this.expression.getTypeOfIdentifier(identifier, type);
    }
    return CCSOutput.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  CCSOutput.prototype.toString = function() {
    return "" + CCSOutput.__super__.toString.apply(this, arguments) + "!" + (this.expression ? this.expression.toString() : "");
  };

  CCSOutput.prototype.transferDescription = function() {
    return "" + CCSOutput.__super__.transferDescription.apply(this, arguments) + (this.expression ? ": " + this.expression.evaluate() : "");
  };

  CCSOutput.prototype.copy = function() {
    var _ref3;
    return new CCSOutput(this.channel.copy(), (_ref3 = this.expression) != null ? _ref3.copy() : void 0);
  };

  return CCSOutput;

})(CCSAction);

CCSExpression = (function() {
  function CCSExpression() {
    var subExps;
    subExps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.subExps = subExps;
  }

  CCSExpression.prototype.getLeft = function() {
    return this.subExps[0];
  };

  CCSExpression.prototype.getRight = function() {
    return this.subExps[1];
  };

  CCSExpression.prototype.replaceVariable = function(varName, exp) {
    var e;
    this.subExps = (function() {
      var _i, _len, _ref3, _results;
      _ref3 = this.subExps;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        e = _ref3[_i];
        _results.push(e.replaceVariable(varName, exp));
      }
      return _results;
    }).call(this);
    return this;
  };

  CCSExpression.prototype.replaceChannelName = function(old, newID) {
    return null;
  };

  CCSExpression.prototype.usesIdentifier = function(identifier) {
    return this._childrenUseIdentifier(identifier);
  };

  CCSExpression.prototype._childrenUseIdentifier = function(identifier) {
    var e, result, _i, _len, _ref3;
    result = false;
    _ref3 = this.subExps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      e = _ref3[_i];
      result || e.usesIdentifier();
    }
    return result;
  };

  CCSExpression.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this._childrenUseIdentifier(identifier)) {
      type = CCSGetMostGeneralType(type, CCSTypeValue);
    }
    return type;
  };

  CCSExpression.prototype.evaluate = function() {
    throw new Error("Abstract method!");
  };

  CCSExpression.prototype.isEvaluatable = function() {
    return false;
  };

  CCSExpression.prototype.typeOfEvaluation = function() {
    throw new Error("Abstract method!");
  };

  CCSExpression.prototype.needsBracketsForSubExp = function(exp) {
    return (this.getPrecedence != null) && (exp.getPrecedence != null) && exp.getPrecedence() < this.getPrecedence();
  };

  CCSExpression.prototype.stringForSubExp = function(exp) {
    if (this.needsBracketsForSubExp(exp)) {
      return "(" + (exp.toString()) + ")";
    } else {
      return "" + (exp.toString());
    }
  };

  CCSExpression.prototype.toString = function() {
    throw new Error("Abstract method not implemented!");
  };

  CCSExpression.prototype.copy = function() {
    throw new Error("Abstract method not implemented!");
  };

  return CCSExpression;

})();

CCSConstantExpression = (function(_super) {
  __extends(CCSConstantExpression, _super);

  function CCSConstantExpression(value) {
    this.value = value;
    CCSConstantExpression.__super__.constructor.call(this);
  }

  CCSConstantExpression.prototype.getPrecedence = function() {
    return 18;
  };

  CCSConstantExpression.prototype.evaluate = function() {
    return CCSConstantExpression.valueToString(this.value);
  };

  CCSConstantExpression.prototype.isEvaluatable = function() {
    return true;
  };

  CCSConstantExpression.prototype.typeOfEvaluation = function() {
    return typeof this.value;
  };

  CCSConstantExpression.prototype.toString = function() {
    if (typeof this.value === "string") {
      return '"' + this.value + '"';
    } else {
      return "" + this.value;
    }
  };

  CCSConstantExpression.prototype.copy = function() {
    return new CCSConstantExpression(this.value);
  };

  return CCSConstantExpression;

})(CCSExpression);

CCSConstantExpression.valueToString = function(value) {
  if (typeof value === "boolean") {
    value = (value === true ? "1" : "0");
  }
  return value = "" + value;
};

CCSVariableExpression = (function(_super) {
  __extends(CCSVariableExpression, _super);

  function CCSVariableExpression(variableName) {
    this.variableName = variableName;
    CCSVariableExpression.__super__.constructor.call(this);
  }

  CCSVariableExpression.prototype.getPrecedence = function() {
    return 18;
  };

  CCSVariableExpression.prototype.usesIdentifier = function(identifier) {
    return identifier === this.variableName;
  };

  CCSVariableExpression.prototype.replaceVariable = function(varName, exp) {
    if (varName === this.variableName) {
      return exp;
    } else {
      return this;
    }
  };

  CCSVariableExpression.prototype.replaceChannelName = function(old, newID) {
    if (this.variableName === old) {
      return this.variableName = newID;
    }
  };

  CCSVariableExpression.prototype.evaluate = function() {
    throw new Error('Unbound identifier!');
  };

  CCSVariableExpression.prototype.typeOfEvaluation = function() {
    throw new Error('Unbound identifier!');
  };

  CCSVariableExpression.prototype.isEvaluatable = function() {
    return false;
  };

  CCSVariableExpression.prototype.toString = function() {
    return this.variableName;
  };

  CCSVariableExpression.prototype.copy = function() {
    return new CCSVariableExpression(this.variableName);
  };

  return CCSVariableExpression;

})(CCSExpression);

CCSAdditiveExpression = (function(_super) {
  __extends(CCSAdditiveExpression, _super);

  function CCSAdditiveExpression(left, right, op) {
    this.op = op;
    CCSAdditiveExpression.__super__.constructor.call(this, left, right);
  }

  CCSAdditiveExpression.prototype.getPrecedence = function() {
    return 15;
  };

  CCSAdditiveExpression.prototype.evaluate = function() {
    var l, r;
    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    return "" + ((function() {
      if (this.op === "+") {
        return l + r;
      } else if (this.op === "-") {
        return l - r;
      } else {
        throw new Error("Invalid operator!");
      }
    }).call(this));
  };

  CCSAdditiveExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSAdditiveExpression.prototype.typeOfEvaluation = function() {
    return "number";
  };

  CCSAdditiveExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  CCSAdditiveExpression.prototype.copy = function() {
    return new CCSAdditiveExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return CCSAdditiveExpression;

})(CCSExpression);

CCSMultiplicativeExpression = (function(_super) {
  __extends(CCSMultiplicativeExpression, _super);

  function CCSMultiplicativeExpression(left, right, op) {
    this.op = op;
    CCSMultiplicativeExpression.__super__.constructor.call(this, left, right);
  }

  CCSMultiplicativeExpression.prototype.getPrecedence = function() {
    return 12;
  };

  CCSMultiplicativeExpression.prototype.evaluate = function() {
    var l, r;
    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    if (this.op === "*") {
      return l * r;
    } else if (this.op === "/") {
      return Math.floor(l / r);
    } else {
      throw new Error("Invalid operator!");
    }
  };

  CCSMultiplicativeExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSMultiplicativeExpression.prototype.typeOfEvaluation = function() {
    return "number";
  };

  CCSMultiplicativeExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  CCSMultiplicativeExpression.prototype.copy = function() {
    return new CCSMultiplicativeExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return CCSMultiplicativeExpression;

})(CCSExpression);

CCSConcatenatingExpression = (function(_super) {
  __extends(CCSConcatenatingExpression, _super);

  function CCSConcatenatingExpression(left, right) {
    CCSConcatenatingExpression.__super__.constructor.call(this, left, right);
  }

  CCSConcatenatingExpression.prototype.getPrecedence = function() {
    return 9;
  };

  CCSConcatenatingExpression.prototype.evaluate = function() {
    return "" + this.getLeft().evaluate() + this.getRight().evaluate();
  };

  CCSConcatenatingExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSConcatenatingExpression.prototype.typeOfEvaluation = function() {
    return "string";
  };

  CCSConcatenatingExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + "^" + this.stringForSubExp(this.getRight());
  };

  CCSConcatenatingExpression.prototype.copy = function() {
    return new CCSConcatenatingExpression(this.getLeft().copy(), this.getRight().copy());
  };

  return CCSConcatenatingExpression;

})(CCSExpression);

CCSRelationalExpression = (function(_super) {
  __extends(CCSRelationalExpression, _super);

  function CCSRelationalExpression(left, right, op) {
    this.op = op;
    CCSRelationalExpression.__super__.constructor.call(this, left, right);
  }

  CCSRelationalExpression.prototype.getPrecedence = function() {
    return 6;
  };

  CCSRelationalExpression.prototype.evaluate = function() {
    var l, r, res;
    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    res = (function() {
      if (this.op === "<") {
        return l < r;
      } else if (this.op === "<=") {
        return l <= r;
      } else if (this.op === ">") {
        return l > r;
      } else if (this.op === ">=") {
        return l >= r;
      } else {
        throw new Error("Invalid operator!");
      }
    }).call(this);
    return CCSConstantExpression.valueToString(res);
  };

  CCSRelationalExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSRelationalExpression.prototype.typeOfEvaluation = function() {
    return "boolean";
  };

  CCSRelationalExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  CCSRelationalExpression.prototype.copy = function() {
    return new CCSRelationalExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return CCSRelationalExpression;

})(CCSExpression);

CCSEqualityExpression = (function(_super) {
  __extends(CCSEqualityExpression, _super);

  function CCSEqualityExpression(left, right, op) {
    this.op = op;
    CCSEqualityExpression.__super__.constructor.call(this, left, right);
  }

  CCSEqualityExpression.prototype.getPrecedence = function() {
    return 3;
  };

  CCSEqualityExpression.prototype.evaluate = function() {
    var l, r, res;
    l = this.getLeft().evaluate();
    r = this.getRight().evaluate();
    res = (function() {
      if (this.op === "==") {
        return l === r;
      } else if (this.op === "!=") {
        return l !== r;
      } else {
        throw new Error("Invalid operator!");
      }
    }).call(this);
    return CCSConstantExpression.valueToString(res);
  };

  CCSEqualityExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSEqualityExpression.prototype.typeOfEvaluation = function() {
    return "boolean";
  };

  CCSEqualityExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  CCSEqualityExpression.prototype.copy = function() {
    return new CCSEqualityExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return CCSEqualityExpression;

})(CCSExpression);

ActionSets = {
  isActionInK: function(action) {
    return ActionSets.isActionInCom(action) && action.isSimpleAction();
  },
  isActionInCom: function(action) {
    return ActionSets.isActionInAct(action) && action.channel.name !== CCSInternalChannel;
  },
  isActionInAct: function(action) {
    return ActionSets.isActionInActPlus(action) && action.channel.name !== CCSExitChannel;
  },
  isActionInActPlus: function(action) {
    return !action.supportsValuePassing();
  },
  isActionInComVP: function(action) {
    return ActionSets.isActionInActVP(action) && action.channel.name !== CCSInternalChannel;
  },
  isActionInActVP: function(action) {
    return action.channel.name !== CCSExitChannel;
  },
  isActionInActVPPlus: function(action) {
    return true;
  }
};

Array.prototype.filterKSteps = function() {
  var filter;
  filter = function(step) {
    return ActionSets.isActionInK(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComSteps = function() {
  var filter;
  filter = function(step) {
    return ActionSets.isActionInCom(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActSteps = function() {
  var filter;
  filter = function(step) {
    return ActionSets.isActionInAct(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActPlusSteps = function() {
  var filter;
  filter = function(step) {
    return ActionSets.isActionInActPlus(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComVPSteps = function() {
  var filter;
  filter = function(step) {
    return ActionSets.isActionInComVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPSteps = function() {
  var filter;
  filter = function(step) {
    return ActionSets.isActionInActVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPPlusSteps = function() {
  return this;
};

String.prototype.replaceAll = function(needle, replacement) {
	var t = this
	var tt = this
	do {
		t = tt;
		tt = t.replace(needle, replacement);
	} while (t != tt);
	return t;
}

Array.prototype.concatChildren = function() {
	if (this.length == 0)
		return [];
	var target = this.concat([]);	// Copy
	var result = target.shift().concat([]);	// Result should always be a copy
	while (target.length > 0) {
		result = result.concat(target.shift());
	}
	return result;
}

Array.prototype.joinChildren = function(separator) {
	var result = [];
	var i = 0;
	while(true) {
		var joinTarget = [];
		for (var c = 0; c < this.length; c++) {
			if (this[c][i]) joinTarget.push(this[c][i]);
		}
		if (joinTarget.length == 0)
			break;
		result[i++] = joinTarget.join(separator);
	}
	return result;
};

Array.prototype.assertNonNull = function() {
  var e, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    e = this[_i];
    _results.push((function() {
      if (typeof e === "undefined" || e === null) {
        throw new Error("Null element found!");
      }
    })());
  }
  return _results;
};

CCSProcess.prototype.findApp = function(name) {
  var c;
  return ((function() {
    var _i, _len, _ref3, _results;
    _ref3 = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      c = _ref3[_i];
      _results.push(c.findApp(name));
    }
    return _results;
  }).call(this)).joinChildren();
};

CCSProcessApplication.prototype.findApp = function(name) {
  debugger;
  if (name === this.processName) {
    return [this];
  } else {
    return [];
  }
};

CCSPrefix.prototype.findApp = function() {
  return [];
};

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


CCSStep = (function() {
  function CCSStep() {
    var action, actionDetails, copyOnPerform, index, process, rule, s, substeps, _i, _len, _ref3;
    index = arguments[0], process = arguments[1], action = arguments[2], rule = arguments[3], copyOnPerform = arguments[4], actionDetails = arguments[5], substeps = 7 <= arguments.length ? __slice.call(arguments, 6) : [];
    this.index = index;
    this.process = process;
    this.action = action;
    this.rule = rule;
    this.copyOnPerform = copyOnPerform;
    this.actionDetails = actionDetails;
    this.substeps = substeps;
    _ref3 = this.substeps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      s = _ref3[_i];
      if (s === void 0 || s === null) {
        throw "substep must not be nil!";
      }
    }
    if (!this.actionDetails) {
      this.actionDetails = this.substeps.length === 1 ? this.substeps[0].actionDetails : "";
    }
  }

  CCSStep.prototype.getLeafProcesses = function() {
    var step;
    if (this.substeps.length === 0) {
      return [this.process];
    } else {
      return ((function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.substeps;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          step = _ref3[_i];
          _results.push(step.getLeafProcesses());
        }
        return _results;
      }).call(this)).concatChildren();
    }
  };

  CCSStep.prototype.perform = function() {
    return this.rule.performStep(this);
  };

  CCSStep.prototype.toString = function() {
    return this.action.toString() + (this.actionDetails.length > 0 ? " " + this.actionDetails : "");
  };

  CCSStep.prototype._getMutableProcess = function() {
    if (this.copyOnPerform) {
      return this.process.copy();
    } else {
      return this.process;
    }
  };

  return CCSStep;

})();

CCSBaseStep = (function(_super) {
  __extends(CCSBaseStep, _super);

  function CCSBaseStep(prefix, rule, copyOnPerform) {
    CCSBaseStep.__super__.constructor.call(this, 0, prefix, prefix.action, rule, copyOnPerform);
  }

  return CCSBaseStep;

})(CCSStep);

CCSInputStep = (function(_super) {
  __extends(CCSInputStep, _super);

  function CCSInputStep() {
    _ref3 = CCSInputStep.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  CCSInputStep.prototype.performWithInputValue = function(inputValue) {
    return this.rule.performStep(this, inputValue);
  };

  CCSInputStep.prototype.perform = function() {
    throw new Error("perform is not supported on input steps! Use performWithInputValue with an input value as argument instead!");
  };

  return CCSInputStep;

})(CCSBaseStep);

CCSBaseStep.prototype.performWithInputValue = function() {
  throw new Error("performWithInputValue is only allowed for input steps!");
};

CCSStep.prototype.performWithInputValue = function(inputValue) {
  if (this.substeps.length !== 1) {
    throw new Error("Forwarding of performWithInputValue only supported for linear step tree!");
  }
  return this.substeps[0].performWithInputValue(inputValue);
};

CCSPrefixRule = {
  getPossibleSteps: function(prefix, copyOnPerform) {
    if ((prefix != null ? prefix.action.isSimpleAction() : void 0) || !prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this, copyOnPerform)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.getProcess();
  }
};

CCSOutputRule = {
  getPossibleSteps: function(prefix, copyOnPerform) {
    if ((prefix != null ? prefix.action.isOutputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this, copyOnPerform)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.getProcess();
  }
};

CCSInputRule = {
  getPossibleSteps: function(prefix, copyOnPerform) {
    if ((prefix != null ? prefix.action.isInputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSInputStep(prefix, this, copyOnPerform)];
    } else {
      return [];
    }
  },
  performStep: function(step, inputValue) {
    var result;
    if (!inputValue) {
      throw new Error("Input value was not set!");
    }
    result = step._getMutableProcess().getProcess();
    result.replaceVariableWithValue(step.process.action.variable, inputValue);
    return result;
  }
};

CCSMatchRule = {
  getPossibleSteps: function(prefix, copyOnPerform) {
    if (prefix != null ? prefix.action.isMatchAction() : void 0) {
      return [new CCSBaseStep(prefix, this, copyOnPerform)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.getProcess();
  }
};

CCSChoiceLRule = {
  getPossibleSteps: function(choice, copyOnPerform) {
    var i, step, _i, _len, _ref4, _results;
    i = 0;
    _ref4 = choice.getLeft().getPossibleSteps(copyOnPerform).filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      step = _ref4[_i];
      _results.push(new CCSStep(i++, choice, step.action, this, copyOnPerform, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

CCSChoiceRRule = {
  getPossibleSteps: function(choice, copyOnPerform) {
    var i, step, _i, _len, _ref4, _results;
    i = 0;
    _ref4 = choice.getRight().getPossibleSteps(copyOnPerform).filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      step = _ref4[_i];
      _results.push(new CCSStep(i++, choice, step.action, this, copyOnPerform, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

CCSParLRule = {
  getPossibleSteps: function(parallel, copyOnPerform) {
    var i, step;
    if (!parallel._CCSParLRule) {
      i = 0;
      parallel._CCSParLRule = (function() {
        var _i, _len, _ref4, _results;
        _ref4 = parallel.getLeft().getPossibleSteps(copyOnPerform).filterActVPSteps();
        _results = [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          step = _ref4[_i];
          _results.push(new CCSStep(i++, parallel, step.action, this, copyOnPerform, null, step));
        }
        return _results;
      }).call(this);
    }
    return parallel._CCSParLRule;
  },
  performStep: function(step) {
    var res;
    res = step._getMutableProcess();
    res._CCSSyncRule = void 0;
    res._CCSParRRule = void 0;
    res._CCSParLRule = void 0;
    res.setLeft(step.substeps[0].perform());
    return res;
  }
};

CCSParRRule = {
  getPossibleSteps: function(parallel, copyOnPerform) {
    var i, step;
    if (!parallel._CCSParRRule) {
      i = 0;
      parallel._CCSParRRule = (function() {
        var _i, _len, _ref4, _results;
        _ref4 = parallel.getRight().getPossibleSteps(copyOnPerform).filterActVPSteps();
        _results = [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          step = _ref4[_i];
          _results.push(new CCSStep(i++, parallel, step.action, this, copyOnPerform, null, step));
        }
        return _results;
      }).call(this);
    }
    return parallel._CCSParRRule;
  },
  performStep: function(step) {
    var res;
    res = step._getMutableProcess();
    res._CCSSyncRule = void 0;
    res._CCSParRRule = void 0;
    res._CCSParLRule = void 0;
    res.setRight(step.substeps[0].perform());
    return res;
  }
};

CCSSyncRule = {
  filterStepsSyncableWithStep: function(step, steps) {
    var result, s, _i, _len;
    result = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      s = steps[_i];
      if (s.action.isSyncableWithAction(step.action)) {
        result.push(s);
      }
    }
    return result;
  },
  getPossibleSteps: function(parallel, copyOnPerform) {
    var c, l, left, r, result, right, _i, _j, _len, _len1, _right;
    if (!parallel._CCSSyncRule) {
      left = parallel.getLeft().getPossibleSteps(copyOnPerform);
      right = parallel.getRight().getPossibleSteps(copyOnPerform);
      result = [];
      c = 0;
      for (_i = 0, _len = left.length; _i < _len; _i++) {
        l = left[_i];
        _right = CCSSyncRule.filterStepsSyncableWithStep(l, right);
        for (_j = 0, _len1 = _right.length; _j < _len1; _j++) {
          r = _right[_j];
          result.push(new CCSStep(c++, parallel, new CCSInternalActionCreate(CCSInternalChannel), this, copyOnPerform, "" + (l.action.isOutputAction() ? l.action.transferDescription() : r.action.transferDescription()), l, r));
        }
      }
      parallel._CCSSyncRule = result;
    }
    return parallel._CCSSyncRule;
  },
  performStep: function(step) {
    var inp, left, out, prefix, res, right;
    res = step._getMutableProcess();
    res._CCSSyncRule = void 0;
    res._CCSParRRule = void 0;
    res._CCSParLRule = void 0;
    inp = null;
    out = null;
    left = null;
    right = null;
    prefix = step.substeps[0].getLeafProcesses()[0];
    if (prefix.action.supportsValuePassing()) {
      if (prefix.action.isInputAction()) {
        inp = prefix;
        out = step.substeps[1].getLeafProcesses()[0];
        left = step.substeps[0].performWithInputValue(out.action.expression.evaluate());
        right = step.substeps[1].perform();
      } else {
        out = prefix;
        inp = step.substeps[1].getLeafProcesses()[0];
        left = step.substeps[0].perform();
        right = step.substeps[1].performWithInputValue(out.action.expression.evaluate());
      }
    } else {
      left = step.substeps[0].perform();
      right = step.substeps[1].perform();
    }
    res.setLeft(left);
    res.setRight(right);
    return res;
  }
};

CCSResRule = {
  shouldRestrictChannel: function(chan, restr) {
    if (chan === CCSInternalChannel || chan === CCSExitChannel) {
      return false;
    }
    if (restr.length === 0) {
      return false;
    }
    if (restr[0] === "*") {
      return restr.indexOf(chan) === -1;
    } else {
      return restr.indexOf(chan) !== -1;
    }
  },
  getPossibleSteps: function(restriction, copyOnPerform) {
    var c, result, step, steps, _i, _len;
    steps = restriction.getProcess().getPossibleSteps(copyOnPerform).filterActVPPlusSteps();
    result = [];
    c = 0;
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      if (!this.shouldRestrictChannel(step.action.channel.name, restriction.restrictedChannels)) {
        result.push(new CCSStep(c++, restriction, step.action, this, copyOnPerform, null, step));
      }
    }
    return result;
  },
  performStep: function(step) {
    var res;
    res = step._getMutableProcess();
    res.setProcess(step.substeps[0].perform());
    return res;
  }
};

CCSCondRule = {
  getPossibleSteps: function(condition, copyOnPerform) {
    if (CCSCondRule.DEBUGGER) {
      debugger;
    }
    if (condition.expression.evaluate() === "1") {
      return condition.getProcess().getPossibleSteps(copyOnPerform).filterActVPPlusSteps();
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

CCSExitRule = {
  getPossibleSteps: function(exit, copyOnPerform) {
    return [new CCSStep(0, exit, new CCSInternalActionCreate(CCSExitChannel), this, copyOnPerform)];
  },
  performStep: function(step) {
    return new CCSStop();
  }
};

CCSSyncExitRule = {
  getPossibleSteps: function(parallel, copyOnPerform) {
    var c, filter, l, left, r, result, right, _i, _j, _len, _len1;
    filter = function(step) {
      return step.action.channel.name === CCSExitChannel;
    };
    left = parallel.getLeft().getPossibleSteps(copyOnPerform).filter(filter);
    right = parallel.getRight().getPossibleSteps(copyOnPerform).filter(filter);
    c = 0;
    result = [];
    for (_i = 0, _len = left.length; _i < _len; _i++) {
      l = left[_i];
      for (_j = 0, _len1 = right.length; _j < _len1; _j++) {
        r = right[_j];
        result.push(new CCSStep(c++, parallel, CCSInternalActionCreate(CCSExitChannel), this, copyOnPerform, "" + (l.action.isOutput() ? l.action.transferDescription() : r.action.transferDescription()), l, r));
      }
    }
    return result;
  },
  performStep: function(step) {
    return CCSSyncRule.performStep(step);
  }
};

CCSSeq1Rule = {
  getPossibleSteps: function(sequence, copyOnPerform) {
    var c, step, _i, _len, _ref4, _results;
    c = 0;
    _ref4 = sequence.getLeft().getPossibleSteps(copyOnPerform).filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      step = _ref4[_i];
      _results.push(new CCSStep(c++, sequence, step.action, this, copyOnPerform, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    var res;
    res = step._getMutableProcess();
    res.setLeft(step.substeps[0].perform());
    return res;
  }
};

CCSSeq2Rule = {
  getPossibleSteps: function(sequence, copyOnPerform) {
    var c, filter, result, rho, rhos, _i, _len;
    filter = function(step) {
      return step.action.channel.name === CCSExitChannel;
    };
    rhos = sequence.getLeft().getPossibleSteps(copyOnPerform).filter(filter);
    result = [];
    c = 0;
    for (_i = 0, _len = rhos.length; _i < _len; _i++) {
      rho = rhos[_i];
      result.push(new CCSStep(c++, sequence, new CCSInternalActionCreate(CCSInternalChannel), this, copyOnPerform, "" + CCSExitChannel, rho));
    }
    return result;
  },
  performStep: function(step) {
    return step.process.getRight();
  }
};

CCSRecRule = {
  getPossibleSteps: function(application, copyOnPerform) {
    var c, step, steps, _i, _len, _results;
    steps = application.getProcess().getPossibleSteps(copyOnPerform);
    c = 0;
    _results = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      _results.push(new CCSStep(c++, application, step.action, this, copyOnPerform, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};
// Generated by CoffeeScript 1.6.3
/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var exports;

exports = module && module.exports ? module.exports : {};

exports["parser"] = CCSParser;

exports["internalChannelName"] = CCSInternalChannel;

exports["exitChannelName"] = CCSExitChannel;

exports["typeUnknown"] = CCSTypeUnknown;

exports["typeChannel"] = CCSTypeChannel;

exports["typeValue"] = CCSTypeValue;

exports["getMostGeneralType"] = CCSGetMostGeneralType;

exports["CCS"] = CCS;

exports["ProcessDefinition"] = CCSProcessDefinition;

exports["Process"] = CCSProcess;

exports["Stop"] = CCSStop;

exports["Exit"] = CCSExit;

exports["ProcessApplication"] = CCSProcessApplication;

exports["Prefix"] = CCSPrefix;

exports["Condition"] = CCSCondition;

exports["Choice"] = CCSChoice;

exports["Parallel"] = CCSParallel;

exports["Sequence"] = CCSSequence;

exports["Restriction"] = CCSRestriction;

exports["Channel"] = CCSChannel;

exports["Action"] = CCSAction;

exports["SimpleAction"] = CCSSimpleAction;

exports["Input"] = CCSInput;

exports["Output"] = CCSOutput;

exports["CCSExpression"] = CCSExpression;

exports["ConstantExpression"] = CCSConstantExpression;

exports["VariableExpression"] = CCSVariableExpression;

exports["AdditiveExpression"] = CCSAdditiveExpression;

exports["MultiplicativeExpression"] = CCSMultiplicativeExpression;

exports["ConcatenatingExpression"] = CCSConcatenatingExpression;

exports["RelationalExpression"] = CCSRelationalExpression;

exports["EqualityExpression"] = CCSEqualityExpression;

exports["actionSets"] = ActionSets;

exports["Step"] = CCSStep;

exports["BaseStep"] = CCSBaseStep;

exports["InputStep"] = CCSInputStep;

exports["PrefixRule"] = CCSPrefixRule;

exports["OutputRule"] = CCSOutputRule;

exports["InputRule"] = CCSInputRule;

exports["MatchRule"] = CCSMatchRule;

exports["ChoiceLRule"] = CCSChoiceLRule;

exports["ChoiceRRule"] = CCSChoiceRRule;

exports["ParLRule"] = CCSParLRule;

exports["ParRRule"] = CCSParRRule;

exports["SyncRule"] = CCSSyncRule;

exports["ResRule"] = CCSResRule;

exports["CondRule"] = CCSCondRule;

exports["ExitRule"] = CCSExitRule;

exports["SyncExitRule"] = CCSSyncExitRule;

exports["Seq1Rule"] = CCSSeq1Rule;

exports["Seq2Rule"] = CCSSeq2Rule;

exports["RecRule"] = CCSRecRule;

exports["Executor"] = CCSExecutor;
