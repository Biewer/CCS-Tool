intchan[3] read;
intchan[3] write;

boolchan signalPlatzFrei; 
boolchan waitPlatzFrei; 
boolchan wantPlatzFrei; 
boolchan signalDatumDa; 
boolchan waitDatumDa; 
boolchan wantDatumDa; 

void cell ( intchan rd , intchan wt , int init ) {
   int v = init ; 
   while ( true ) {
      select {
         case rd <! v: 
            println (".");
         case v = <? wt: 
            println (".");
      }
   }
}

void initialize(){
   start cell(read[0],write[0],0); 
   start cell(read[1],write[1],0);
   start cell(read[2],write[2],0);
 
   start chillDaemon(wantDatumDa,waitDatumDa,signalDatumDa,"Datum");
   start chillDaemon(wantPlatzFrei,waitPlatzFrei,signalPlatzFrei,"Platz");
}

struct Kanal3{ 
   int used = 0; 
   boolchan1 guard; 

   void mpLock(boolchan1 g){
      g <! true;
   } 
   void mpUnlock(boolchan1 g){
      <? g;
   }

   void put(int x){
      mpLock(guard);
      while (!(used < 3)){
         wantPlatzFrei <! true;
         mpUnlock(guard);
         <? waitPlatzFrei; 
         mpLock(guard);  
      } 
      write[used] <! x;
      used++;   
      signalDatumDa <! true;
      mpUnlock(guard);
   }

   int get(){
      mpLock(guard);
      while (!(used > 0)){
         wantDatumDa <! true;
         mpUnlock(guard);
         <? waitDatumDa; 
         mpLock(guard);  
      } 
      int temp = <? read[0];
      used--;
      for (int j=1; j <= used;j++){
         write[j-1] <! (<? read[j]);
      }
      signalPlatzFrei <! true;
      mpUnlock(guard);
      return temp;
   }
}

void chillDaemon(boolchan want, boolchan waIt, boolchan sIgnal, string name){
   int count = 0; 
   while (true) {
      select{
         case <? want:{
            count++;
            println("Einer mehr wartet auf " + name + ".");
         }
         case <? sIgnal: {
             if (count != 0){
                count--; 
                waIt <! false; 
                println("Einer weniger wartet auf " + name +".");
             }  
         }
      }
   } 
} 

Kanal3 k;

void produce(int id){ 
   while (true) {
       println("Erzeuger " + id + " hat " + id + " produziert.");
       k.put(id);
   }
}
  
void consume(string name){ 
   while (true) {
       int c = k.get();
       println(" Verbraucher " + name + " hat " + c + " konsumiert.");
   }
}

mainAgent{
   initialize();

   start produce(1); // Ein Erzeuger. 
   start produce(2); // Zwei Erzeuger. 
   start produce(3); // Drei Erzeuger. 
   start produce(4); // Vier Erzeuger. 
   start produce(5); // Fuenf Erzeuger. 
   
   start consume("A"); // Ein Verbraucher. 
   start consume("B"); // Zwei Verbraucher. 
   start consume("C"); // Drei Verbraucher. 
   start consume("D"); // Vier Verbraucher. 
}

