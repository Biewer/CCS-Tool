// Generated by CoffeeScript 1.6.2
var Action, ActionSets, CCS, CCSBaseStep, CCSExitChannel, CCSInternalChannel, CCSStep, Choice, ChoiceLRule, ChoiceRRule, CondRule, Condition, Exit, ExitRule, Expression, Input, InputRule, Match, MatchRule, Output, OutputRule, ParLRule, ParRRule, Parallel, Prefix, PrefixRule, Process, ProcessApplication, ProcessDefinition, ResRule, Restriction, Seq1Rule, Seq2Rule, Sequence, SimpleAction, Stop, SyncExitRule, SyncRule, _ref, _ref1, _ref2,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CCSInternalChannel = "\u03c4";

CCSExitChannel = "\u03b4";

({
  emptyEnvironment: function(varName) {
    throw 'Unbound identifier "' + varName + '"!';
  }
});

CCS = (function() {
  function CCS(processDefinitions, system) {
    this.processDefinitions = processDefinitions;
    this.system = system;
  }

  CCS.prototype.getProcessDefinitionAtIndex = function(i) {
    return this.processDefinitions[i];
  };

  CCS.prototype.getProcessDefinitionCount = function() {
    return this.processDefinitions.length;
  };

  CCS.prototype.getSystem = function() {
    return this.system;
  };

  CCS.prototype.getPossibleSteps = function() {
    return this.system.getPossibleSteps();
  };

  CCS.prototype.toString = function() {
    var name, process;

    return "" + (((function() {
      var _ref, _results;

      _ref = this.processDefinitions;
      _results = [];
      for (name in _ref) {
        process = _ref[name];
        _results.push(process.toString());
      }
      return _results;
    }).call(this)).join("")) + "\n" + (this.system.toString());
  };

  return CCS;

})();

ProcessDefinition = (function() {
  function ProcessDefinition(name, process, params) {
    this.name = name;
    this.process = process;
    this.params = params;
  }

  ProcessDefinition.prototype.getName = function() {
    return this.name;
  };

  ProcessDefinition.prototype.getProcess = function() {
    return this.process;
  };

  ProcessDefinition.prototype.toString = function() {
    var result;

    result = this.name;
    if (this.params != null) {
      result += "[" + (this.params.join(", ")) + "]";
    }
    result += " := " + (this.process.toString()) + "\n";
    return result;
  };

  return ProcessDefinition;

})();

Process = (function() {
  function Process() {
    var subprocesses;

    subprocesses = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.subprocesses = subprocesses;
    this.isTemplate = false;
  }

  Process.prototype.assertNotTemplate = function() {
    if (this.isTemplate) {
      throw "Internal Inconsistency: Expected a non template process!";
    }
  };

  Process.prototype.replaceVariableWithValue = function(varName, value) {
    var p, _i, _len, _ref, _results;

    this.assertNotTemplate();
    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.replaceVariableWithValue(varName, value));
    }
    return _results;
  };

  Process.prototype.stringForSubprocess = function(process) {
    if ((this.getPrecedence != null) && (process.getPrecedence != null) && process.getPrecedence() < this.getPrecedence()) {
      return "(" + (process.toString()) + ")";
    } else {
      return "" + (process.toString());
    }
  };

  Process.prototype.getApplicapleRules = function() {
    return [];
  };

  Process.prototype.getPossibleSteps = function() {
    var rule;

    return ((function() {
      var _i, _len, _ref, _results;

      _ref = this.getApplicapleRules();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        _results.push(rule.getPossibleSteps(this));
      }
      return _results;
    }).call(this)).concatChildren();
  };

  return Process;

})();

Restriction = (function(_super) {
  __extends(Restriction, _super);

  function Restriction(process, restrictedActions) {
    this.process = process;
    this.restrictedActions = restrictedActions;
    Restriction.__super__.constructor.call(this, this.process);
  }

  Restriction.prototype.getProcess = function() {
    return this.process;
  };

  Restriction.prototype.getRestrictedActions = function() {
    return this.restrictedActions;
  };

  Restriction.prototype.getPrecedence = function() {
    return 1;
  };

  Restriction.prototype.getApplicapleRules = function() {
    return [ResRule];
  };

  Restriction.prototype.toString = function() {
    var a;

    return "" + (this.stringForSubprocess(this.process)) + " \\ {" + (((function() {
      var _i, _len, _ref, _results;

      _ref = this.restrictedActions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        _results.push(a.toString());
      }
      return _results;
    }).call(this)).join(", ")) + "}";
  };

  return Restriction;

})(Process);

Sequence = (function(_super) {
  __extends(Sequence, _super);

  function Sequence(left, right) {
    this.left = left;
    this.right = right;
    Sequence.__super__.constructor.call(this, this.left, this.right);
  }

  Sequence.prototype.getLeft = function() {
    return this.left;
  };

  Sequence.prototype.getRight = function() {
    return this.right;
  };

  Sequence.prototype.getPrecedence = function() {
    return 3;
  };

  Sequence.prototype.getApplicapleRules = function() {
    return [Seq1Rule, Seq2Rule];
  };

  Sequence.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.left)) + " ; " + (this.stringForSubprocess(this.right));
  };

  return Sequence;

})(Process);

Parallel = (function(_super) {
  __extends(Parallel, _super);

  function Parallel(left, right) {
    this.left = left;
    this.right = right;
    Parallel.__super__.constructor.call(this, this.left, this.right);
  }

  Parallel.prototype.getLeft = function() {
    return this.left;
  };

  Parallel.prototype.getRight = function() {
    return this.right;
  };

  Parallel.prototype.getPrecedence = function() {
    return 6;
  };

  Parallel.prototype.getApplicapleRules = function() {
    return [ParLRule, ParRRule, SyncRule, SyncExitRule];
  };

  Parallel.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.left)) + " | " + (this.stringForSubprocess(this.right));
  };

  return Parallel;

})(Process);

Choice = (function(_super) {
  __extends(Choice, _super);

  function Choice(left, right) {
    this.left = left;
    this.right = right;
    Choice.__super__.constructor.call(this, this.left, this.right);
  }

  Choice.prototype.getLeft = function() {
    return this.left;
  };

  Choice.prototype.getRight = function() {
    return this.right;
  };

  Choice.prototype.getPrecedence = function() {
    return 9;
  };

  Choice.prototype.getApplicapleRules = function() {
    return [ChoiceLRule, ChoiceRRule];
  };

  Choice.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.left)) + " + " + (this.stringForSubprocess(this.right));
  };

  return Choice;

})(Process);

Prefix = (function(_super) {
  __extends(Prefix, _super);

  function Prefix(action, process) {
    this.action = action;
    this.process = process;
    Prefix.__super__.constructor.call(this, this.process);
  }

  Prefix.prototype.getAction = function() {
    return this.action;
  };

  Prefix.prototype.getProcess = function() {
    return this.process;
  };

  Prefix.prototype.getPrecedence = function() {
    return 12;
  };

  Prefix.prototype.getApplicapleRules = function() {
    return [PrefixRule, OutputRule, InputRule, MatchRule];
  };

  Prefix.prototype.toString = function() {
    return "" + this.action + "." + (this.stringForSubprocess(this.process));
  };

  return Prefix;

})(Process);

Condition = (function(_super) {
  __extends(Condition, _super);

  function Condition(expression, process) {
    this.expression = expression;
    this.process = process;
    Condition.__super__.constructor.call(this, this.process);
  }

  Condition.prototype.getExpression = function() {
    return this.expression;
  };

  Condition.prototype.getProcess = function() {
    return this.process;
  };

  Condition.prototype.getPrecedence = function() {
    return 12;
  };

  Condition.prototype.getApplicapleRules = function() {
    return [CondRule];
  };

  Condition.prototype.toString = function() {
    return "when (" + (this.expression()) + ") " + (this.stringForSubprocess(this.process));
  };

  return Condition;

})(Process);

Action = (function() {
  function Action(channel) {
    this.channel = channel;
    if (this.channel === "i") {
      if (!this.isSimpleAction()) {
        throw "Internal channel i is only allowed as simple action!";
      }
      this.channel = CCSInternalChannel;
    } else if (this.channel === "e") {
      if (!this.isSimpleAction()) {
        throw "Exit channel e is only allowed as simple action!";
      }
      this.channel = CCSExitChannel;
    }
  }

  Action.prototype.getChannel = function() {
    return this.channel;
  };

  Action.prototype.isSimpleAction = function() {
    return false;
  };

  Action.prototype.isInputAction = function() {
    return false;
  };

  Action.prototype.isMatchAction = function() {
    return false;
  };

  Action.prototype.isOutputAction = function() {
    return false;
  };

  Action.prototype.toString = function() {
    return this.channel;
  };

  Action.prototype.isSyncableWithAction = function(action) {
    return false;
  };

  return Action;

})();

SimpleAction = (function(_super) {
  __extends(SimpleAction, _super);

  function SimpleAction() {
    _ref = SimpleAction.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SimpleAction.prototype.isSimpleAction = function() {
    return true;
  };

  return SimpleAction;

})(Action);

Input = (function(_super) {
  __extends(Input, _super);

  function Input(channel, variable) {
    this.variable = variable;
    Input.__super__.constructor.call(this, channel);
  }

  Input.prototype.getVariable = function() {
    return this.variable;
  };

  Input.prototype.isInputAction = function() {
    return true;
  };

  Input.prototype.supportsValuePassing = function() {
    return typeof this.variable === "string" && this.variable.length > 0;
  };

  Input.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel === this.channel && action.supportsValuePassing() === this.supportsValuePassing();
  };

  Input.prototype.toString = function() {
    return "" + Input.__super__.toString.apply(this, arguments) + "?" + this.variable;
  };

  return Input;

})(Action);

Match = (function(_super) {
  __extends(Match, _super);

  function Match(channel, expression) {
    this.expression = expression;
    Match.__super__.constructor.call(this, channel);
  }

  Match.prototype.getExpression = function() {
    return this.expression;
  };

  Match.prototype.isMatchAction = function() {
    return true;
  };

  Match.prototype.supportsValuePassing = function() {
    return true;
  };

  Match.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel === this.channel && action.supportsValuePassing() && action.expression.evaluate() === this.expression.evaluate();
  };

  Match.prototype.toString = function() {
    return "" + Match.__super__.toString.apply(this, arguments) + "?=" + (this.expression.toString());
  };

  return Match;

})(Action);

Output = (function(_super) {
  __extends(Output, _super);

  function Output(channel, expression) {
    this.expression = expression;
    Output.__super__.constructor.call(this, channel);
  }

  Output.prototype.getExpression = function() {
    return this.expression;
  };

  Output.prototype.isOutputAction = function() {
    return true;
  };

  Output.prototype.supportsValuePassing = function() {
    return typeof this.expression === "string" && this.expression.length > 0;
  };

  Output.prototype.isSyncableWithAction = function(action) {
    if ((action != null ? action.isInputAction() : void 0) || action.isMatchAction()) {
      return action.isSyncableWithAction(this);
    } else {
      return false;
    }
  };

  Output.prototype.toString = function() {
    return "" + Output.__super__.toString.apply(this, arguments) + "!" + (this.expression.toString());
  };

  return Output;

})(Action);

Expression = (function() {
  function Expression(evaluationCode, userCode) {
    this.evaluationCode = evaluationCode;
    this.userCode = userCode;
  }

  Expression.prototype.evaluateCodeInEnvironment = function(code, env) {
    return (function(__env,__code){return eval(__code)})(env,code);
  };

  Expression.prototype.getExpressionString = function(env) {
    return this.evaluateCodeInEnvironment(this.userCode, env);
  };

  Expression.prototype.evaluate = function() {
    return this.evaluateCodeInEnvironment(this.evaluationCode, env);
  };

  Expression.prototype.toString = function() {
    return this.getExpressionString(function(a) {
      return a;
    });
  };

  return Expression;

})();

ProcessApplication = (function(_super) {
  __extends(ProcessApplication, _super);

  function ProcessApplication(process, valuesToPass) {
    this.process = process;
    this.valuesToPass = valuesToPass != null ? valuesToPass : null;
  }

  ProcessApplication.prototype.getProcess = function() {
    return this.process;
  };

  ProcessApplication.prototype.getValuesToPass = function() {
    return this.valuesToPass;
  };

  ProcessApplication.prototype.getPrecedence = function() {
    return 12;
  };

  ProcessApplication.prototype.toString = function() {
    var e, result;

    result = this.process;
    if (this.valuesToPass) {
      result += "[" + (((function() {
        var _i, _len, _ref1, _results;

        _ref1 = this.valuesToPass;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          e = _ref1[_i];
          _results.push(e.toString());
        }
        return _results;
      }).call(this)).join(", ")) + "]";
    }
    return result;
  };

  return ProcessApplication;

})(Process);

Stop = (function(_super) {
  __extends(Stop, _super);

  function Stop() {
    _ref1 = Stop.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Stop.prototype.getPrecedence = function() {
    return 12;
  };

  Stop.prototype.toString = function() {
    return "0";
  };

  return Stop;

})(Process);

Exit = (function(_super) {
  __extends(Exit, _super);

  function Exit() {
    _ref2 = Exit.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  Exit.prototype.getPrecedence = function() {
    return 12;
  };

  Exit.prototype.toString = function() {
    return "1";
  };

  Exit.prototype.getApplicapleRules = function() {
    return [ExitRule];
  };

  return Exit;

})(Process);

ActionSets = {
  isActionInK: function(action) {
    return ActionSets.isActionInCom(action) && action.isSimpleAction();
  },
  isActionInCom: function(action) {
    return ActionSets.isActionInAct(action) && action.channel !== CCSInternalChannel;
  },
  isActionInAct: function(action) {
    return ActionSets.isActionInActPlus(action) && action.channel !== CCSExitChannel;
  },
  isActionInActPlus: function(action) {
    return !action.supportsValuePassing();
  },
  isActionInComVP: function(action) {
    return ActionSets.isActionInActVP(action) && action.channel !== CCSInternalChannel;
  },
  isActionInActVP: function(action) {
    return action.channel !== CCSExitChannel;
  },
  isActionInActVPPlus: function(action) {
    return true;
  }
};

Array.prototype.filterKSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInK(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInCom(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInAct(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActPlusSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInActPlus(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComVPSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInComVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInActVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPPlusSteps = function() {
  return this;
};

String.prototype.replaceAll = function(needle, replacement) {
	var t = this
	var tt = this
	do {
		t = tt;
		tt = t.replace(needle, replacement);
	} while (t != tt);
	return t;
}

Array.prototype.concatChildren = function() {
	if (this.length == 0)
		return [];
	var result = this.shift().concat([]);	// Result should always be a copy
	while (this.length > 0) {
		result = result.concat(this.shift());
	}
	return result;
}

Array.prototype.joinChildren = function(separator) {
	var result = [];
	var i = 0;
	while(true) {
		var joinTarget = [];
		for (var c = 0; c < this.length; c++) {
			if (this[c][i]) joinTarget.push(this[c][i]);
		}
		if (joinTarget.length == 0)
			break;
		result[i++] = joinTarget.join(separator);
	}
	return result;
};

CCSStep = (function() {
  function CCSStep() {
    var action, actionDetails, index, s, substeps, _i, _len, _ref3;

    index = arguments[0], action = arguments[1], actionDetails = arguments[2], substeps = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.index = index;
    this.action = action;
    this.actionDetails = actionDetails;
    this.substeps = substeps;
    _ref3 = this.substeps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      s = _ref3[_i];
      if (s === void 0 || s === null) {
        throw "substep must not be nil!";
      }
    }
    if (!this.actionDetails) {
      this.actionDetails = this.substeps.length === 1 ? this.substeps[0].actionDetails : "";
    }
  }

  CCSStep.prototype.getPrefixes = function() {
    var step;

    return ((function() {
      var _i, _len, _ref3, _results;

      _ref3 = this.substeps;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        step = _ref3[_i];
        _results.push(step.getPrefixes());
      }
      return _results;
    }).call(this)).concatChildren();
  };

  CCSStep.prototype.toString = function() {
    return this.action.toString() + (this.actionDetails.length > 0 ? " " + this.actionDetails : "");
  };

  return CCSStep;

})();

CCSBaseStep = (function(_super) {
  __extends(CCSBaseStep, _super);

  function CCSBaseStep(prefix) {
    this.prefix = prefix;
    CCSBaseStep.__super__.constructor.call(this, 0, this.prefix.action);
  }

  CCSBaseStep.prototype.getPrefixes = function() {
    return [this.prefix];
  };

  return CCSBaseStep;

})(CCSStep);

PrefixRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isSimpleAction() : void 0) || !prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix)];
    } else {
      return [];
    }
  }
};

OutputRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isOutputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix)];
    } else {
      return [];
    }
  }
};

InputRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isInputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix)];
    } else {
      return [];
    }
  }
};

MatchRule = {
  getPossibleSteps: function(prefix) {
    if (prefix != null ? prefix.action.isMatchAction() : void 0) {
      return [new CCSBaseStep(prefix)];
    } else {
      return [];
    }
  }
};

ChoiceLRule = {
  getPossibleSteps: function(choice) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = choice.left.getPossibleSteps().filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, step.action, null, step));
    }
    return _results;
  }
};

ChoiceRRule = {
  getPossibleSteps: function(choice) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = choice.right.getPossibleSteps().filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, step.action, null, step));
    }
    return _results;
  }
};

ParLRule = {
  getPossibleSteps: function(parallel) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = parallel.left.getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, step.action, null, step));
    }
    return _results;
  }
};

ParRRule = {
  getPossibleSteps: function(parallel) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = parallel.right.getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, step.action, null, step));
    }
    return _results;
  }
};

SyncRule = {
  filterStepsSyncableWithStep: function(step, steps) {
    var result, s, _i, _len;

    result = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      s = steps[_i];
      if (s.action.isSyncableWithAction(step.action)) {
        result.push(s);
      }
    }
    return result;
  },
  getPossibleSteps: function(parallel) {
    var c, l, left, r, result, right, _i, _j, _len, _len1, _right;

    left = parallel.left.getPossibleSteps();
    right = parallel.right.getPossibleSteps();
    result = [];
    c = 0;
    for (_i = 0, _len = left.length; _i < _len; _i++) {
      l = left[_i];
      _right = SyncRule.filterStepsSyncableWithStep(l, right);
      for (_j = 0, _len1 = _right.length; _j < _len1; _j++) {
        r = _right[_j];
        result.push(new CCSStep(c++, new SimpleAction(CCSInternalChannel), "[" + (l.toString()) + ", " + (r.toString()) + "]", l, r));
      }
    }
    return result;
  }
};

ResRule = {
  getPossibleSteps: function(restriction) {
    var a, restr, result, step, steps, _i, _len;

    steps = restriction.process.getPossibleSteps().filterActVPPlusSteps();
    result = [];
    restr = (function() {
      var _i, _len, _ref3, _results;

      _ref3 = restriction.restrictedActions;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        a = _ref3[_i];
        _results.push(a.channel);
      }
      return _results;
    })();
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      if (restr.indexOf(step.action.channel) === -1) {
        result.push(step);
      }
    }
    return result;
  }
};

CondRule = {
  getPossibleSteps: function(condition) {
    if (condition.expression.evaluate()) {
      return condition.process.getPossibleSteps().filterActVPPlusSteps();
    } else {
      return [];
    }
  }
};

ExitRule = {
  getPossibleSteps: function(exit) {
    return [new CCSStep(0, new SimpleAction(CCSExitChannel))];
  }
};

SyncExitRule = {
  getPossibleSteps: function(parallel) {
    var c, filter, l, left, r, result, right, _i, _j, _len, _len1;

    filter = function(step) {
      return step.action.channel === CCSExitChannel;
    };
    left = parallel.left.getPossibleSteps().filter(filter);
    right = parallel.right.getPossibleSteps().filter(filter);
    c = 0;
    result = [];
    for (_i = 0, _len = left.length; _i < _len; _i++) {
      l = left[_i];
      for (_j = 0, _len1 = right.length; _j < _len1; _j++) {
        r = right[_j];
        result.push(new CCSStep(c++, new SimpleAction(CCSExitChannel), "[" + (l.toString()) + ", " + (r.toString()) + "]", l, r));
      }
    }
    return result;
  }
};

Seq1Rule = {
  getPossibleSteps: function(sequence) {
    return sequence.left.getPossibleSteps().filterActVPSteps();
  }
};

Seq2Rule = {
  getPossibleSteps: function(sequence) {
    var c, filter, result, rho, rhos, _i, _len;

    filter = function(step) {
      return step.action.channel === CCSExitChannel;
    };
    rhos = sequence.left.getPossibleSteps().filter(filter);
    result = [];
    c = 0;
    for (_i = 0, _len = rhos.length; _i < _len; _i++) {
      rho = rhos[_i];
      result.push(new CCSStep(c++, new SimpleAction(CCSInternalChannel), "[" + CCSExitChannel + "]", rho));
    }
    return result;
  }
};
