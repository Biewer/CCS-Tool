// Generated by CoffeeScript 1.6.3
/* ###
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
### */;
var Jasmine, NJSMain, NJSReadline, NJSReadlineOptions, NJSSharedMain;

NJSReadline = require("readline");

Jasmine = require("jasmine-node");

NJSReadlineOptions = {
  input: process.stdin,
  output: process.stdout
};

NJSMain = (function() {
  function NJSMain() {
    var cmd;
    cmd = process.argv[2];
    if (cmd === "-help" || cmd === "-h") {
      this.printHelp();
    } else if (cmd === "-test" || cmd === "-t") {
      this.performTests(process.argv.slice(3));
    } else {
      this.printSummary();
    }
  }

  NJSMain.prototype.performTests = function(paths) {
    var code, coffee, comps, file, fs, info, path, _i, _len, _results;
    fs = require("fs");
    coffee = require("coffee-script");
    _results = [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      path = paths[_i];
      info = fs.statSync(path);
      if (!info) {
        _results.push(console.warn("WARNING: File " + path + " not found!"));
      } else if (info.isDirectory()) {
        _results.push(this.performTests((function() {
          var _j, _len1, _ref, _results1;
          _ref = fs.readdirSync(path);
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            file = _ref[_j];
            _results1.push("" + path + "/" + file);
          }
          return _results1;
        })()));
      } else if (info.isFile()) {
        code = fs.readFileSync(path, "utf8");
        comps = path.split(".");
        if (comps[comps.length - 1] === "coffee") {
          _results.push(coffee.run(code));
        } else {
          _results.push(eval(code));
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  NJSMain.prototype.printHelp = function() {
    console.log("First line of help");
    return console.log("Second line of help?");
  };

  NJSMain.prototype.printSummary = function() {
    return console.log("ToDo");
  };

  return NJSMain;

})();

NJSSharedMain = new NJSMain();
