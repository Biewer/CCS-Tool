// Generated by CoffeeScript 1.6.3
/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var $$, UI, UIAppController, UICCSConsole, UICCSEditor, UICCSHistory, UIClickRecognizer, UIConsole, UIEditorState, UIError, UIEventRecognizer, UIExecutor, UIID, UILoad, UILog, UIPseuCoEditor, UIPseuCoHack, UITabBar, UIWarn, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

UIEditorState = {
  possible: 0,
  invalid: 1,
  valid: 2
};

UIID = {
  fileLabel: null,
  fileTitle: null,
  fileType: null,
  fileDropDownButton: null,
  fileAdd: null,
  pseucoField: null,
  pseucoJSField: null,
  hresizer: null,
  ccsField: null,
  vresizer: null,
  tabBar: null,
  console: null
};

UI = {
  console: null,
  toolTabBar: null,
  history: null,
  executor: null,
  app: null
};

$$ = function(id) {
  return UIID[id][0];
};

UILoad = function() {
  UIID = {
    fileLabel: $("#fileLabel"),
    fileTitle: $("#fileTitle"),
    fileType: $("#fileType"),
    fileDropDownButton: $("#fileDropDownButton"),
    fileAdd: $("#fileAdd"),
    pseucoField: $("#pseuco_field"),
    pseucoJSField: $("#pseucojs_field"),
    hresizer: $("#hresizer"),
    ccsField: $("#ccs_field"),
    vresizer: $("#vresizer"),
    tabBar: $("#tabBar"),
    tabContent: $("#tabContent"),
    console: $("#console"),
    history: $("#history"),
    runButton: $("#ccsRun")
  };
  UI.console = new UIConsole($$("console"));
  UI.toolTabBar = new UITabBar($$("tabBar"), $$("tabContent"));
  UI.history = new UICCSHistory($$("history"));
  UI.executor = new UIExecutor($$("runButton"));
  UI.pseuCoEditor = new UIPseuCoEditor($$("pseucoField"));
  UI.ccsEditor = new UICCSEditor($$("ccsField"));
  return UI.app = new UIAppController(UI.pseuCoEditor, UI.ccsEditor, UI.executor, UI.console, UI.history);
};

UILog = function(msg) {
  return UI.console.log(msg);
};

UIWarn = function(msg) {
  return UI.console.warn(msg);
};

UIError = function(msg) {
  return UI.console.error(msg);
};

registerLoadCallback(UILoad);

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


UITabBar = (function() {
  function UITabBar(bar, content) {
    var li, ref, _i, _len, _ref;
    this.bar = bar;
    this.content = content;
    this.bar.parentNode._tabBar = this;
    this.barItems = [];
    this.contentItems = [];
    this.activeContent = null;
    _ref = this.bar.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      li = _ref[_i];
      if (li.nodeName === "LI") {
        ref = li.dataset.tabContent;
        if (!ref) {
          throw new Error("Missing content reference!");
        }
        content = $("#" + ref)[0];
        if (!content) {
          throw new Error("Missing content node!");
        }
        $(li).on("click", function(event) {
          return this.getTabBar()._handleItemClick(event);
        });
        this.barItems.push(li);
        this.contentItems.push(content);
      }
    }
    this.setItemAtIndex(1);
  }

  UITabBar.prototype.scrollTo = function(x, y) {
    this.content.scrollLeft = x;
    return this.content.scrollTop = y;
  };

  UITabBar.prototype._handleItemClick = function(event) {
    var i;
    i = this.barItems.indexOf(event.target);
    return this.setItemAtIndex(i);
  };

  UITabBar.prototype.setItemAtIndex = function(i) {
    if (this.activeContent) {
      this.activeContent.style.display = "";
    }
    this.activeContent = this.contentItems[i];
    return this.activeContent.style.display = "block";
  };

  UITabBar.prototype.getIndexForContent = function(node) {
    var i;
    i = this.contentItems.indexOf(node);
    if (i === -1) {
      if (node.parentNode) {
        return this.getIndexForContent(node.parentNode);
      } else {
        return -1;
      }
    } else {
      return i;
    }
  };

  return UITabBar;

})();

Element.prototype.getTabBar = function() {
  var _ref;
  if (this._tabBar) {
    return this._tabBar;
  } else {
    return (_ref = this.parentNode) != null ? _ref.getTabBar() : void 0;
  }
};

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


UIConsole = (function() {
  function UIConsole(div) {
    div.innerHTML = "";
    this.ul = document.createElement("UL");
    div.appendChild(this.ul);
  }

  UIConsole.prototype.addLine = function(str, cssClass) {
    var bar, node;
    str = str.replace(/\n/g, "<br />");
    str = str.replace(/\t/g, "&nbsp;&nbsp;&nbsp;");
    node = document.createElement("LI");
    cssClass = cssClass ? "log " + cssClass : "log";
    node.setAttribute("CLASS", cssClass);
    node.innerHTML = str;
    this.ul.appendChild(node);
    this.ul.getTabBar().scrollTo(0, this.ul.offsetHeight);
    bar = this.ul.getTabBar();
    bar.setItemAtIndex(bar.getIndexForContent(this.ul));
    UI.app.didUpdateConsole(this);
    return node;
  };

  UIConsole.prototype.log = function(msg) {
    return this.addLine(msg);
  };

  UIConsole.prototype.warn = function(msg) {
    return this.addLine(msg, "warning");
  };

  UIConsole.prototype.error = function(msg) {
    return this.addLine(msg, "error");
  };

  UIConsole.prototype.clear = function() {
    return this.ul.innerHTML = "";
  };

  return UIConsole;

})();

UICCSConsole = (function(_super) {
  __extends(UICCSConsole, _super);

  function UICCSConsole() {
    _ref = UICCSConsole.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  UICCSConsole.prototype.addOutput = function(action) {
    return this.addLine("&gt;&gt;&gt; " + (action.toString()));
  };

  UICCSConsole.prototype.addInput = function(action) {
    return this.addLine("&lt;&lt;&lt; " + (action.toString()));
  };

  return UICCSConsole;

})(UIConsole);

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


UICCSHistory = (function() {
  function UICCSHistory(container) {
    this.container = container;
  }

  UICCSHistory.prototype.appDidResetCCS = function(app, system) {
    this.clear();
    this.system = system;
    return this._addState(null);
  };

  UICCSHistory.prototype.clear = function() {
    this.system = null;
    return this.container.innerHTML = "";
  };

  UICCSHistory.prototype.performStep = function(step) {
    if (!step) {
      throw new Error("Step must not be null!");
    }
    this.system = step.perform();
    this._addState(step);
    return this.system;
  };

  UICCSHistory.prototype._addState = function(step) {
    var action, details, li, system;
    action = "";
    if (step) {
      action = step.action.transferDescription();
      details = "";
      if (step.actionDetails) {
        details = step.actionDetails;
      }
      if (details.length > 0) {
        details = " <span class=\"action_detail\">(" + details + ")</span>";
      }
      action = "<span class=\"h_action\">" + action + details + "</span>";
    }
    system = "<span class=\"h_ccs\">" + (this.system.toString()) + "</span>";
    li = document.createElement("LI");
    li.innerHTML = action + system;
    if (this.container.hasChildNodes()) {
      return this.container.insertBefore(li, this.container.firstChild);
    } else {
      return this.container.appendChild(li);
    }
  };

  return UICCSHistory;

})();

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/*
	Delegate methods:
	recognizerShouldBeginRecognising()
	recognizerDidChangeState()
*/


UIEventRecognizer = (function() {
  function UIEventRecognizer(nodes, delegate) {
    this.nodes = nodes;
    this.delegate = delegate;
    this.setEnabled(true);
    this.state = UIEventRecognizer.POSSIBLE;
  }

  UIEventRecognizer.prototype.setEnabled = function(enabled) {
    if (enabled === this.enabled) {
      return;
    }
    this.nabled = enabled;
    if (this.enabled) {
      return this._enable();
    } else {
      return this._disable();
    }
  };

  UIEventRecognizer.prototype._enable = function() {
    throw new Error("Not implemented!");
  };

  UIEventRecognizer.prototype._disable = function() {
    throw new Error("Not implemented!");
  };

  return UIEventRecognizer;

})();

UIEventRecognizer.POSSIBLE = 0;

UIEventRecognizer.BEGAN = 1;

UIEventRecognizer.CHANGED = 2;

UIEventRecognizer.ENDED = 3;

UIEventRecognizer.RECOGNIZED = 3;

UIClickRecognizer = (function(_super) {
  __extends(UIClickRecognizer, _super);

  function UIClickRecognizer() {
    UIClickRecognizer.__super__.constructor.apply(this, arguments);
    this.requiredClicks = 1;
  }

  UIClickRecognizer.prototype._enable = function() {
    return this.nodes.on("click", function(event) {});
  };

  return UIClickRecognizer;

})(UIEventRecognizer);

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


UIExecutor = (function() {
  function UIExecutor(button) {
    this.button = button;
    this.button.__executor = this;
    $(this.button).on("click", function(event) {
      return event.target.__executor.execute();
    });
  }

  UIExecutor.prototype._enableButton = function() {
    return this.button.removeAttribute("DISABLED");
  };

  UIExecutor.prototype._disableButton = function() {
    return this.button.setAttribute("DISABLED", "disabled");
  };

  UIExecutor.prototype.setButtonEnabled = function(enabled) {
    if (enabled) {
      return this._enableButton();
    } else {
      return this._disableButton();
    }
  };

  UIExecutor.prototype.appWillChangeCCS = function(app) {
    return this.setButtonEnabled(false);
  };

  UIExecutor.prototype.appDidChangeCCS = function(app) {
    return this.setButtonEnabled(app.ccs ? true : false);
  };

  UIExecutor.prototype.executorPrint = function(exec, msg) {
    return UILog(msg);
  };

  UIExecutor.prototype.executorDidPerformStep = function(exec, step, system) {};

  UIExecutor.prototype.execute = function() {
    this.executor = new PCExecutor(UI.app.ccs, this);
    return this.executor.execute();
  };

  return UIExecutor;

})();

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


UIAppController = (function() {
  function UIAppController(pseuCoEditor, ccsEditor, executor, console, history) {
    this.pseuCoEditor = pseuCoEditor;
    this.ccsEditor = ccsEditor;
    this.executor = executor;
    this.console = console;
    this.history = history;
    this.observers = [this.pseuCoEditor, this.ccsEditor, this.executor, this.console, this.history];
    this.stepObservers = [this.console, this.history];
  }

  UIAppController.prototype.didChangeEditorState = function(editor) {
    var o, _i, _len, _ref1;
    _ref1 = this.observers;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      o = _ref1[_i];
      if (typeof o.appDidChangeEditorState === "function") {
        o.appDidChangeEditorState(this, editor);
      }
    }
    return null;
  };

  UIAppController.prototype.didUpdateConsole = function(console) {
    var o, _i, _len, _ref1;
    _ref1 = this.observers;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      o = _ref1[_i];
      if (typeof o.appDidUpdateConsole === "function") {
        o.appDidUpdateConsole(this, console);
      }
    }
    return null;
  };

  UIAppController.prototype.willChangeCCS = function(newCCS) {
    var o, _i, _len, _ref1;
    _ref1 = this.observers;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      o = _ref1[_i];
      if (typeof o.appWillChangeCCS === "function") {
        o.appWillChangeCCS(this, newCCS);
      }
    }
    return null;
  };

  UIAppController.prototype.didChangeCCS = function(newCCS) {
    var o, _i, _len, _ref1;
    _ref1 = this.observers;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      o = _ref1[_i];
      if (typeof o.appDidChangeCCS === "function") {
        o.appDidChangeCCS(this, newCCS);
      }
    }
    return null;
  };

  UIAppController.prototype.setCCS = function(newCCS) {
    this.willChangeCCS(newCCS);
    this.ccs = newCCS;
    this.system = null;
    return this.didChangeCCS(newCCS);
  };

  UIAppController.prototype.resetCCS = function() {
    var o, _i, _len, _ref1;
    this.system = this.ccs.system.copy();
    _ref1 = this.observers;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      o = _ref1[_i];
      if (typeof o.appDidResetCCS === "function") {
        o.appDidResetCCS(this, this.system);
      }
    }
    return this.system;
  };

  UIAppController.prototype.willPerformStep = function(step) {
    var o, _i, _len, _ref1;
    _ref1 = this.stepObservers;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      o = _ref1[_i];
      if (typeof o.appWillPerformStep === "function") {
        o.appWillPerformStep(this, step);
      }
    }
    return null;
  };

  UIAppController.prototype.didPerformStep = function(step) {
    var o, _i, _len, _ref1;
    _ref1 = this.stepObservers;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      o = _ref1[_i];
      if (typeof o.appDidPerformStep === "function") {
        o.appDidPerformStep(this, step);
      }
    }
    return null;
  };

  UIAppController.prototype.performStep = function(step) {
    if (!this.ccs) {
      throw new Error("Cannot perform step when no CCS is available!");
    }
    this.willPerformStep(step);
    this.system = this.history.performStep(step);
    if (step.action.channel.name === "println" && step.action.isOutputAction() && step.action.expression) {
      UILog("" + (step.action.expression.evaluate()));
    }
    return this.didPerformStep(step);
  };

  UIAppController.prototype.willOpenDocument = function(document) {};

  UIAppController.prototype.didOpenDocument = function(document) {};

  return UIAppController;

})();

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


UIPseuCoEditor = (function() {
  function UIPseuCoEditor(editor) {
    var handler;
    this.editor = editor;
    this.editor._editorController = this;
    handler = function() {
      return this._editorController.handleChange();
    };
    $(this.editor).on("blur", handler);
    $(this.editor).on("input", handler);
    this.state = UIEditorState.possible;
    this.tree = null;
  }

  UIPseuCoEditor.prototype.handleChange = function() {
    return this.setText(this.editor.value);
  };

  UIPseuCoEditor.prototype.setText = function(text) {
    var col, e;
    this._setState(UIEditorState.possible);
    try {
      this.tree = PseuCoParser.parse(text);
      return this._setState(UIEditorState.valid);
    } catch (_error) {
      e = _error;
      col = e.column ? ", column " + e.column : "";
      UIError("Line " + e.line + col + ": " + e.message);
      this.tree = null;
      return this._setState(UIEditorState.invalid);
    }
  };

  UIPseuCoEditor.prototype.setTree = function(program) {};

  UIPseuCoEditor.prototype._setState = function(state) {
    this.state = state;
    return UI.app.didChangeEditorState(this);
  };

  return UIPseuCoEditor;

})();

UIPseuCoHack = (function(_super) {
  __extends(UIPseuCoHack, _super);

  function UIPseuCoHack(editor, jsField) {
    var handler;
    this.editor = editor;
    this.jsField = jsField;
    this.editor.__hack = this;
    $(this.editor).on("dblclick", function(event) {
      this.__hack.jsField.style.display = "block";
      return this.__hack.jsField.focus();
    });
    this.jsField.__hack = this;
    handler = function() {
      this.style.display = "none";
      return this.__hack.handleJS();
    };
    $(this.jsField).on("blur", handler);
    $(this.jsField).on("input", handler);
  }

  UIPseuCoHack.prototype.handleJS = function() {
    var col, e, js, obj;
    js = this.jsField.value;
    if (js.search(/[^ \t\n\r]/) === -1) {
      this._setState(UIEditorState.possible);
      this.tree = null;
    }
    try {
      obj = eval("__t = " + js);
      if (obj) {
        this.tree = obj.tree;
        this.editor.value = this.tree.toString();
        return this._setState(UIEditorState.valid);
      }
    } catch (_error) {
      e = _error;
      col = e.column ? ", column " + e.column : "";
      UIError("Line " + e.line + col + ": " + e.message);
      this.tree = null;
      this.editor.value = "";
      return this._setState(UIEditorState.invalid);
    }
  };

  return UIPseuCoHack;

})(UIPseuCoEditor);

/*
PseuCo Compiler  
Copyright (C) 2013  
Saarland University (www.uni-saarland.de)  
Sebastian Biewer (biewer@splodge.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


UICCSEditor = (function() {
  function UICCSEditor(textarea) {
    this.textarea = textarea;
  }

  UICCSEditor.prototype.appDidChangeEditorState = function(app, editor) {
    var ccs, compiler;
    if (editor !== app.pseuCoEditor || editor.state !== UIEditorState.valid) {
      return;
    }
    compiler = new PCCCompiler(editor.tree);
    ccs = compiler.compileProgram();
    return app.setCCS(ccs);
  };

  UICCSEditor.prototype.appDidChangeCCS = function(app, newCCS) {
    return this.textarea.value = newCCS.toString();
  };

  return UICCSEditor;

})();
