// Generated by CoffeeScript 1.6.2
/*

	The following classes represent the PseuCo tree. Its implementation is partly incomplete.
	Method _getType is not implemented everywhere and does not perform type checking anywhere at the moment!
	
	toString returns the string representation of the tree with minimal brackets and correctly indented.
*/

var PCAdditiveExpression, PCAndExpression, PCArrayExpression, PCArrayType, PCAssignDestination, PCAssignExpression, PCBaseType, PCBreakStmt, PCCase, PCChannelType, PCClass, PCClassCall, PCClassType, PCConditionDecl, PCConditionalExpression, PCContinueStmt, PCDecl, PCDeclStmt, PCDoStmt, PCEnvironmentController, PCEnvironmentNode, PCEqualityExpression, PCExpression, PCForInit, PCForStmt, PCFormalParameter, PCIdentifierExpression, PCIfStmt, PCIndent, PCLiteralExpression, PCMainAgent, PCMonitor, PCMultiplicativeExpression, PCNode, PCOrExpression, PCPostfixExpression, PCPrimitiveStmt, PCPrintStmt, PCProcedure, PCProcedureCall, PCProcedureDecl, PCProgram, PCReceiveExpression, PCRelationalExpression, PCReturnStmt, PCSelectStmt, PCSendExpression, PCSimpleType, PCStartExpression, PCStatement, PCStmtBlock, PCStmtExpression, PCStruct, PCTArrayType, PCTChannelType, PCTClassType, PCTProcedureType, PCTType, PCTTypeType, PCUnaryExpression, PCVariable, PCVariableDeclarator, PCVariableInitializer, PCWhileStmt, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PCIndent = "   ";

PCNode = (function() {
  function PCNode() {
    var c, children, _i, _len, _ref;

    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.children = children;
    this.parent = null;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      c.parent = this;
    }
  }

  PCNode.prototype.getType = function(env) {
    if (!this._type) {
      this._type = this._getType(env);
      if (!this._type) {
        this._type = true;
      }
    }
    if (this._type === true) {
      return null;
    } else {
      return this._type;
    }
  };

  PCNode.prototype._getType = function() {
    throw new Error("Not implemented");
  };

  return PCNode;

})();

PCProgram = (function(_super) {
  __extends(PCProgram, _super);

  function PCProgram() {
    _ref = PCProgram.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PCProgram.prototype.collectClasses = function(env) {
    var c, _i, _len, _ref1, _results;

    _ref1 = this.children;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      c = _ref1[_i];
      _results.push(c.collectClasses(env));
    }
    return _results;
  };

  PCProgram.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref1, _results;

    _ref1 = this.children;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      c = _ref1[_i];
      _results.push(c.collectEnvironment(env));
    }
    return _results;
  };

  PCProgram.prototype.toString = function() {
    var o;

    return ((function() {
      var _i, _len, _ref1, _results;

      _ref1 = this.children;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        o = _ref1[_i];
        _results.push(o.toString(""));
      }
      return _results;
    }).call(this)).join("\n");
  };

  return PCProgram;

})(PCNode);

PCMainAgent = (function(_super) {
  __extends(PCMainAgent, _super);

  function PCMainAgent() {
    _ref1 = PCMainAgent.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  PCMainAgent.prototype.collectClasses = function(env) {
    return null;
  };

  PCMainAgent.prototype.collectEnvironment = function(env) {
    env.beginMainAgent(this);
    this.children[0].collectEnvironment(env);
    return env.endMainAgent();
  };

  PCMainAgent.prototype.toString = function() {
    return "mainAgent " + this.children[0].toString("");
  };

  return PCMainAgent;

})(PCNode);

PCProcedureDecl = (function(_super) {
  __extends(PCProcedureDecl, _super);

  function PCProcedureDecl() {
    var body, name, parameters, resultType;

    resultType = arguments[0], name = arguments[1], body = arguments[2], parameters = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.name = name;
    parameters.unshift(resultType, body);
    PCProcedureDecl.__super__.constructor.apply(this, parameters);
  }

  PCProcedureDecl.prototype.getResultType = function() {
    return this.children[0];
  };

  PCProcedureDecl.prototype.getBody = function() {
    return this.children[1];
  };

  PCProcedureDecl.prototype.getArgumentCount = function() {
    return this.children.length - 2;
  };

  PCProcedureDecl.prototype.getArgumentAtIndex = function(index) {
    return this.children[index + 2];
  };

  PCProcedureDecl.prototype.collectClasses = function(env) {
    return null;
  };

  PCProcedureDecl.prototype.collectEnvironment = function(env) {
    var args, p;

    args = (function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.children.slice(2, this.children.length);
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i += 1) {
        p = _ref2[_i];
        _results.push(p.getVariable(env));
      }
      return _results;
    }).call(this);
    env.beginNewProcedure(this, this.name, this.getResultType().getType(env).type, args);
    this.getBody().collectEnvironment(env);
    return env.endProcedure();
  };

  PCProcedureDecl.prototype.toString = function(indent) {
    var i;

    return "" + indent + (this.getResultType().toString()) + " " + this.name + "(" + (((function() {
      var _i, _ref2, _results;

      _results = [];
      for (i = _i = 0, _ref2 = this.getArgumentCount(); _i < _ref2; i = _i += 1) {
        _results.push(this.getArgumentAtIndex(i).toString());
      }
      return _results;
    }).call(this)).join(", ")) + ") " + (this.getBody().toString(indent));
  };

  return PCProcedureDecl;

})(PCNode);

PCFormalParameter = (function(_super) {
  __extends(PCFormalParameter, _super);

  function PCFormalParameter(type, identifier) {
    this.identifier = identifier;
    PCFormalParameter.__super__.constructor.call(this, type);
  }

  PCFormalParameter.prototype.getVariable = function(env) {
    return new PCVariable(this, this.identifier, this.children[0].getType(env).type);
  };

  PCFormalParameter.prototype.toString = function() {
    return this.children[0].toString() + " " + this.identifier;
  };

  return PCFormalParameter;

})(PCNode);

PCMonitor = (function(_super) {
  __extends(PCMonitor, _super);

  function PCMonitor() {
    var declarations, name;

    name = arguments[0], declarations = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.name = name;
    PCMonitor.__super__.constructor.apply(this, declarations);
  }

  PCMonitor.prototype.collectClasses = function(env) {
    return env.processNewClass(this, new PCTClassType(true, this.name));
  };

  PCMonitor.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref2;

    env.beginClass(this.name);
    _ref2 = this.children;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      c = _ref2[_i];
      c.collectEnvironment(env);
    }
    return env.endClass();
  };

  PCMonitor.prototype.toString = function() {
    var o;

    return "monitor " + this.name + " {\n" + (((function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.children;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        o = _ref2[_i];
        _results.push(o.toString(PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n}";
  };

  return PCMonitor;

})(PCNode);

PCStruct = (function(_super) {
  __extends(PCStruct, _super);

  function PCStruct() {
    var declarations, name;

    name = arguments[0], declarations = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.name = name;
    PCStruct.__super__.constructor.apply(this, declarations);
  }

  PCStruct.prototype.collectClasses = function(env) {
    return env.processNewClass(this, new PCTClassType(false, this.name));
  };

  PCStruct.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref2;

    env.beginClass(this.name);
    _ref2 = this.children;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      c = _ref2[_i];
      c.collectEnvironment(env);
    }
    return env.endClass();
  };

  PCStruct.prototype.toString = function() {
    var o;

    return "struct " + this.name + " {\n" + (((function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.children;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        o = _ref2[_i];
        _results.push(o.toString(PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n}";
  };

  return PCStruct;

})(PCNode);

PCConditionDecl = (function(_super) {
  __extends(PCConditionDecl, _super);

  function PCConditionDecl(name, expression) {
    this.name = name;
    PCConditionDecl.__super__.constructor.call(this, expression);
  }

  PCConditionDecl.prototype.getExpression = function() {
    return this.children[0];
  };

  PCConditionDecl.prototype.collectEnvironment = function(env) {
    return env.processNewVariable(new PCVariable(this, this.name, new PCTType(PCTType.CONDITION)));
  };

  PCConditionDecl.prototype.toString = function(indent) {
    return "" + indent + "condition " + this.name + " with " + (this.children[0].toString()) + ";";
  };

  return PCConditionDecl;

})(PCNode);

PCDecl = (function(_super) {
  __extends(PCDecl, _super);

  function PCDecl() {
    _ref2 = PCDecl.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  PCDecl.prototype.getType = function() {
    return this.children[0];
  };

  PCDecl.prototype.getDeclarators = function() {
    return this.children.slice(1);
  };

  PCDecl.prototype.collectClasses = function(env) {
    return null;
  };

  PCDecl.prototype.collectEnvironment = function(env) {
    var i, type, _i, _ref3, _results;

    type = this.children[0].getType(env).type;
    _results = [];
    for (i = _i = 1, _ref3 = this.children.length; _i < _ref3; i = _i += 1) {
      _results.push(this.children[i].collectEnvironment(env, type));
    }
    return _results;
  };

  PCDecl.prototype.toString = function(indent) {
    return indent + this.children[0].toString() + " " + this.children[1].toString();
  };

  return PCDecl;

})(PCNode);

PCDeclStmt = (function(_super) {
  __extends(PCDeclStmt, _super);

  function PCDeclStmt() {
    _ref3 = PCDeclStmt.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  PCDeclStmt.prototype.toString = function(indent) {
    return PCDeclStmt.__super__.toString.apply(this, arguments) + ";";
  };

  return PCDeclStmt;

})(PCDecl);

PCVariableDeclarator = (function(_super) {
  __extends(PCVariableDeclarator, _super);

  function PCVariableDeclarator(name, initializer) {
    this.name = name;
    if (initializer) {
      PCVariableDeclarator.__super__.constructor.call(this, initializer);
    } else {
      PCVariableDeclarator.__super__.constructor.apply(this, []);
    }
  }

  PCVariableDeclarator.prototype.getInitializer = function() {
    if (this.children.length > 0) {
      return this.children[0];
    } else {
      return null;
    }
  };

  PCVariableDeclarator.prototype.getTypeNode = function() {
    return this.parent.getType();
  };

  PCVariableDeclarator.prototype.collectEnvironment = function(env, type) {
    return env.processNewVariable(new PCVariable(this, this.name, type));
  };

  PCVariableDeclarator.prototype.toString = function() {
    var res;

    res = this.name;
    if (this.children.length > 0) {
      res += " = " + (this.children[0].toString());
    }
    return res;
  };

  return PCVariableDeclarator;

})(PCNode);

PCVariableInitializer = (function(_super) {
  __extends(PCVariableInitializer, _super);

  function PCVariableInitializer() {
    var children, isUncompletedArray;

    isUncompletedArray = arguments[0], children = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.isUncompletedArray = isUncompletedArray != null ? isUncompletedArray : false;
    PCVariableInitializer.__super__.constructor.apply(this, children);
  }

  PCVariableInitializer.prototype.isArray = function() {
    return !(this.children[0] instanceof PCExpression);
  };

  PCVariableInitializer.prototype.getTypeNode = function() {
    return this.parent.getTypeNode();
  };

  PCVariableInitializer.prototype.toString = function() {
    var o;

    if (this.children[0] instanceof PCExpression) {
      return "" + (this.children[0].toString());
    } else {
      return "{" + (((function() {
        var _i, _len, _ref4, _results;

        _ref4 = this.children;
        _results = [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          o = _ref4[_i];
          _results.push(o.toString());
        }
        return _results;
      }).call(this)).join(", ")) + (this.isUncompletedArray ? "," : "") + "}";
    }
  };

  return PCVariableInitializer;

})(PCNode);

PCArrayType = (function(_super) {
  __extends(PCArrayType, _super);

  function PCArrayType(baseType, size) {
    this.size = size;
    PCArrayType.__super__.constructor.call(this, baseType);
  }

  PCArrayType.prototype._getType = function(env) {
    return new PCTTypeType(new PCTArrayType(this.children[0].getType(env).type, this.size));
  };

  PCArrayType.prototype.toString = function() {
    return "" + this.children[0] + "[" + this.size + "]";
  };

  return PCArrayType;

})(PCNode);

PCBaseType = (function(_super) {
  __extends(PCBaseType, _super);

  function PCBaseType() {
    PCBaseType.__super__.constructor.apply(this, []);
  }

  return PCBaseType;

})(PCNode);

PCSimpleType = (function(_super) {
  __extends(PCSimpleType, _super);

  function PCSimpleType(type) {
    this.type = type;
    if (this.type < 0 || this.type > 5) {
      throw "Unknown type";
    }
    PCSimpleType.__super__.constructor.apply(this, arguments);
  }

  PCSimpleType.prototype._getType = function() {
    return new PCTTypeType(new PCTType(PCSimpleType.typeToTypeKind(this.type)));
  };

  PCSimpleType.prototype.toString = function() {
    return PCSimpleType.typeToString(this.type);
  };

  return PCSimpleType;

})(PCBaseType);

PCSimpleType.VOID = 0;

PCSimpleType.BOOL = 1;

PCSimpleType.INT = 2;

PCSimpleType.STRING = 3;

PCSimpleType.MUTEX = 4;

PCSimpleType.AGENT = 5;

PCSimpleType.typeToString = function(type) {
  switch (type) {
    case PCSimpleType.VOID:
      return "void";
    case PCSimpleType.BOOL:
      return "bool";
    case PCSimpleType.INT:
      return "int";
    case PCSimpleType.STRING:
      return "string";
    case PCSimpleType.MUTEX:
      return "mutex";
    case PCSimpleType.AGENT:
      return "agent";
    default:
      throw new Error("Unknown type!");
  }
};

PCSimpleType.typeToTypeKind = function(type) {
  switch (type) {
    case PCSimpleType.MUTEX:
      return PCTType.MUTEX;
    case PCSimpleType.AGENT:
      return PCTType.AGENT;
    case PCSimpleType.VOID:
      return PCTType.VOID;
    case PCSimpleType.BOOL:
      return PCTType.BOOL;
    case PCSimpleType.INT:
      return PCTType.INT;
    case PCSimpleType.STRING:
      return PCTType.STRING;
    default:
      throw new Error("Unknown type!");
  }
};

PCChannelType = (function(_super) {
  __extends(PCChannelType, _super);

  function PCChannelType(valueType, capacity) {
    this.valueType = valueType;
    this.capacity = capacity;
    PCChannelType.__super__.constructor.apply(this, []);
  }

  PCChannelType.prototype._getType = function() {
    return new PCTTypeType(new PCTChannelType(new PCTType(PCSimpleType.typeToTypeKind(this.valueType)), this.capacity));
  };

  PCChannelType.prototype.toString = function() {
    return "" + (PCSimpleType.typeToString(this.valueType)) + "chan" + (this.capacity !== PCChannelType.CAPACITY_UNKNOWN ? this.capacity : "");
  };

  return PCChannelType;

})(PCNode);

PCChannelType.CAPACITY_UNKNOWN = -1;

PCClassType = (function(_super) {
  __extends(PCClassType, _super);

  function PCClassType(className) {
    this.className = className;
    PCClassType.__super__.constructor.apply(this, arguments);
  }

  PCClassType.prototype._getType = function(env) {
    return new PCTTypeType(env.getClassWithName(this.className).type);
  };

  PCClassType.prototype.toString = function() {
    return this.className;
  };

  return PCClassType;

})(PCBaseType);

PCExpression = (function(_super) {
  __extends(PCExpression, _super);

  function PCExpression() {
    _ref4 = PCExpression.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  PCExpression.prototype.childToString = function(i, diff) {
    var res;

    if (i == null) {
      i = 0;
    }
    if (diff == null) {
      diff = 0;
    }
    res = this.children[i].toString();
    if (this.getPrecedence() + diff > this.children[i].getPrecedence()) {
      res = "(" + res + ")";
    }
    return res;
  };

  return PCExpression;

})(PCNode);

PCStartExpression = (function(_super) {
  __extends(PCStartExpression, _super);

  function PCStartExpression() {
    _ref5 = PCStartExpression.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  PCStartExpression.prototype.getPrecedence = function() {
    return 42;
  };

  PCStartExpression.prototype.toString = function() {
    return "start " + (this.childToString(0));
  };

  PCStartExpression.prototype._getType = function() {
    return new PCType(PCType.AGENT);
  };

  return PCStartExpression;

})(PCExpression);

PCAssignExpression = (function(_super) {
  __extends(PCAssignExpression, _super);

  function PCAssignExpression(destination, operator, expression) {
    this.operator = operator;
    PCAssignExpression.__super__.constructor.call(this, destination, expression);
  }

  PCAssignExpression.prototype.getDestination = function() {
    return this.children[0];
  };

  PCAssignExpression.prototype.getExpression = function() {
    return this.children[1];
  };

  PCAssignExpression.prototype._getType = function(env) {
    return this.children[1].getType(env);
  };

  PCAssignExpression.prototype.getPrecedence = function() {
    return 39;
  };

  PCAssignExpression.prototype.toString = function() {
    return "" + (this.getDestination().toString()) + " " + this.operator + " " + (this.childToString(1));
  };

  return PCAssignExpression;

})(PCExpression);

PCAssignDestination = (function(_super) {
  __extends(PCAssignDestination, _super);

  function PCAssignDestination() {
    var arrayIndexExpressions, identifier;

    identifier = arguments[0], arrayIndexExpressions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.identifier = identifier;
    PCAssignDestination.__super__.constructor.apply(this, arrayIndexExpressions);
  }

  PCAssignDestination.prototype.toString = function() {
    var o;

    return "" + this.identifier + (((function() {
      var _i, _len, _ref6, _results;

      _ref6 = this.children;
      _results = [];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        o = _ref6[_i];
        _results.push("[" + (o.toString()) + "]");
      }
      return _results;
    }).call(this)).join(""));
  };

  return PCAssignDestination;

})(PCNode);

PCSendExpression = (function(_super) {
  __extends(PCSendExpression, _super);

  function PCSendExpression() {
    _ref6 = PCSendExpression.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  PCSendExpression.prototype._getType = function(env) {
    return this.children[1].getType(env);
  };

  PCSendExpression.prototype.getPrecedence = function() {
    return 39;
  };

  PCSendExpression.prototype.toString = function() {
    return "" + (this.childToString(0, 1)) + " <! " + (this.childToString(1));
  };

  return PCSendExpression;

})(PCExpression);

PCConditionalExpression = (function(_super) {
  __extends(PCConditionalExpression, _super);

  function PCConditionalExpression() {
    _ref7 = PCConditionalExpression.__super__.constructor.apply(this, arguments);
    return _ref7;
  }

  PCConditionalExpression.prototype._getType = function(env) {
    return this.children[1].getType(env);
  };

  PCConditionalExpression.prototype.getPrecedence = function() {
    return 45;
  };

  PCConditionalExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " ? " + (this.children[1].toString()) + " : " + (this.children[2].toString());
  };

  return PCConditionalExpression;

})(PCExpression);

PCOrExpression = (function(_super) {
  __extends(PCOrExpression, _super);

  function PCOrExpression() {
    _ref8 = PCOrExpression.__super__.constructor.apply(this, arguments);
    return _ref8;
  }

  PCOrExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCOrExpression.prototype.getPrecedence = function() {
    return 48;
  };

  PCOrExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " || " + (this.childToString(1, 1));
  };

  return PCOrExpression;

})(PCExpression);

PCAndExpression = (function(_super) {
  __extends(PCAndExpression, _super);

  function PCAndExpression() {
    _ref9 = PCAndExpression.__super__.constructor.apply(this, arguments);
    return _ref9;
  }

  PCAndExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCAndExpression.prototype.getPrecedence = function() {
    return 51;
  };

  PCAndExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " && " + (this.childToString(1, 1));
  };

  return PCAndExpression;

})(PCExpression);

PCEqualityExpression = (function(_super) {
  __extends(PCEqualityExpression, _super);

  function PCEqualityExpression(left, operator, right) {
    this.operator = operator;
    PCEqualityExpression.__super__.constructor.call(this, left, right);
  }

  PCEqualityExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCEqualityExpression.prototype.getPrecedence = function() {
    return 54;
  };

  PCEqualityExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCEqualityExpression;

})(PCExpression);

PCRelationalExpression = (function(_super) {
  __extends(PCRelationalExpression, _super);

  function PCRelationalExpression(left, operator, right) {
    this.operator = operator;
    PCRelationalExpression.__super__.constructor.call(this, left, right);
  }

  PCRelationalExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCRelationalExpression.prototype.getPrecedence = function() {
    return 57;
  };

  PCRelationalExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCRelationalExpression;

})(PCExpression);

PCAdditiveExpression = (function(_super) {
  __extends(PCAdditiveExpression, _super);

  function PCAdditiveExpression(left, operator, right) {
    this.operator = operator;
    PCAdditiveExpression.__super__.constructor.call(this, left, right);
  }

  PCAdditiveExpression.prototype._getType = function() {
    return new PCTType(PCType.INT);
  };

  PCAdditiveExpression.prototype.getPrecedence = function() {
    return 60;
  };

  PCAdditiveExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCAdditiveExpression;

})(PCExpression);

PCMultiplicativeExpression = (function(_super) {
  __extends(PCMultiplicativeExpression, _super);

  function PCMultiplicativeExpression(left, operator, right) {
    this.operator = operator;
    PCMultiplicativeExpression.__super__.constructor.call(this, left, right);
  }

  PCMultiplicativeExpression.prototype._getType = function() {
    return new PCTType(PCType.INT);
  };

  PCMultiplicativeExpression.prototype.getPrecedence = function() {
    return 63;
  };

  PCMultiplicativeExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCMultiplicativeExpression;

})(PCExpression);

PCUnaryExpression = (function(_super) {
  __extends(PCUnaryExpression, _super);

  function PCUnaryExpression(operator, expression) {
    this.operator = operator;
    PCUnaryExpression.__super__.constructor.call(this, expression);
  }

  PCUnaryExpression.prototype._getType = function(env) {
    return this.children[0].getType(env);
  };

  PCUnaryExpression.prototype.getPrecedence = function() {
    return 66;
  };

  PCUnaryExpression.prototype.toString = function() {
    return "" + this.operator + (this.childToString(0));
  };

  return PCUnaryExpression;

})(PCExpression);

PCPostfixExpression = (function(_super) {
  __extends(PCPostfixExpression, _super);

  function PCPostfixExpression(assignDestination, operator) {
    this.operator = operator;
    PCPostfixExpression.__super__.constructor.call(this, assignDestination);
  }

  PCPostfixExpression.prototype._getType = function() {
    return new PCTType(PCType.INT);
  };

  PCPostfixExpression.prototype.getPrecedence = function() {
    return 69;
  };

  PCPostfixExpression.prototype.toString = function() {
    return "" + (this.children[0].toString()) + this.operator;
  };

  return PCPostfixExpression;

})(PCExpression);

PCReceiveExpression = (function(_super) {
  __extends(PCReceiveExpression, _super);

  function PCReceiveExpression() {
    _ref10 = PCReceiveExpression.__super__.constructor.apply(this, arguments);
    return _ref10;
  }

  PCReceiveExpression.prototype._getType = function(env) {
    return this.children[0].getType(env).chanelledType;
  };

  PCReceiveExpression.prototype.getPrecedence = function() {
    return 72;
  };

  PCReceiveExpression.prototype.toString = function() {
    return "<? " + (this.childToString(0));
  };

  return PCReceiveExpression;

})(PCExpression);

PCProcedureCall = (function(_super) {
  __extends(PCProcedureCall, _super);

  function PCProcedureCall() {
    var args, procedureName;

    procedureName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.procedureName = procedureName;
    PCProcedureCall.__super__.constructor.apply(this, args);
  }

  PCProcedureCall.prototype.getProcedure = function(env, className) {
    return (className ? env.getClassWithName(className) : env).getProcedureWithName(this.procedureName);
  };

  PCProcedureCall.prototype.getType = function(env, className) {
    if (!className) {
      return PCProcedureCall.__super__.getType.apply(this, arguments);
    } else {
      return this._getType(env, className);
    }
  };

  PCProcedureCall.prototype._getType = function(env, className) {
    return this.getProcedure(env, className).returnType;
  };

  PCProcedureCall.prototype.getPrecedence = function() {
    return 75;
  };

  PCProcedureCall.prototype.toString = function() {
    var o;

    return "" + this.procedureName + "(" + (((function() {
      var _i, _len, _ref11, _results;

      _ref11 = this.children;
      _results = [];
      for (_i = 0, _len = _ref11.length; _i < _len; _i++) {
        o = _ref11[_i];
        _results.push(o.toString());
      }
      return _results;
    }).call(this)).join(", ")) + ")";
  };

  return PCProcedureCall;

})(PCExpression);

PCClassCall = (function(_super) {
  __extends(PCClassCall, _super);

  function PCClassCall() {
    _ref11 = PCClassCall.__super__.constructor.apply(this, arguments);
    return _ref11;
  }

  PCClassCall.prototype.getProcedure = function(env) {
    return this.children[1].getProcedure(env, this.children[0].getType(env).identifier);
  };

  PCClassCall.prototype._getType = function(env) {
    return this.children[1].getType(env, this.children[0].getType(env).identifier);
  };

  PCClassCall.prototype.getPrecedence = function() {
    return 78;
  };

  PCClassCall.prototype.toString = function() {
    return "" + (this.children[0].toString()) + "." + (this.children[1].toString());
  };

  return PCClassCall;

})(PCExpression);

PCArrayExpression = (function(_super) {
  __extends(PCArrayExpression, _super);

  function PCArrayExpression() {
    _ref12 = PCArrayExpression.__super__.constructor.apply(this, arguments);
    return _ref12;
  }

  PCArrayExpression.prototype._getType = function(env) {
    return this.children[0].getType(env).elementsType;
  };

  PCArrayExpression.prototype.getPrecedence = function() {
    return 81;
  };

  PCArrayExpression.prototype.toString = function() {
    return "" + (this.children[0].toString()) + "[" + (this.children[1].toString()) + "]";
  };

  return PCArrayExpression;

})(PCExpression);

PCLiteralExpression = (function(_super) {
  __extends(PCLiteralExpression, _super);

  function PCLiteralExpression(value) {
    this.value = value;
    PCLiteralExpression.__super__.constructor.apply(this, []);
  }

  PCLiteralExpression.prototype._getType = function() {
    switch (typeof this.value) {
      case "boolean":
        return new PCTType(PCTType.BOOL);
      case "string":
        return PCTType(PCTType.STRING);
      default:
        return PCTType(PCTType.INT);
    }
  };

  PCLiteralExpression.prototype.getPrecedence = function() {
    return 84;
  };

  PCLiteralExpression.prototype.toString = function() {
    switch (typeof this.value) {
      case "boolean":
        if (this.value) {
          return "true";
        } else {
          return "false";
        }
      case "string":
        return "\"" + this.value + "\"";
      default:
        return "" + this.value;
    }
  };

  return PCLiteralExpression;

})(PCExpression);

PCIdentifierExpression = (function(_super) {
  __extends(PCIdentifierExpression, _super);

  function PCIdentifierExpression(identifier) {
    this.identifier = identifier;
    PCIdentifierExpression.__super__.constructor.apply(this, []);
  }

  PCIdentifierExpression.prototype._getType = function(env) {
    return env.getVariableWithName(this.identifier).type;
  };

  PCIdentifierExpression.prototype.getPrecedence = function() {
    return 84;
  };

  PCIdentifierExpression.prototype.toString = function() {
    return this.identifier;
  };

  return PCIdentifierExpression;

})(PCExpression);

PCStatement = (function(_super) {
  __extends(PCStatement, _super);

  function PCStatement() {
    _ref13 = PCStatement.__super__.constructor.apply(this, arguments);
    return _ref13;
  }

  PCStatement.prototype.collectEnvironment = function(env) {
    return this.children.length > 0 && this.children[0].collectEnvironment(env);
  };

  PCStatement.prototype.toString = function(indent, expectsNewBlock) {
    var addIndent, res;

    addIndent = expectsNewBlock === true && (this.children.length === 0 || !(this.children[0] instanceof PCStmtBlock));
    if (addIndent) {
      indent += PCIndent;
    }
    if (this.children.length === 0) {
      res = indent + ";";
    } else {
      res = this.children[0].toString(indent);
      if (this.children[0] instanceof PCStmtExpression) {
        res += ";";
      }
    }
    if (addIndent) {
      res = "\n" + res;
    }
    return res;
  };

  return PCStatement;

})(PCNode);

PCBreakStmt = (function(_super) {
  __extends(PCBreakStmt, _super);

  function PCBreakStmt() {
    PCBreakStmt.__super__.constructor.apply(this, []);
  }

  PCBreakStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCBreakStmt.prototype.toString = function(indent) {
    return indent + "break";
  };

  return PCBreakStmt;

})(PCNode);

PCContinueStmt = (function(_super) {
  __extends(PCContinueStmt, _super);

  function PCContinueStmt() {
    PCContinueStmt.__super__.constructor.apply(this, []);
  }

  PCContinueStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCContinueStmt.prototype.toString = function(indent) {
    return indent + "continue";
  };

  return PCContinueStmt;

})(PCNode);

PCStmtBlock = (function(_super) {
  __extends(PCStmtBlock, _super);

  function PCStmtBlock() {
    _ref14 = PCStmtBlock.__super__.constructor.apply(this, arguments);
    return _ref14;
  }

  PCStmtBlock.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref15, _results;

    _ref15 = this.children;
    _results = [];
    for (_i = 0, _len = _ref15.length; _i < _len; _i++) {
      c = _ref15[_i];
      _results.push(c.collectEnvironment(env));
    }
    return _results;
  };

  PCStmtBlock.prototype.toString = function(indent) {
    var o;

    return "{\n" + (((function() {
      var _i, _len, _ref15, _results;

      _ref15 = this.children;
      _results = [];
      for (_i = 0, _len = _ref15.length; _i < _len; _i++) {
        o = _ref15[_i];
        _results.push(o.toString(indent + PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n" + indent + "}";
  };

  return PCStmtBlock;

})(PCNode);

PCStmtExpression = (function(_super) {
  __extends(PCStmtExpression, _super);

  function PCStmtExpression() {
    _ref15 = PCStmtExpression.__super__.constructor.apply(this, arguments);
    return _ref15;
  }

  PCStmtExpression.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCStmtExpression.prototype.toString = function(indent) {
    return indent + this.children[0].toString();
  };

  return PCStmtExpression;

})(PCNode);

PCSelectStmt = (function(_super) {
  __extends(PCSelectStmt, _super);

  function PCSelectStmt() {
    _ref16 = PCSelectStmt.__super__.constructor.apply(this, arguments);
    return _ref16;
  }

  PCSelectStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCSelectStmt.prototype.toString = function(indent) {
    var o;

    return "" + indent + "select {\n" + (((function() {
      var _i, _len, _ref17, _results;

      _ref17 = this.children;
      _results = [];
      for (_i = 0, _len = _ref17.length; _i < _len; _i++) {
        o = _ref17[_i];
        _results.push(o.toString(indent + PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n" + indent + "}";
  };

  return PCSelectStmt;

})(PCNode);

PCCase = (function(_super) {
  __extends(PCCase, _super);

  function PCCase(execution, condition) {
    if (condition) {
      PCCase.__super__.constructor.call(this, execution, condition);
    } else {
      PCCase.__super__.constructor.call(this, execution);
    }
  }

  PCCase.prototype.getCondition = function() {
    if (this.children.length === 2) {
      return this.children[1];
    } else {
      return null;
    }
  };

  PCCase.prototype.getExecution = function() {
    return this.children[0];
  };

  PCCase.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCCase.prototype.toString = function(indent) {
    return "" + indent + (this.children.length === 2 ? "case " + (this.children[1].toString()) : "default") + ": " + (this.children[0].toString(indent, true));
  };

  return PCCase;

})(PCNode);

PCIfStmt = (function(_super) {
  __extends(PCIfStmt, _super);

  function PCIfStmt() {
    _ref17 = PCIfStmt.__super__.constructor.apply(this, arguments);
    return _ref17;
  }

  PCIfStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCIfStmt.prototype.toString = function(indent) {
    return "" + indent + "if (" + (this.children[0].toString()) + ") " + (this.children[1].toString(indent, true)) + (this.children[2] ? " " + (this.children[2].toString(indent, true)) : "");
  };

  return PCIfStmt;

})(PCNode);

PCWhileStmt = (function(_super) {
  __extends(PCWhileStmt, _super);

  function PCWhileStmt() {
    _ref18 = PCWhileStmt.__super__.constructor.apply(this, arguments);
    return _ref18;
  }

  PCWhileStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCWhileStmt.prototype.toString = function(indent) {
    return "" + indent + "while (" + (this.children[0].toString()) + ") " + (this.children[1].toString(indent, true));
  };

  return PCWhileStmt;

})(PCNode);

PCDoStmt = (function(_super) {
  __extends(PCDoStmt, _super);

  function PCDoStmt() {
    _ref19 = PCDoStmt.__super__.constructor.apply(this, arguments);
    return _ref19;
  }

  PCDoStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCDoStmt.prototype.toString = function(indent) {
    return "" + indent + "do " + (this.children[0].toString(indent, true)) + "\n" + indent + "while (" + (this.children[1].toString()) + ")";
  };

  return PCDoStmt;

})(PCNode);

PCForStmt = (function(_super) {
  __extends(PCForStmt, _super);

  function PCForStmt() {
    var body, children, expression, init, update;

    body = arguments[0], init = arguments[1], expression = arguments[2], update = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.body = body;
    this.init = init;
    this.expression = expression;
    this.update = update;
    children = this.update.concat([this.body]);
    if (this.expression) {
      children.unshift(this.expression);
    }
    if (this.init) {
      children.unshift(this.init);
    }
    PCForStmt.__super__.constructor.apply(this, children);
  }

  PCForStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCForStmt.prototype.toString = function(indent) {
    var o;

    return "" + indent + "for (" + (this.init ? this.init.toString() : "") + "; " + (this.expression ? this.expression.toString() : "") + "; " + (((function() {
      var _i, _len, _ref20, _results;

      _ref20 = this.update;
      _results = [];
      for (_i = 0, _len = _ref20.length; _i < _len; _i++) {
        o = _ref20[_i];
        _results.push(o.toString(""));
      }
      return _results;
    }).call(this)).join(", ")) + ") " + (this.body.toString(indent, true));
  };

  return PCForStmt;

})(PCNode);

PCForInit = (function(_super) {
  __extends(PCForInit, _super);

  function PCForInit() {
    _ref20 = PCForInit.__super__.constructor.apply(this, arguments);
    return _ref20;
  }

  PCForInit.prototype.toString = function() {
    var o;

    return "" + (((function() {
      var _i, _len, _ref21, _results;

      _ref21 = this.children;
      _results = [];
      for (_i = 0, _len = _ref21.length; _i < _len; _i++) {
        o = _ref21[_i];
        _results.push(o.toString(""));
      }
      return _results;
    }).call(this)).join(", "));
  };

  return PCForInit;

})(PCNode);

PCReturnStmt = (function(_super) {
  __extends(PCReturnStmt, _super);

  function PCReturnStmt() {
    _ref21 = PCReturnStmt.__super__.constructor.apply(this, arguments);
    return _ref21;
  }

  PCReturnStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCReturnStmt.prototype.toString = function(indent) {
    return "" + indent + "return" + (this.children.length === 1 ? " " + (this.children[0].toString()) : "") + ";";
  };

  return PCReturnStmt;

})(PCNode);

PCPrimitiveStmt = (function(_super) {
  __extends(PCPrimitiveStmt, _super);

  function PCPrimitiveStmt(kind, expression) {
    this.kind = kind;
    if (expression) {
      PCPrimitiveStmt.__super__.constructor.call(this, expression);
    } else {
      PCPrimitiveStmt.__super__.constructor.call(this);
    }
  }

  PCPrimitiveStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCPrimitiveStmt.prototype.toString = function(indent) {
    return "" + indent + (PCPrimitiveStmt.kindToString(this.kind)) + (this.children.length === 1 ? " " + (this.children[0].toString()) : "") + ";";
  };

  return PCPrimitiveStmt;

})(PCNode);

PCPrimitiveStmt.JOIN = 0;

PCPrimitiveStmt.LOCK = 1;

PCPrimitiveStmt.UNLOCK = 2;

PCPrimitiveStmt.WAIT = 3;

PCPrimitiveStmt.SIGNAL = 4;

PCPrimitiveStmt.SIGNAL_ALL = 5;

PCPrimitiveStmt.kindToString = function(kind) {
  switch (kind) {
    case PCPrimitiveStmt.JOIN:
      return "join";
    case PCPrimitiveStmt.LOCK:
      return "lock";
    case PCPrimitiveStmt.UNLOCK:
      return "unlock";
    case PCPrimitiveStmt.WAIT:
      return "waitForCondition";
    case PCPrimitiveStmt.SIGNAL:
      return "signal";
    case PCPrimitiveStmt.SIGNAL_ALL:
      return "signal all";
  }
};

PCPrintStmt = (function(_super) {
  __extends(PCPrintStmt, _super);

  function PCPrintStmt() {
    _ref22 = PCPrintStmt.__super__.constructor.apply(this, arguments);
    return _ref22;
  }

  PCPrintStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCPrintStmt.prototype.toString = function(indent) {
    var o;

    return "" + indent + "println(" + (((function() {
      var _i, _len, _ref23, _results;

      _ref23 = this.children;
      _results = [];
      for (_i = 0, _len = _ref23.length; _i < _len; _i++) {
        o = _ref23[_i];
        _results.push(o.toString());
      }
      return _results;
    }).call(this)).join(", ")) + ");";
  };

  return PCPrintStmt;

})(PCNode);

/*
	This class represents PseuCo's types.
	May be partly incomplete as type checking is not yet completely supported by the PseuCo tree.
*/


PCTType = (function() {
  function PCTType(kind) {
    this.kind = kind;
    if (this.kind < 0 || this.kind > 14) {
      throw new Error("Unknown kind of type!");
    }
  }

  PCTType.prototype.isEqual = function(type) {
    return type.kind === this.kind;
  };

  PCTType.prototype.toString = function() {
    switch (this.kind) {
      case PCTType.INT:
        return "int";
      case PCTType.BOOL:
        return "bool";
      case PCTType.STRING:
        return "string";
      case PCTType.CHANNEL:
        return "channel";
      case PCTType.ARRAY:
        return "array";
      case PCTType.MONITOR:
        return "monitor";
      case PCTType.STRUCTURE:
        return "struct";
      case PCTType.MUTEX:
        return "mutex";
      case PCTType.CONDITION:
        return "condition";
      case PCTType.PROCEDURE:
        return "procedure";
      case PCTType.TYPE:
        return "type";
      case PCTType.MAINAGENT:
        return "mainAgent";
      case PCTType.AGENT:
        return "agent";
      case PCTType.WILDCARD:
        return "wildcard";
      default:
        return "void";
    }
  };

  return PCTType;

})();

PCTType.VOID = 0;

PCTType.BOOL = 1;

PCTType.INT = 2;

PCTType.STRING = 3;

PCTType.CHANNEL = 4;

PCTType.ARRAY = 5;

PCTType.MONITOR = 6;

PCTType.STRUCT = 7;

PCTType.MUTEX = 8;

PCTType.CONDITION = 9;

PCTType.PROCEDURE = 10;

PCTType.TYPE = 11;

PCTType.MAINAGENT = 12;

PCTType.AGENT = 13;

PCTType.WILDCARD = 14;

PCTArrayType = (function(_super) {
  __extends(PCTArrayType, _super);

  function PCTArrayType(elementsType, capacity) {
    this.elementsType = elementsType;
    this.capacity = capacity;
    PCTArrayType.__super__.constructor.call(this, PCTType.ARRAY);
  }

  PCTArrayType.prototype.isEqual = function(type) {
    var capacityFulfilled;

    capacityFulfilled = type.capacity === this.capacity || this.capacity === 0 || type.capacity === 0;
    return type.kind === this.kind && capacityFulfilled && this.elementsType.isEqual(type.elementsType);
  };

  PCTArrayType.prototype.toString = function() {
    return "" + (this.elementsType.toString()) + "[" + this.capacity + "]";
  };

  return PCTArrayType;

})(PCTType);

PCTChannelType = (function(_super) {
  __extends(PCTChannelType, _super);

  function PCTChannelType(channelledType, capacity) {
    this.channelledType = channelledType;
    this.capacity = capacity;
    PCTChannelType.__super__.constructor.call(this, PCTType.CHANNEL);
  }

  PCTChannelType.prototype.isEqual = function(type) {
    return this.kind === type.kind && this.capacity === type.capacity && this.channelledType.isEqual(type.channelledType);
  };

  PCTChannelType.prototype.isAssignableTo = function(type) {
    return this.kind === type.kind && (this.capacity === type.capacity || type.capacity === 0) && this.channelledType.isEqual(type.channelledType);
  };

  PCTChannelType.prototype.getApplicableCapacity = function() {
    if (this.capacity === PCChannelType.CAPACITY_UNKNOWN) {
      return 0;
    } else {
      return this.capacity;
    }
  };

  PCTChannelType.prototype.toString = function() {
    if (this.capacity === PCChannelType.CAPACITY_UNKNOWN) {
      return "handshake " + (this.channelledType.toString()) + " " + PCTChannelType.__super__.toString.apply(this, arguments);
    } else {
      return "" + (this.channelledType.toString()) + " " + PCTChannelType.__super__.toString.apply(this, arguments) + " of capacity " + this.capacity;
    }
  };

  return PCTChannelType;

})(PCTType);

PCTClassType = (function(_super) {
  __extends(PCTClassType, _super);

  function PCTClassType(isMonitor, identifier) {
    this.identifier = identifier;
    PCTClassType.__super__.constructor.call(this, (isMonitor ? PCTType.MONITOR : PCTType.STRUCT));
  }

  PCTClassType.prototype.isMonitor = function() {
    return this.kind === PCTType.MONITOR;
  };

  PCTClassType.prototype.isEqual = function(type) {
    return this.kind === type.kind && this.identifier === type.identifier;
  };

  PCTClassType.prototype.toString = function() {
    return "" + PCTClassType.__super__.toString.apply(this, arguments) + " " + this.identifier;
  };

  return PCTClassType;

})(PCTType);

PCTProcedureType = (function(_super) {
  __extends(PCTProcedureType, _super);

  function PCTProcedureType(returnType, argumentTypes) {
    this.returnType = returnType;
    this.argumentTypes = argumentTypes;
    PCTProcedureType.__super__.constructor.call(this, PCTType.PROCEDURE);
  }

  PCTProcedureType.prototype.isEqual = function(type) {
    var i, _i, _ref23;

    if (type.argumentTypes.length !== this.argumentTypes) {
      return false;
    }
    for (i = _i = 0, _ref23 = this.argumentTypes.length; _i < _ref23; i = _i += 1) {
      if (!type.argumentTypes[i].isEqual(this.argumentTypes[i])) {
        return false;
      }
    }
    return type.returnType.isEqual(this.returnType);
  };

  PCTProcedureType.prototype.toString = function() {
    var args, t;

    args = ((function() {
      var _i, _len, _ref23, _results;

      _ref23 = this.argumentTypes;
      _results = [];
      for (_i = 0, _len = _ref23.length; _i < _len; _i++) {
        t = _ref23[_i];
        _results.push(t.toString());
      }
      return _results;
    }).call(this)).join(" x ");
    return "" + (this.returnType.toString()) + " -> (" + args + ")";
  };

  return PCTProcedureType;

})(PCTType);

PCTTypeType = (function(_super) {
  __extends(PCTTypeType, _super);

  function PCTTypeType(type) {
    this.type = type;
    PCTTypeType.__super__.constructor.call(this, PCTType.TYPE);
  }

  PCTTypeType.prototype.isEqual = function(type) {
    return this.kind === type.kind && this.type.isEqual(type.type);
  };

  return PCTTypeType;

})(PCTType);

/*
	ToDo
*/


PCEnvironmentController = (function() {
  function PCEnvironmentController() {
    this.root = new PCEnvironmentNode(null, "");
    this.classes = {};
    this._envStack = this.root;
  }

  PCEnvironmentController.prototype.getGlobal = function() {
    return this.root;
  };

  PCEnvironmentController.prototype.getClassWithName = function(name) {
    var result;

    result = this.classes[name];
    if (result === void 0) {
      throw new Error("Unknown class");
    }
    return result;
  };

  PCEnvironmentController.prototype.getAllClasses = function() {
    return this.root.getAllClasses();
  };

  PCEnvironmentController.prototype.getVariableWithName = function(name) {
    return this._envStack.getVariableWithName(name);
  };

  PCEnvironmentController.prototype.getProcedureWithName = function(name) {
    return this._envStack.getProcedureWithName(name);
  };

  PCEnvironmentController.prototype.processNewClass = function(node, classType) {
    var tnode;

    tnode = new PCClass(node, classType);
    return this._processNewClass(tnode);
  };

  PCEnvironmentController.prototype._processNewClass = function(node) {
    if (this.classes[node.getName()]) {
      throw new Error("Class already registered!");
    }
    this._envStack.addChild(node);
    return this.classes[node.getName()] = node;
  };

  PCEnvironmentController.prototype.beginClass = function(className) {
    var node;

    node = this.getClassWithName(className);
    if (!node) {
      throw new Error("Node must not be null!");
    }
    this._envStack = node;
    return node;
  };

  PCEnvironmentController.prototype.endClass = function() {
    if (!this._envStack instanceof PCClass) {
      throw new Error("No class did begin!");
    }
    return this._envStack = this._envStack.parent;
  };

  PCEnvironmentController.prototype.beginNewProcedure = function(node, procedureName, returnType, args) {
    var tnode;

    tnode = new PCProcedure(node, procedureName, returnType, args);
    return this._processNewProcedure(tnode);
  };

  PCEnvironmentController.prototype._beginNewProcedure = function(node) {
    this._envStack.addChild(node);
    return this.beginProcedure(node.getName());
  };

  PCEnvironmentController.prototype.beginProcedure = function(procedureName) {
    var node;

    node = this._envStack.getProcedureWithName(procedureName);
    if (!node) {
      throw new Error("Node must not be null!");
    }
    this._envStack = node;
    return node;
  };

  PCEnvironmentController.prototype.endProcedure = function() {
    if (!this._envStack instanceof PCProcedure) {
      throw new Error("No procedure did begin!");
    }
    return this._envStack = this._envStack.parent;
  };

  PCEnvironmentController.prototype.beginMainAgent = function(node) {
    if (this._envStack.getProcedureWithName("#mainAgent")) {
      return this.beginProcedure("#mainAgent");
    } else {
      return this.beginNewProcedure(node, "#mainAgent", new PCTType(PCTType.VOID), []);
    }
  };

  PCEnvironmentController.prototype.endMainAgent = function() {
    return this.endProcedure();
  };

  PCEnvironmentController.prototype.processNewVariable = function(variable) {
    return this._processNewVariable(variable);
  };

  PCEnvironmentController.prototype._processNewVariable = function(node) {
    this._envStack.addChild(node);
    return node;
  };

  return PCEnvironmentController;

})();

PCEnvironmentNode = (function() {
  function PCEnvironmentNode(node, label) {
    this.node = node;
    this.label = label;
    this.parent = null;
    this.children = [];
    this.variables = {};
    this.procedures = {};
  }

  PCEnvironmentNode.prototype.addChild = function(child) {
    this.children.push(child);
    child.parent = this;
    if (child instanceof PCProcedure) {
      this.procedures[child.getName()] = child;
    } else if (child instanceof PCVariable) {
      this.variables[child.getIdentifier()] = child;
    }
    return child;
  };

  PCEnvironmentNode.prototype.getVariableWithName = function(name) {
    return this.variables[name];
  };

  PCEnvironmentNode.prototype.getProcedureWithName = function(name) {
    return this.procedures[name];
  };

  PCEnvironmentNode.prototype.getComposedLabel = function() {
    return "" + (this.parent ? "" + (this.parent.getComposedLabel()) + "_" : "") + this.label;
  };

  PCEnvironmentNode.prototype.getAllClasses = function() {
    var c, result, _i, _len, _ref23;

    result = [];
    _ref23 = this.children;
    for (_i = 0, _len = _ref23.length; _i < _len; _i++) {
      c = _ref23[_i];
      if (c instanceof PCClass) {
        result.push(c);
      }
    }
    return result;
  };

  return PCEnvironmentNode;

})();

PCClass = (function(_super) {
  __extends(PCClass, _super);

  function PCClass(node, type) {
    this.type = type;
    PCClass.__super__.constructor.call(this, node, this.type.identifier);
  }

  PCClass.prototype.getName = function() {
    return this.label;
  };

  PCClass.prototype.isMonitor = function() {
    return this.type.isMonitor();
  };

  return PCClass;

})(PCEnvironmentNode);

PCProcedure = (function(_super) {
  __extends(PCProcedure, _super);

  function PCProcedure(node, name, returnType, _arguments) {
    this.returnType = returnType;
    this["arguments"] = _arguments;
    PCProcedure.__super__.constructor.call(this, node, name);
  }

  PCProcedure.prototype.getName = function() {
    return this.label;
  };

  PCProcedure.prototype.isClassProcedure = function() {
    return this.parent instanceof PCClass;
  };

  PCProcedure.prototype.isMonitorProcedure = function() {
    return this.parent instanceof PCClass && this.parent.isMonitor();
  };

  return PCProcedure;

})(PCEnvironmentNode);

PCVariable = (function() {
  function PCVariable(node, name, type) {
    this.node = node;
    this.type = type;
    if (typeof this.node === "string") {
      debugger;
    }
    this.label = name;
    this.parent = null;
  }

  PCVariable.prototype.getName = function() {
    return this.label;
  };

  PCVariable.prototype.getIdentifier = function() {
    return this.label;
  };

  PCVariable.prototype.getComposedLabel = function() {
    return "" + (this.parent ? "" + (this.parent.getComposedLabel()) + "_" : "") + this.label;
  };

  return PCVariable;

})();
