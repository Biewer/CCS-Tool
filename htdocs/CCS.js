// Generated by CoffeeScript 1.6.2
var ActionSets, CCS, CCSAction, CCSAdditiveExpression, CCSBaseStep, CCSChannel, CCSChoice, CCSChoiceLRule, CCSChoiceRRule, CCSChoiceView, CCSConcatenatingExpression, CCSCondRule, CCSCondition, CCSConditionView, CCSConstantExpression, CCSEqualityExpression, CCSExit, CCSExitChannel, CCSExitRule, CCSExitView, CCSExpression, CCSGetMostGeneralType, CCSInput, CCSInputRule, CCSInputView, CCSInternalActionCreate, CCSInternalChannel, CCSMatch, CCSMatchRule, CCSMultiplicativeExpression, CCSOutput, CCSOutputRule, CCSParLRule, CCSParRRule, CCSParallel, CCSParallelView, CCSPrefix, CCSPrefixRule, CCSPrefixView, CCSProcess, CCSProcessApplication, CCSProcessApplicationView, CCSProcessCreateView, CCSProcessDefinition, CCSProcessView, CCSRecRule, CCSRelationalExpression, CCSResRule, CCSRestriction, CCSRestrictionView, CCSSeq1Rule, CCSSeq2Rule, CCSSequence, CCSSequenceView, CCSSimpleAction, CCSStep, CCSStepView, CCSStop, CCSStopView, CCSSyncExitRule, CCSSyncRule, CCSTypeChannel, CCSTypeUnknown, CCSTypeValue, CCSUIChannel, CCSVariableExpression, ObjID, PCAdditiveExpression, PCAndExpression, PCArrayExpression, PCArrayType, PCAssignDestination, PCAssignExpression, PCBaseType, PCBreakStmt, PCCApplicationPlaceholderStackElement, PCCApplicationStackElement, PCCBinaryCCSStackElement, PCCBinaryContainer, PCCBinaryStackElement, PCCBinaryTarget, PCCChoiceStackElement, PCCClass, PCCClassStackElement, PCCCompiler, PCCCompilerStack, PCCComposedContainer, PCCCondition, PCCConditionStackElement, PCCConstantContainer, PCCConstructor, PCCContainer, PCCExitStackElement, PCCField, PCCGlobal, PCCGlobalStackElement, PCCGlobalVariable, PCCGroupable, PCCInputStackElement, PCCInternalReadOnlyField, PCCLocalVariable, PCCOutputStackElement, PCCParallelStackElement, PCCPrefixStackElement, PCCProcedure, PCCProcedureFrame, PCCProcedureStackElement, PCCProcessDefinitionStackElement, PCCProcessFrame, PCCProcessFrameStackElement, PCCProgramController, PCCRestrictionStackElement, PCCScopeStackElement, PCCSequenceStackElement, PCCStackElement, PCCStackResult, PCCStackResultContainer, PCCStopStackElement, PCCType, PCCUnaryContainer, PCCUnaryStackElement, PCCVariable, PCCVariableContainer, PCCVariableInfo, PCCase, PCChannelType, PCClass, PCClassCall, PCClassType, PCConditionDecl, PCConditionalExpression, PCContinueStmt, PCDecl, PCDeclStmt, PCDoStmt, PCEnvironmentController, PCEnvironmentNode, PCEqualityExpression, PCExpression, PCForInit, PCForStmt, PCFormalParameter, PCIdentifierExpression, PCIfStmt, PCIndent, PCLiteralExpression, PCMainAgent, PCMonitor, PCMultiplicativeExpression, PCNode, PCOrExpression, PCPostfixExpression, PCPrimitiveStmt, PCPrintStmt, PCProcedure, PCProcedureCall, PCProcedureDecl, PCProgram, PCReceiveExpression, PCRelationalExpression, PCReturnStmt, PCSelectStmt, PCSendExpression, PCSimpleType, PCStartExpression, PCStatement, PCStmtBlock, PCStmtExpression, PCStruct, PCTArrayType, PCTChannelType, PCTClassType, PCTProcedureType, PCTType, PCTTypeType, PCUnaryExpression, PCVariable, PCVariableDeclarator, PCVariableInitializer, PCWhileStmt, _DEBUG, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref31, _ref32, _ref33, _ref34, _ref35, _ref36, _ref37, _ref38, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CCSInternalChannel = "\u03c4";

CCSExitChannel = "\u03b4";

CCSUIChannel = "\u03c8";

ObjID = 1;

_DEBUG = [];

CCSTypeUnknown = 0;

CCSTypeChannel = 1;

CCSTypeValue = 2;

CCSGetMostGeneralType = function(t1, t2) {
  if (t2 === CCSTypeUnknown) {
    return t1;
  }
  if (t1 === CCSTypeUnknown) {
    return t2;
  }
  if (t1 === t2) {
    return t1;
  }
  throw new Error("Incopatible Types: " + t1 + " and " + t2 + "!");
};

CCS = (function() {
  function CCS(processDefinitions, system) {
    var pd, _i, _len, _ref;

    this.processDefinitions = processDefinitions;
    this.system = system;
    this.system.setCCS(this);
    _ref = this.processDefinitions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pd = _ref[_i];
      pd.setCCS(this);
      pd.getArgTypes();
    }
  }

  CCS.prototype.getProcessDefinition = function(name, argCount) {
    var pd, result, _i, _len, _ref;

    result = null;
    _ref = this.processDefinitions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pd = _ref[_i];
      if (pd.name === name && argCount === pd.getArgCount()) {
        result = pd;
      }
    }
    return result;
  };

  CCS.prototype.getPossibleSteps = function(env) {
    return this.system.getPossibleSteps(env);
  };

  CCS.prototype.toString = function() {
    var process;

    return "" + (((function() {
      var _i, _len, _ref, _results;

      _ref = this.processDefinitions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        process = _ref[_i];
        _results.push(process.toString());
      }
      return _results;
    }).call(this)).join("")) + "\n" + (this.system.toString());
  };

  return CCS;

})();

CCSProcessDefinition = (function() {
  function CCSProcessDefinition(name, process, params) {
    var p;

    this.name = name;
    this.process = process;
    this.params = params;
    if (this.params) {
      this.types = (function() {
        var _i, _len, _ref, _results;

        _ref = this.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push(CCSTypeUnknown);
        }
        return _results;
      }).call(this);
    }
  }

  CCSProcessDefinition.prototype.getArgCount = function() {
    if (this.params) {
      return this.params.length;
    } else {
      return 0;
    }
  };

  CCSProcessDefinition.prototype.setCCS = function(ccs) {
    return this.process.setCCS(ccs);
  };

  CCSProcessDefinition.prototype.getArgTypes = function() {
    var x;

    if (!this.params) {
      return null;
    }
    return this.types = (function() {
      var _i, _len, _ref, _results;

      _ref = this.params;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        _results.push(this.process.getTypeOfIdentifier(x, CCSTypeUnknown));
      }
      return _results;
    }).call(this);
  };

  CCSProcessDefinition.prototype.toString = function() {
    var result, _ref;

    result = this.name;
    if (((_ref = this.params) != null ? _ref.length : void 0) > 0) {
      result += "[" + (this.params.join(", ")) + "]";
    }
    result += " := " + (this.process.toString()) + "\n";
    return result;
  };

  return CCSProcessDefinition;

})();

CCSProcess = (function() {
  function CCSProcess() {
    var subprocesses;

    subprocesses = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.subprocesses = subprocesses;
    this.__id = ObjID++;
  }

  CCSProcess.prototype.setCCS = function(ccs) {
    var p, _i, _len, _ref, _results;

    this.ccs = ccs;
    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.setCCS(this.ccs));
    }
    return _results;
  };

  CCSProcess.prototype._setCCS = function(ccs) {
    this.ccs = ccs;
    if (!this.ccs) {
      throw "no ccs";
    }
    return this;
  };

  CCSProcess.prototype.getLeft = function() {
    return this.subprocesses[0];
  };

  CCSProcess.prototype.getRight = function() {
    return this.subprocesses[1];
  };

  CCSProcess.prototype.setLeft = function(left) {
    return this.subprocesses[0] = left;
  };

  CCSProcess.prototype.setRight = function(right) {
    return this.subprocesses[1] = right;
  };

  CCSProcess.prototype.replaceIdentifierWithValue = function(identifier, value) {
    var p, _i, _len, _ref, _results;

    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.replaceIdentifierWithValue(identifier, value));
    }
    return _results;
  };

  CCSProcess.prototype.replaceIdentifier = function(old, newID) {
    var p, _i, _len, _ref, _results;

    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.replaceIdentifier(old, newID));
    }
    return _results;
  };

  CCSProcess.prototype.getTypeOfIdentifier = function(identifier, type) {
    var p, t, _i, _len, _ref;

    _ref = (function() {
      var _j, _len, _ref, _results;

      _ref = this.subprocesses;
      _results = [];
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        p = _ref[_j];
        _results.push(p.getTypeOfIdentifier(identifier, type));
      }
      return _results;
    }).call(this);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      type = CCSGetMostGeneralType(type, t);
    }
    return type;
  };

  CCSProcess.prototype.getApplicapleRules = function() {
    return [];
  };

  CCSProcess.prototype.getPossibleSteps = function() {
    var rule;

    return ((function() {
      var _i, _len, _ref, _results;

      _ref = this.getApplicapleRules();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        _results.push(rule.getPossibleSteps(this));
      }
      return _results;
    }).call(this)).concatChildren();
  };

  CCSProcess.prototype.needsBracketsForSubprocess = function(process) {
    return (this.getPrecedence != null) && (process.getPrecedence != null) && process.getPrecedence() < this.getPrecedence();
  };

  CCSProcess.prototype.stringForSubprocess = function(process) {
    if (this.needsBracketsForSubprocess(process)) {
      return "(" + (process.toString()) + ")";
    } else {
      return "" + (process.toString());
    }
  };

  CCSProcess.prototype.getPrefixes = function() {
    var p;

    return ((function() {
      var _i, _len, _ref, _results;

      _ref = this.subprocesses;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.getPrefixes());
      }
      return _results;
    }).call(this)).concatChildren();
  };

  CCSProcess.prototype.getExits = function() {
    var p;

    return ((function() {
      var _i, _len, _ref, _results;

      _ref = this.subprocesses;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.getExits());
      }
      return _results;
    }).call(this)).concatChildren();
  };

  return CCSProcess;

})();

CCSStop = (function(_super) {
  __extends(CCSStop, _super);

  function CCSStop() {
    _ref = CCSStop.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CCSStop.prototype.getPrecedence = function() {
    return 12;
  };

  CCSStop.prototype.toString = function() {
    return "0";
  };

  CCSStop.prototype.copy = function() {
    return (new CCSStop())._setCCS(this.ccs);
  };

  return CCSStop;

})(CCSProcess);

CCSExit = (function(_super) {
  __extends(CCSExit, _super);

  function CCSExit() {
    _ref1 = CCSExit.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  CCSExit.prototype.getPrecedence = function() {
    return 12;
  };

  CCSExit.prototype.getApplicapleRules = function() {
    return [CCSExitRule];
  };

  CCSExit.prototype.getExits = function() {
    return [this];
  };

  CCSExit.prototype.toString = function() {
    return "1";
  };

  CCSExit.prototype.copy = function() {
    return (new CCSExit())._setCCS(this.ccs);
  };

  return CCSExit;

})(CCSProcess);

CCSProcessApplication = (function(_super) {
  __extends(CCSProcessApplication, _super);

  function CCSProcessApplication(processName, valuesToPass) {
    this.processName = processName;
    this.valuesToPass = valuesToPass != null ? valuesToPass : [];
    CCSProcessApplication.__super__.constructor.call(this);
  }

  CCSProcessApplication.prototype.getArgCount = function() {
    return this.valuesToPass.length;
  };

  CCSProcessApplication.prototype.getProcess = function() {
    var i, id, pd, _i, _ref2;

    if (this.process) {
      return this.process;
    }
    pd = this.ccs.getProcessDefinition(this.processName, this.getArgCount());
    this.process = pd.process.copy();
    if (pd.params) {
      for (i = _i = 0, _ref2 = pd.params.length - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
        id = pd.params[i];
        if (pd.types[i] === CCSTypeChannel) {
          this.process.replaceIdentifier(id, this.valuesToPass[i].variableName);
        } else {
          this.process.replaceIdentifierWithValue(id, this.valuesToPass[i].evaluate());
        }
      }
    }
    return this.process;
  };

  CCSProcessApplication.prototype.getPrecedence = function() {
    return 12;
  };

  CCSProcessApplication.prototype.getTypeOfIdentifier = function(identifier, type) {
    var i, pd, _i, _ref2;

    pd = this.ccs.getProcessDefinition(this.processName, this.getArgCount());
    if (pd.params) {
      for (i = _i = 0, _ref2 = pd.params.length - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
        type = CCSGetMostGeneralType(type, this.valuesToPass[i].getType(identifier));
        type = CCSGetMostGeneralType(type, pd.types[i]);
      }
    }
    return type;
  };

  CCSProcessApplication.prototype.getApplicapleRules = function() {
    return [CCSRecRule];
  };

  CCSProcessApplication.prototype.getPrefixes = function() {
    return this.getProcess().getPrefixes();
  };

  CCSProcessApplication.prototype.getExits = function() {
    if (this.process) {
      return this.process.getExits();
    } else {
      return [];
    }
  };

  CCSProcessApplication.prototype.replaceIdentifierWithValue = function(identifier, value) {
    var e;

    return this.valuesToPass = (function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.valuesToPass;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        e = _ref2[_i];
        _results.push(e.replaceIdentifierWithValue(identifier, value));
      }
      return _results;
    }).call(this);
  };

  CCSProcessApplication.prototype.replaceIdentifier = function(old, newID) {
    var e, _i, _len, _ref2, _results;

    _ref2 = this.valuesToPass;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      e = _ref2[_i];
      _results.push(e.replaceIdentifier(old, newID));
    }
    return _results;
  };

  /*getProxy: -> 	# ToDo: cache result
  		pd = @ccs.getProcessDefinition(@processName, @getArgCount())
  		new ProcessApplicationProxy(@, pd.process.copy())
  */


  CCSProcessApplication.prototype.toString = function() {
    var e, result;

    result = this.processName;
    if (this.getArgCount() > 0) {
      result += "[" + (((function() {
        var _i, _len, _ref2, _results;

        _ref2 = this.valuesToPass;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          e = _ref2[_i];
          _results.push(e.toString());
        }
        return _results;
      }).call(this)).join(", ")) + "]";
    }
    return result;
  };

  CCSProcessApplication.prototype.copy = function() {
    var v;

    return (new CCSProcessApplication(this.processName, (function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.valuesToPass;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        _results.push(v.copy());
      }
      return _results;
    }).call(this)))._setCCS(this.ccs);
  };

  return CCSProcessApplication;

})(CCSProcess);

CCSPrefix = (function(_super) {
  __extends(CCSPrefix, _super);

  function CCSPrefix(action, process) {
    this.action = action;
    CCSPrefix.__super__.constructor.call(this, process);
  }

  CCSPrefix.prototype.getPrecedence = function() {
    return 12;
  };

  CCSPrefix.prototype.getApplicapleRules = function() {
    return [CCSPrefixRule, CCSOutputRule, CCSInputRule];
  };

  CCSPrefix.prototype.getProcess = function() {
    return this.subprocesses[0];
  };

  CCSPrefix.prototype.replaceIdentifierWithValue = function(identifier, value) {
    this.action.replaceIdentifierWithValue(identifier, value);
    if (this.action.replaceIdentifierWithValue(identifier, value)) {
      return CCSPrefix.__super__.replaceIdentifierWithValue.call(this, identifier, value);
    }
  };

  CCSPrefix.prototype.replaceIdentifier = function(old, newID) {
    this.action.replaceIdentifier(old, newID);
    if (this.action.replaceIdentifier(old, newID)) {
      return CCSPrefix.__super__.replaceIdentifier.call(this, old, newID);
    }
  };

  CCSPrefix.prototype.getPrefixes = function() {
    return [this];
  };

  CCSPrefix.prototype.getTypeOfIdentifier = function(identifier, type) {
    type = CCSGetMostGeneralType(type, this.action.getTypeOfIdentifier(identifier, type));
    if (this.action.isInputAction() && this.action.variable === "identifier") {
      return type;
    }
    return CCSPrefix.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  CCSPrefix.prototype.toString = function() {
    return "" + (this.action.toString()) + "." + (this.stringForSubprocess(this.getProcess()));
  };

  CCSPrefix.prototype.copy = function() {
    return (new CCSPrefix(this.action.copy(), this.getProcess().copy()))._setCCS(this.ccs);
  };

  return CCSPrefix;

})(CCSProcess);

CCSCondition = (function(_super) {
  __extends(CCSCondition, _super);

  function CCSCondition(expression, process) {
    this.expression = expression;
    CCSCondition.__super__.constructor.call(this, process);
  }

  CCSCondition.prototype.getPrecedence = function() {
    return 12;
  };

  CCSCondition.prototype.getApplicapleRules = function() {
    return [CCSCondRule];
  };

  CCSCondition.prototype.getProcess = function() {
    return this.subprocesses[0];
  };

  CCSCondition.prototype.toString = function() {
    return "when (" + (this.expression.toString()) + ") " + (this.stringForSubprocess(this.getProcess()));
  };

  CCSCondition.prototype.copy = function() {
    return (new CCSCondition(this.expression.copy(), this.getProcess().copy()))._setCCS(this.ccs);
  };

  return CCSCondition;

})(CCSProcess);

CCSChoice = (function(_super) {
  __extends(CCSChoice, _super);

  function CCSChoice(left, right) {
    CCSChoice.__super__.constructor.call(this, left, right);
  }

  CCSChoice.prototype.getPrecedence = function() {
    return 9;
  };

  CCSChoice.prototype.getApplicapleRules = function() {
    return [CCSChoiceLRule, CCSChoiceRRule];
  };

  CCSChoice.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getLeft())) + " + " + (this.stringForSubprocess(this.getRight()));
  };

  CCSChoice.prototype.copy = function() {
    return (new CCSChoice(this.getLeft().copy(), this.getRight().copy()))._setCCS(this.ccs);
  };

  return CCSChoice;

})(CCSProcess);

CCSParallel = (function(_super) {
  __extends(CCSParallel, _super);

  function CCSParallel(left, right) {
    CCSParallel.__super__.constructor.call(this, left, right);
  }

  CCSParallel.prototype.getPrecedence = function() {
    return 6;
  };

  CCSParallel.prototype.getApplicapleRules = function() {
    return [CCSParLRule, CCSParRRule, CCSSyncRule, CCSSyncExitRule];
  };

  CCSParallel.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getLeft())) + " | " + (this.stringForSubprocess(this.getRight()));
  };

  CCSParallel.prototype.copy = function() {
    return (new CCSParallel(this.getLeft().copy(), this.getRight().copy()))._setCCS(this.ccs);
  };

  return CCSParallel;

})(CCSProcess);

CCSSequence = (function(_super) {
  __extends(CCSSequence, _super);

  function CCSSequence(left, right) {
    CCSSequence.__super__.constructor.call(this, left, right);
  }

  CCSSequence.prototype.getPrecedence = function() {
    return 3;
  };

  CCSSequence.prototype.getApplicapleRules = function() {
    return [CCSSeq1Rule, CCSSeq2Rule];
  };

  CCSSequence.prototype.getPrefixes = function() {
    return this.getLeft().getPrefixes();
  };

  CCSSequence.prototype.getExits = function() {
    return this.getLeft().getExits();
  };

  CCSSequence.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getLeft())) + " ; " + (this.stringForSubprocess(this.getRight()));
  };

  CCSSequence.prototype.copy = function() {
    return (new CCSSequence(this.getLeft().copy(), this.getRight().copy()))._setCCS(this.ccs);
  };

  return CCSSequence;

})(CCSProcess);

CCSRestriction = (function(_super) {
  __extends(CCSRestriction, _super);

  function CCSRestriction(process, restrictedChannels) {
    this.restrictedChannels = restrictedChannels;
    CCSRestriction.__super__.constructor.call(this, process);
  }

  CCSRestriction.prototype.getPrecedence = function() {
    return 1;
  };

  CCSRestriction.prototype.getApplicapleRules = function() {
    return [CCSResRule];
  };

  CCSRestriction.prototype.getProcess = function() {
    return this.subprocesses[0];
  };

  CCSRestriction.prototype.setProcess = function(process) {
    return this.subprocesses[0] = process;
  };

  CCSRestriction.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getProcess())) + " \\ {" + (this.restrictedChannels.join(", ")) + "}";
  };

  CCSRestriction.prototype.copy = function() {
    return (new CCSRestriction(this.getProcess().copy(), this.restrictedChannels))._setCCS(this.ccs);
  };

  return CCSRestriction;

})(CCSProcess);

CCSChannel = (function() {
  function CCSChannel(name, expression) {
    this.name = name;
    this.expression = expression;
  }

  CCSChannel.prototype.isEqual = function(channel) {
    if (channel.name !== this.name) {
      return false;
    }
    if (channel.expression === null && this.expression === null) {
      return true;
    }
    if (channel.expression === null || this.expression === null) {
      return false;
    }
    return channel.expression.evaluate() === this.expression.evaluate();
  };

  CCSChannel.prototype.replaceIdentifierWithValue = function(identifier, value) {
    if (this.expression) {
      this.expression = this.expression.replaceIdentifierWithValue(identifier, value);
    }
    return null;
  };

  CCSChannel.prototype.replaceIdentifier = function(old, newID) {
    if (this.name === old) {
      this.name = newID;
    }
    return null;
  };

  CCSChannel.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.name === identifier) {
      type = CCSGetMostGeneralType(type, CCSTypeChannel);
    }
    if (this.expression) {
      type = CCSGetMostGeneralType(type, this.expression.getType());
    }
    return type;
  };

  CCSChannel.prototype.toString = function() {
    var result;

    result = "" + this.name;
    if (this.expression) {
      if (this.expression.isEvaluatable()) {
        result += "(" + (this.expression.evaluate()) + ")";
      } else {
        result += "(" + (this.expression.toString()) + ")";
      }
    }
    return result;
  };

  return CCSChannel;

})();

/*
class CCSInternalChannel extends CCSChannel
	constructor: (name) ->
		if name != CCSInternalChannel or name != CCSExitChannel
			throw new Error("Only internal channel names are allowed!")
		super name, null
	isEqual: (channel) -> channel.name == @name and channel.expression == null
	replaceIdentifierWithValue: (identifier, value) -> null
	replaceIdentifier: (old, newID) -> null
	getTypeOfIdentifier: (identifier, type) -> type
	toString: -> @name
*/


CCSAction = (function() {
  function CCSAction(channel) {
    this.channel = channel;
    if (this.channel === "i") {
      if (!this.isSimpleAction()) {
        throw new Error("Internal channel i is only allowed as simple action!");
      }
      this.channel = CCSInternalChannel;
    } else if (this.channel === "e") {
      if (!this.isSimpleAction()) {
        throw new Error("Exit channel e is only allowed as simple action!");
      }
      this.channel = CCSExitChannel;
    }
  }

  CCSAction.prototype.isSimpleAction = function() {
    return false;
  };

  CCSAction.prototype.isInputAction = function() {
    return false;
  };

  CCSAction.prototype.isMatchAction = function() {
    return false;
  };

  CCSAction.prototype.isOutputAction = function() {
    return false;
  };

  CCSAction.prototype.toString = function() {
    return this.channel.toString();
  };

  CCSAction.prototype.isSyncableWithAction = function(action) {
    return false;
  };

  CCSAction.prototype.replaceIdentifierWithValue = function(identifier, value) {
    this.channel.replaceIdentifierWithValue(identifier, value);
    return true;
  };

  CCSAction.prototype.replaceIdentifier = function(old, newID) {
    return this.channel.replaceIdentifier(old, newID);
  };

  CCSAction.prototype.getTypeOfIdentifier = function(identifier, type) {
    return this.channel.getTypeOfIdentifier(identifier, type);
  };

  return CCSAction;

})();

CCSSimpleAction = (function(_super) {
  __extends(CCSSimpleAction, _super);

  function CCSSimpleAction() {
    _ref2 = CCSSimpleAction.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  CCSSimpleAction.prototype.isSimpleAction = function() {
    return true;
  };

  CCSSimpleAction.prototype.copy = function() {
    return new CCSSimpleAction(this.channel);
  };

  return CCSSimpleAction;

})(CCSAction);

CCSInternalActionCreate = function(name) {
  if (name !== CCSInternalChannel && name !== CCSExitChannel) {
    throw new Error("Only internal channel names are allowed!");
  }
  return new CCSSimpleAction(new CCSChannel(name, null));
};

CCSInput = (function(_super) {
  __extends(CCSInput, _super);

  function CCSInput(channel, variable, range) {
    this.variable = variable;
    this.range = range;
    CCSInput.__super__.constructor.call(this, channel);
    this.incommingValue = null;
  }

  CCSInput.prototype.isInputAction = function() {
    return true;
  };

  CCSInput.prototype.supportsValuePassing = function() {
    return typeof this.variable === "string" && this.variable.length > 0;
  };

  CCSInput.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel.isEqual(this.channel) && action.supportsValuePassing() === this.supportsValuePassing();
  };

  CCSInput.prototype.replaceIdentifierWithValue = function(identifier, value) {
    CCSInput.__super__.replaceIdentifierWithValue.call(this, identifier, value);
    return this.variable !== identifier;
  };

  CCSInput.prototype.replaceIdentifier = function(old, newID) {
    CCSInput.__super__.replaceIdentifier.call(this, old, newID);
    return this.variable !== old;
  };

  CCSInput.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.variable === identifier) {
      type = CCSGetMostGeneralType(type, CCSTypeValue);
    }
    return CCSInput.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  CCSInput.prototype.toString = function() {
    return "" + CCSInput.__super__.toString.apply(this, arguments) + "?" + (this.supportsValuePassing() ? this.variable : "");
  };

  CCSInput.prototype.copy = function() {
    return new CCSInput(this.channel, this.variable, this.range);
  };

  return CCSInput;

})(CCSAction);

CCSMatch = (function(_super) {
  __extends(CCSMatch, _super);

  function CCSMatch(channel, expression) {
    this.expression = expression;
    CCSMatch.__super__.constructor.call(this, channel);
  }

  CCSMatch.prototype.isMatchAction = function() {
    return true;
  };

  CCSMatch.prototype.supportsValuePassing = function() {
    return true;
  };

  CCSMatch.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel.isEqual(this.channel) && action.supportsValuePassing() && action.expression.evaluate() === this.expression.evaluate();
  };

  CCSMatch.prototype.replaceIdentifierWithValue = function(identifier, value) {
    CCSMatch.__super__.replaceIdentifierWithValue.call(this, identifier, value);
    this.expression = this.expression.replaceIdentifierWithValue(identifier, value);
    return true;
  };

  CCSMatch.prototype.replaceIdentifier = function(old, newID) {
    CCSMatch.__super__.replaceIdentifier.call(this, old, newID);
    this.expression.replaceIdentifier(old, newID);
    return true;
  };

  CCSMatch.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.expression) {
      type = CCSGetMostGeneralType(type, this.expression.getType(identifier));
    }
    return CCSMatch.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  CCSMatch.prototype.toString = function() {
    return "" + CCSMatch.__super__.toString.apply(this, arguments) + "?=" + (this.expression ? this.expression.toString() : "");
  };

  CCSMatch.prototype.copy = function() {
    var _ref3;

    return new CCSMatch(this.channel, (_ref3 = this.expression) != null ? _ref3.copy() : void 0);
  };

  return CCSMatch;

})(CCSAction);

CCSOutput = (function(_super) {
  __extends(CCSOutput, _super);

  function CCSOutput(channel, expression) {
    this.expression = expression;
    CCSOutput.__super__.constructor.call(this, channel);
  }

  CCSOutput.prototype.isOutputAction = function() {
    return true;
  };

  CCSOutput.prototype.supportsValuePassing = function() {
    return this.expression instanceof CCSExpression;
  };

  CCSOutput.prototype.isSyncableWithAction = function(action) {
    if ((action != null ? action.isInputAction() : void 0) || action.isMatchAction()) {
      return action.isSyncableWithAction(this);
    } else {
      return false;
    }
  };

  CCSOutput.prototype.replaceIdentifierWithValue = function(identifier, value) {
    CCSOutput.__super__.replaceIdentifierWithValue.call(this, identifier, value);
    if (this.expression) {
      this.expression = this.expression.replaceIdentifierWithValue(identifier, value);
    }
    return true;
  };

  CCSOutput.prototype.replaceIdentifier = function(old, newID) {
    var _ref3;

    CCSOutput.__super__.replaceIdentifier.call(this, old, newID);
    if ((_ref3 = this.expression) != null) {
      _ref3.replaceIdentifier(old, newID);
    }
    return true;
  };

  CCSOutput.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.expression) {
      type = CCSGetMostGeneralType(type, this.expression.getType(identifier));
    }
    return CCSOutput.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  CCSOutput.prototype.toString = function() {
    return "" + CCSOutput.__super__.toString.apply(this, arguments) + "!" + (this.expression ? this.expression.toString() : "");
  };

  CCSOutput.prototype.copy = function() {
    var _ref3;

    return new CCSOutput(this.channel, (_ref3 = this.expression) != null ? _ref3.copy() : void 0);
  };

  return CCSOutput;

})(CCSAction);

CCSExpression = (function() {
  function CCSExpression() {
    var subExps;

    subExps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.subExps = subExps;
  }

  CCSExpression.prototype.getLeft = function() {
    return this.subExps[0];
  };

  CCSExpression.prototype.getRight = function() {
    return this.subExps[1];
  };

  CCSExpression.prototype.replaceIdentifierWithValue = function(identifier, value) {
    var exp;

    this.subExps = (function() {
      var _i, _len, _ref3, _results;

      _ref3 = this.subExps;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        exp = _ref3[_i];
        _results.push(exp.replaceIdentifierWithValue(identifier, value));
      }
      return _results;
    }).call(this);
    return this;
  };

  CCSExpression.prototype.replaceIdentifier = function(old, newID) {
    var exp, _i, _len, _ref3, _results;

    _ref3 = this.subExps;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      exp = _ref3[_i];
      _results.push(exp.replaceIdentifier(old, newID));
    }
    return _results;
  };

  CCSExpression.prototype.usesIdentifier = function(identifier) {
    var e, result, _i, _len, _ref3;

    result = false;
    _ref3 = this.subExps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      e = _ref3[_i];
      result || e.usesIdentifier();
    }
    return result;
  };

  CCSExpression.prototype.getType = function(identifier) {
    if (this.usesIdentifier(identifier)) {
      CCSTypeValue;
    }
    return CCSTypeUnknown;
  };

  CCSExpression.prototype.evaluate = function() {
    throw new Error("Abstract method!");
  };

  CCSExpression.prototype.isEvaluatable = function() {
    return false;
  };

  CCSExpression.prototype.needsBracketsForSubExp = function(exp) {
    return (this.getPrecedence != null) && (exp.getPrecedence != null) && exp.getPrecedence() < this.getPrecedence();
  };

  CCSExpression.prototype.stringForSubExp = function(exp) {
    if (this.needsBracketsForSubExp(exp)) {
      return "(" + (exp.toString()) + ")";
    } else {
      return "" + (exp.toString());
    }
  };

  CCSExpression.prototype.toString = function() {
    throw new Error("Abstract method not implemented!");
  };

  CCSExpression.prototype.copy = function() {
    throw new Error("Abstract method not implemented!");
  };

  return CCSExpression;

})();

CCSConstantExpression = (function(_super) {
  __extends(CCSConstantExpression, _super);

  function CCSConstantExpression(value) {
    this.value = value;
    CCSConstantExpression.__super__.constructor.call(this);
  }

  CCSConstantExpression.prototype.getPrecedence = function() {
    return 18;
  };

  CCSConstantExpression.prototype.evaluate = function() {
    if (typeof this.value === "boolean") {
      if (this.value === true) {
        return 1;
      } else {
        return 0;
      }
    } else {
      return this.value;
    }
  };

  CCSConstantExpression.prototype.isEvaluatable = function() {
    return true;
  };

  CCSConstantExpression.prototype.toString = function() {
    if (typeof this.value === "string") {
      return '"' + this.value + '"';
    } else {
      return "" + this.value;
    }
  };

  CCSConstantExpression.prototype.copy = function() {
    return new CCSConstantExpression(this.value);
  };

  return CCSConstantExpression;

})(CCSExpression);

CCSVariableExpression = (function(_super) {
  __extends(CCSVariableExpression, _super);

  function CCSVariableExpression(variableName) {
    this.variableName = variableName;
    CCSVariableExpression.__super__.constructor.call(this);
  }

  CCSVariableExpression.prototype.getPrecedence = function() {
    return 18;
  };

  CCSVariableExpression.prototype.replaceIdentifierWithValue = function(identifier, value) {
    if (identifier === this.variableName) {
      return new CCSConstantExpression(value);
    } else {
      return this;
    }
  };

  CCSVariableExpression.prototype.replaceIdentifier = function(old, newID) {
    if (this.variableName === old) {
      return this.variableName = newID;
    }
  };

  CCSVariableExpression.prototype.evaluate = function() {
    throw new Error('Unbound identifier!');
  };

  CCSVariableExpression.prototype.isEvaluatable = function() {
    return false;
  };

  CCSVariableExpression.prototype.toString = function() {
    return this.variableName;
  };

  CCSVariableExpression.prototype.copy = function() {
    return new CCSVariableExpression(this.variableName);
  };

  return CCSVariableExpression;

})(CCSExpression);

CCSAdditiveExpression = (function(_super) {
  __extends(CCSAdditiveExpression, _super);

  function CCSAdditiveExpression(left, right, op) {
    this.op = op;
    CCSAdditiveExpression.__super__.constructor.call(this, left, right);
  }

  CCSAdditiveExpression.prototype.getPrecedence = function() {
    return 15;
  };

  CCSAdditiveExpression.prototype.evaluate = function() {
    var l, r;

    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    if (this.op === "+") {
      return l + r;
    } else if (this.op === "-") {
      return l - r;
    } else {
      throw new Error("Invalid operator!");
    }
  };

  CCSAdditiveExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSAdditiveExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  CCSAdditiveExpression.prototype.copy = function() {
    return new CCSAdditiveExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return CCSAdditiveExpression;

})(CCSExpression);

CCSMultiplicativeExpression = (function(_super) {
  __extends(CCSMultiplicativeExpression, _super);

  function CCSMultiplicativeExpression(left, right, op) {
    this.op = op;
    CCSMultiplicativeExpression.__super__.constructor.call(this, left, right);
  }

  CCSMultiplicativeExpression.prototype.getPrecedence = function() {
    return 12;
  };

  CCSMultiplicativeExpression.prototype.evaluate = function() {
    var l, r;

    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    if (this.op === "*") {
      return l * r;
    } else if (this.op === "/") {
      return Math.floor(l / r);
    } else {
      throw new Error("Invalid operator!");
    }
  };

  CCSMultiplicativeExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSMultiplicativeExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  CCSMultiplicativeExpression.prototype.copy = function() {
    return new CCSMultiplicativeExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return CCSMultiplicativeExpression;

})(CCSExpression);

CCSConcatenatingExpression = (function(_super) {
  __extends(CCSConcatenatingExpression, _super);

  function CCSConcatenatingExpression(left, right) {
    CCSConcatenatingExpression.__super__.constructor.call(this, left, right);
  }

  CCSConcatenatingExpression.prototype.getPrecedence = function() {
    return 9;
  };

  CCSConcatenatingExpression.prototype.evaluate = function() {
    return "" + this.getLeft().evaluate() + this.getRight().evaluate();
  };

  CCSConcatenatingExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSConcatenatingExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + "^" + this.stringForSubExp(this.getRight());
  };

  CCSConcatenatingExpression.prototype.copy = function() {
    return new CCSConcatenatingExpression(this.getLeft().copy(), this.getRight().copy());
  };

  return CCSConcatenatingExpression;

})(CCSExpression);

CCSRelationalExpression = (function(_super) {
  __extends(CCSRelationalExpression, _super);

  function CCSRelationalExpression(left, right, op) {
    this.op = op;
    CCSRelationalExpression.__super__.constructor.call(this, left, right);
  }

  CCSRelationalExpression.prototype.getPrecedence = function() {
    return 6;
  };

  CCSRelationalExpression.prototype.evaluate = function() {
    var l, r;

    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    if (this.op === "<") {
      return l < r;
    } else if (this.op === "<=") {
      return l <= r;
    } else if (this.op === ">") {
      return l > r;
    } else if (this.op === ">=") {
      return l >= r;
    } else {
      throw new Error("Invalid operator!");
    }
  };

  CCSRelationalExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSRelationalExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  CCSRelationalExpression.prototype.copy = function() {
    return new CCSRelationalExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return CCSRelationalExpression;

})(CCSExpression);

CCSEqualityExpression = (function(_super) {
  __extends(CCSEqualityExpression, _super);

  function CCSEqualityExpression(left, right, op) {
    this.op = op;
    CCSEqualityExpression.__super__.constructor.call(this, left, right);
  }

  CCSEqualityExpression.prototype.getPrecedence = function() {
    return 3;
  };

  CCSEqualityExpression.prototype.evaluate = function() {
    var l, r;

    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    if (this.op === "==") {
      return l === r;
    } else if (this.op === "!=") {
      return l !== r;
    } else {
      throw new Error("Invalid operator!");
    }
  };

  CCSEqualityExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  CCSEqualityExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  CCSEqualityExpression.prototype.copy = function() {
    return new CCSEqualityExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return CCSEqualityExpression;

})(CCSExpression);

ActionSets = {
  isActionInK: function(action) {
    return ActionSets.isActionInCom(action) && action.isSimpleAction();
  },
  isActionInCom: function(action) {
    return ActionSets.isActionInAct(action) && action.channel !== CCSInternalChannel;
  },
  isActionInAct: function(action) {
    return ActionSets.isActionInActPlus(action) && action.channel !== CCSExitChannel;
  },
  isActionInActPlus: function(action) {
    return !action.supportsValuePassing();
  },
  isActionInComVP: function(action) {
    return ActionSets.isActionInActVP(action) && action.channel !== CCSInternalChannel;
  },
  isActionInActVP: function(action) {
    return action.channel !== CCSExitChannel;
  },
  isActionInActVPPlus: function(action) {
    return true;
  }
};

Array.prototype.filterKSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInK(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInCom(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInAct(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActPlusSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInActPlus(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComVPSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInComVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInActVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPPlusSteps = function() {
  return this;
};

String.prototype.replaceAll = function(needle, replacement) {
	var t = this
	var tt = this
	do {
		t = tt;
		tt = t.replace(needle, replacement);
	} while (t != tt);
	return t;
}

Array.prototype.concatChildren = function() {
	if (this.length == 0)
		return [];
	var target = this.concat([]);	// Copy
	var result = target.shift().concat([]);	// Result should always be a copy
	while (target.length > 0) {
		result = result.concat(target.shift());
	}
	return result;
}

Array.prototype.joinChildren = function(separator) {
	var result = [];
	var i = 0;
	while(true) {
		var joinTarget = [];
		for (var c = 0; c < this.length; c++) {
			if (this[c][i]) joinTarget.push(this[c][i]);
		}
		if (joinTarget.length == 0)
			break;
		result[i++] = joinTarget.join(separator);
	}
	return result;
};

Array.prototype.assertNonNull = function() {
  var e, _i, _len, _results;

  _results = [];
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    e = this[_i];
    _results.push((function() {
      if (typeof e === "undefined" || e === null) {
        throw new Error("Null element found!");
      }
    })());
  }
  return _results;
};

CCSStep = (function() {
  function CCSStep() {
    var action, actionDetails, index, process, rule, s, substeps, _i, _len, _ref3;

    index = arguments[0], process = arguments[1], action = arguments[2], rule = arguments[3], actionDetails = arguments[4], substeps = 6 <= arguments.length ? __slice.call(arguments, 5) : [];
    this.index = index;
    this.process = process;
    this.action = action;
    this.rule = rule;
    this.actionDetails = actionDetails;
    this.substeps = substeps;
    _ref3 = this.substeps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      s = _ref3[_i];
      if (s === void 0 || s === null) {
        throw "substep must not be nil!";
      }
    }
    if (!this.actionDetails) {
      this.actionDetails = this.substeps.length === 1 ? this.substeps[0].actionDetails : "";
    }
  }

  CCSStep.prototype.getLeaveProcesses = function() {
    var step;

    if (this.substeps.length === 0) {
      return [this.process];
    } else {
      return ((function() {
        var _i, _len, _ref3, _results;

        _ref3 = this.substeps;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          step = _ref3[_i];
          _results.push(step.getLeaveProcesses());
        }
        return _results;
      }).call(this)).concatChildren();
    }
  };

  CCSStep.prototype.perform = function() {
    return this.rule.performStep(this);
  };

  CCSStep.prototype.toString = function() {
    return this.action.toString() + (this.actionDetails.length > 0 ? " " + this.actionDetails : "");
  };

  return CCSStep;

})();

CCSBaseStep = (function(_super) {
  __extends(CCSBaseStep, _super);

  function CCSBaseStep(prefix, rule) {
    CCSBaseStep.__super__.constructor.call(this, 0, prefix, prefix.action, rule);
  }

  return CCSBaseStep;

})(CCSStep);

CCSPrefixRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isSimpleAction() : void 0) || !prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.getProcess();
  }
};

CCSOutputRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isOutputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.getProcess();
  }
};

CCSInputRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isInputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    var result;

    if (step.process.action.incommingValue === void 0) {
      throw new Error("Input action's incomming value was not set!");
    }
    result = step.process.getProcess();
    result.replaceIdentifierWithValue(step.process.action.variable, step.process.action.incommingValue);
    return result;
  }
};

CCSMatchRule = {
  getPossibleSteps: function(prefix) {
    if (prefix != null ? prefix.action.isMatchAction() : void 0) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.getProcess();
  }
};

CCSChoiceLRule = {
  getPossibleSteps: function(choice) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = choice.getLeft().getPossibleSteps().filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, choice, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

CCSChoiceRRule = {
  getPossibleSteps: function(choice) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = choice.getRight().getPossibleSteps().filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, choice, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

CCSParLRule = {
  getPossibleSteps: function(parallel) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = parallel.getLeft().getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, parallel, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    step.process.setLeft(step.substeps[0].perform());
    return step.process;
  }
};

CCSParRRule = {
  getPossibleSteps: function(parallel) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = parallel.getRight().getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, parallel, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    step.process.setRight(step.substeps[0].perform());
    return step.process;
  }
};

CCSSyncRule = {
  filterStepsSyncableWithStep: function(step, steps) {
    var result, s, _i, _len;

    result = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      s = steps[_i];
      if (s.action.isSyncableWithAction(step.action)) {
        result.push(s);
      }
    }
    return result;
  },
  getPossibleSteps: function(parallel) {
    var c, l, left, r, result, right, _i, _j, _len, _len1, _right;

    left = parallel.getLeft().getPossibleSteps();
    right = parallel.getRight().getPossibleSteps();
    result = [];
    c = 0;
    for (_i = 0, _len = left.length; _i < _len; _i++) {
      l = left[_i];
      _right = CCSSyncRule.filterStepsSyncableWithStep(l, right);
      for (_j = 0, _len1 = _right.length; _j < _len1; _j++) {
        r = _right[_j];
        result.push(new CCSStep(c++, parallel, new CCSInternalActionCreate(CCSInternalChannel), this, "[" + (l.toString()) + ", " + (r.toString()) + "]", l, r));
      }
    }
    return result;
  },
  performStep: function(step) {
    var inp, out, prefix;

    inp = null;
    out = null;
    prefix = step.substeps[0].getLeaveProcesses()[0];
    if (prefix.action.supportsValuePassing()) {
      if (prefix.action.isInputAction()) {
        inp = prefix;
        out = step.substeps[1].getLeaveProcesses()[0];
      } else {
        out = prefix;
        inp = step.substeps[1].getLeaveProcesses()[0];
      }
      inp.action.incommingValue = out.action.expression.evaluate();
    }
    step.process.setLeft(step.substeps[0].perform());
    step.process.setRight(step.substeps[1].perform());
    return step.process;
  }
};

CCSResRule = {
  shouldRestrictChannel: function(chan, restr) {
    if (chan === CCSInternalChannel || chan === CCSExitChannel) {
      return false;
    }
    if (restr.length === 0) {
      return false;
    }
    if (restr[0] === "*") {
      return restr.indexOf(chan) === -1;
    } else {
      return restr.indexOf(chan) !== -1;
    }
  },
  getPossibleSteps: function(restriction) {
    var c, result, step, steps, _i, _len;

    steps = restriction.getProcess().getPossibleSteps().filterActVPPlusSteps();
    result = [];
    c = 0;
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      if (!this.shouldRestrictChannel(step.action.channel.name, restriction.restrictedChannels)) {
        result.push(new CCSStep(c++, restriction, step.action, this, null, step));
      }
    }
    return result;
  },
  performStep: function(step) {
    step.process.setProcess(step.substeps[0].perform());
    return step.process;
  }
};

CCSCondRule = {
  getPossibleSteps: function(condition) {
    if (condition.expression.evaluate()) {
      return condition.process.getPossibleSteps().filterActVPPlusSteps();
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

CCSExitRule = {
  getPossibleSteps: function(exit) {
    return [new CCSStep(0, exit, new CCSInternalActionCreate(CCSExitChannel), this)];
  },
  performStep: function(step) {
    return new Stop();
  }
};

CCSSyncExitRule = {
  getPossibleSteps: function(parallel) {
    var c, filter, l, left, r, result, right, _i, _j, _len, _len1;

    filter = function(step) {
      return step.action.channel.name === CCSExitChannel;
    };
    left = parallel.getLeft().getPossibleSteps().filter(filter);
    right = parallel.getRight().getPossibleSteps().filter(filter);
    c = 0;
    result = [];
    for (_i = 0, _len = left.length; _i < _len; _i++) {
      l = left[_i];
      for (_j = 0, _len1 = right.length; _j < _len1; _j++) {
        r = right[_j];
        result.push(new CCSStep(c++, parallel, CCSInternalActionCreate(CCSExitChannel), this, "[" + (l.toString()) + ", " + (r.toString()) + "]", l, r));
      }
    }
    return result;
  },
  performStep: function(step) {
    return SyncRule.performStep(step);
  }
};

CCSSeq1Rule = {
  getPossibleSteps: function(sequence) {
    var c, step, _i, _len, _ref3, _results;

    c = 0;
    _ref3 = sequence.getLeft().getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(c++, sequence, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    step.process.setLeft(step.substeps[0].perform());
    return step.process;
  }
};

CCSSeq2Rule = {
  getPossibleSteps: function(sequence) {
    var c, filter, result, rho, rhos, _i, _len;

    filter = function(step) {
      return step.action.channel.name === CCSExitChannel;
    };
    rhos = sequence.getLeft().getPossibleSteps().filter(filter);
    result = [];
    c = 0;
    for (_i = 0, _len = rhos.length; _i < _len; _i++) {
      rho = rhos[_i];
      result.push(new CCSStep(c++, sequence, new CCSInternalActionCreate(CCSInternalChannel), this, "[" + CCSExitChannel + "]", rho));
    }
    return result;
  },
  performStep: function(step) {
    return step.process.getRight();
  }
};

CCSRecRule = {
  getPossibleSteps: function(application) {
    var c, step, steps, _i, _len, _results;

    steps = application.getProcess().getPossibleSteps();
    c = 0;
    _results = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      _results.push(new CCSStep(c++, application, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

CCSProcessCreateView = function(stepView, process, needsBrackets) {
  if (process instanceof CCSPrefix) {
    if (process.action.isInputAction() && process.action.supportsValuePassing()) {
      return new CCSInputView(stepView, process);
    } else {
      return new CCSPrefixView(stepView, process);
    }
  } else if (process instanceof CCSCondition) {
    return new CCSConditionView(stepView, process);
  } else if (process instanceof CCSStop) {
    return new CCSStopView(stepView, process);
  } else if (process instanceof CCSExit) {
    return new CCSExitView(stepView, process);
  } else if (process instanceof CCSProcessApplication) {
    return new CCSProcessApplicationView(stepView, process);
  } else if (process instanceof CCSChoice) {
    return new CCSChoiceView(stepView, process, needsBrackets);
  } else if (process instanceof CCSParallel) {
    return new CCSParallelView(stepView, process, needsBrackets);
  } else if (process instanceof CCSSequence) {
    return new CCSSequenceView(stepView, process, needsBrackets);
  } else if (process instanceof CCSRestriction) {
    return new CCSRestrictionView(stepView, process, needsBrackets);
  } else {
    throw new Error("Process view could not be created for unknown process!");
  }
};

CCSProcessView = (function() {
  function CCSProcessView() {
    var needsBrackets, process, stepView, subviews;

    stepView = arguments[0], process = arguments[1], needsBrackets = arguments[2], subviews = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.stepView = stepView;
    this.process = process;
    this.needsBrackets = needsBrackets;
    this.subviews = subviews;
  }

  CCSProcessView.prototype.setPossibleSteps = function(steps) {
    var v, _i, _len, _ref3, _results;

    _ref3 = this.subviews;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      v = _ref3[_i];
      _results.push(v.setPossibleSteps(steps));
    }
    return _results;
  };

  CCSProcessView.prototype.setPossibleSyncableSteps = function(steps) {
    var v, _i, _len, _ref3, _results;

    _ref3 = this.subviews;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      v = _ref3[_i];
      _results.push(v.setPossibleSyncableSteps(steps));
    }
    return _results;
  };

  CCSProcessView.prototype.removeView = function() {
    var _ref3;

    return (_ref3 = this.span) != null ? _ref3.parentNode.removeChild(this.span) : void 0;
  };

  return CCSProcessView;

})();

CCSStopView = (function(_super) {
  __extends(CCSStopView, _super);

  function CCSStopView(stepView, stop) {
    CCSStopView.__super__.constructor.call(this, stepView, stop, false);
  }

  CCSStopView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    t = document.createTextNode("0");
    this.span.appendChild(t);
    return this.span;
  };

  return CCSStopView;

})(CCSProcessView);

CCSExitView = (function(_super) {
  __extends(CCSExitView, _super);

  function CCSExitView(stepView, exit) {
    CCSExitView.__super__.constructor.call(this, stepView, exit, false);
  }

  CCSExitView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.a = document.createElement("A");
    this.span.appendChild(this.a);
    this.a.setAttribute("HREF", "javascript:void(0)");
    this.a.__this = this;
    this._setEnabled(false);
    t = document.createTextNode("1");
    this.a.appendChild(t);
    return this.span;
  };

  CCSExitView.prototype._setEnabled = function(enabled) {
    if (!this.a) {
      return;
    }
    if (enabled) {
      this.a.setAttribute("CLASS", "ccs_step");
      return this.a.addEventListener("click", this._handleClick);
    } else {
      this.a.setAttribute("CLASS", "ccs_step disabled");
      return this.a.removeEventListener("click", this._handleClick);
    }
  };

  CCSExitView.prototype.setPossibleSteps = function(steps) {
    var p, s, _i, _len, _ref3;

    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (p === this.process) {
        this.steps.push([p, s]);
      }
    }
    return this._setEnabled(this.steps.length > 0);
  };

  CCSExitView.prototype.setPossibleSyncableSteps = function(steps) {
    return this.setPossibleSteps(steps);
  };

  CCSExitView.prototype._handleClick = function(event) {
    return this.__this.stepView._handleExitSelection(this.__this);
  };

  return CCSExitView;

})(CCSProcessView);

CCSProcessApplicationView = (function(_super) {
  __extends(CCSProcessApplicationView, _super);

  function CCSProcessApplicationView(stepView, application) {
    CCSProcessApplicationView.__super__.constructor.call(this, stepView, application, false);
  }

  CCSProcessApplicationView.prototype.getNode = function() {
    var sup;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    sup = document.createElement("SUP");
    this.span.appendChild(sup);
    this.toggleA = document.createElement("A");
    sup.appendChild(this.toggleA);
    this.toggleA.setAttribute("HREF", "javascript:void(0)");
    this.toggleA.setAttribute("CLASS", "ccs_toggle_process");
    this.toggleA.innerHTML = "\u21e3";
    this.toggleA.__this = this;
    this.toggleA.addEventListener("click", this._handleClick);
    this._setEnabled(false);
    this.subspan = document.createElement("SPAN");
    this.span.appendChild(this.subspan);
    this.badge = document.createElement("SUP");
    this.steps = [];
    this.setShowsProcess(false);
    this.span.appendChild(this.badge);
    this.badge.setAttribute("CLASS", "ccs_badge");
    this._setBadge(0);
    return this.span;
  };

  CCSProcessApplicationView.prototype._setEnabled = function(enabled) {
    if (enabled) {
      return this.toggleA.style.display = "inline";
    }
    return this.toggleA.style.display = "none";
  };

  CCSProcessApplicationView.prototype._setBadge = function(num) {
    this.badge.style.display = num <= 0 ? "none" : "inline";
    return this.badge.innerHTML = num;
  };

  CCSProcessApplicationView.prototype.setShowsProcess = function(flag) {
    if (flag === this.showsProcess) {
      return;
    }
    this.showsProcess = flag;
    this.subspan.innerHTML = "";
    if (flag) {
      if (!this.subviews[0]) {
        this.subviews[0] = CCSProcessCreateView(this.stepView, this.process.getProcess(), false);
      }
      this.subspan.appendChild(this.subviews[0].getNode());
      this._setBadge(0);
      this.toggleA.innerHTML = "\u21e1";
      return this.setPossibleSteps(this.steps, true);
    } else {
      this.subspan.appendChild(document.createTextNode(this.process.toString()));
      this._setBadge(this.steps.length);
      return this.toggleA.innerHTML = "\u21e3";
    }
  };

  CCSProcessApplicationView.prototype._isProcessResponsibleForStep = function(step) {
    var s, _i, _len, _ref3;

    if (step.process === this.process) {
      return true;
    }
    _ref3 = step.substeps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      s = _ref3[_i];
      if (this._isProcessResponsibleForStep(s)) {
        return true;
      }
    }
    return false;
  };

  CCSProcessApplicationView.prototype.setPossibleSteps = function(steps, superonly) {
    var exits, p, prefixes, s, _i, _len, _ref3;

    if (superonly == null) {
      superonly = false;
    }
    if (superonly) {
      return CCSProcessApplicationView.__super__.setPossibleSteps.call(this, steps);
    }
    this._setEnabled(steps.length > 0);
    prefixes = this.process.getPrefixes();
    exits = this.process.getExits();
    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (prefixes.indexOf(p) !== -1 || exits.indexOf(p) !== -1) {
        this.steps.push([p, s]);
      }
    }
    if (this.showsProcess) {
      return CCSProcessApplicationView.__super__.setPossibleSteps.call(this, steps);
    }
    return this._setBadge(this.steps.length);
  };

  CCSProcessApplicationView.prototype._handleClick = function(event) {
    return this.__this.setShowsProcess(!this.__this.showsProcess);
  };

  return CCSProcessApplicationView;

})(CCSProcessView);

/* - CCSProcessApplicationProxyView
class CCSProcessApplicationProxyView extends CCSProcessView
	constructor: (stepView, proxy, needsBrackets) ->
		super stepView, proxy, false, CCSProcessCreateView(stepView, proxy.subprocess, needsBrackets)
	getNode: ->
		return @span if @span
		@span = document.createElement("SPAN")
		sup = document.createElement("SUP")
		@span.appendChild(sup)
		@toggleA = document.createElement("A")
		sup.appendChild(@toggleA)
		@toggleA.setAttribute("HREF", "javascript:void(0)")
		@toggleA.setAttribute("CLASS", "ccs_toggle_process")
		@toggleA.innerHTML = "\u21e1"
		@toggleA.__this = @
		@toggleA.addEventListener("click", @_handleClick)
		@_setEnabled(false)
		@subSpan = @subviews[0].getNode()
		@span.appendChild(@subSpan)
		return @span
	_setEnabled: (enabled) ->
		return @toggleA.style.display = "inline" if enabled
		@toggleA.style.display = "none"
	setPossibleSteps: (steps) -> 
		super steps
		@steps = []
		(
			@steps.push([p,s]) if p == @process
		) for [p, s] in steps
		@_setEnabled(@steps.length > 0)
	_handleClick: (event) -> this.__this.stepView._handleProcessCollapse(this.__this)
*/


CCSPrefixView = (function(_super) {
  __extends(CCSPrefixView, _super);

  function CCSPrefixView(stepView, prefix) {
    CCSPrefixView.__super__.constructor.call(this, stepView, prefix, false, CCSProcessCreateView(stepView, prefix.getProcess()));
    this.allowsInternalActions = true;
  }

  CCSPrefixView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.a = document.createElement("A");
    this.span.appendChild(this.a);
    this.a.setAttribute("HREF", "javascript:void(0)");
    this.a.__this = this;
    this._setEnabled(false);
    t = document.createTextNode(this.process.action.toString());
    this.a.appendChild(t);
    t = document.createTextNode(".");
    this.span.appendChild(t);
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    return this.span;
  };

  CCSPrefixView.prototype._setEnabled = function(enabled) {
    if (!this.a) {
      return;
    }
    if (enabled) {
      this.a.setAttribute("CLASS", "ccs_step");
      return this.a.addEventListener("click", this._handleClick);
    } else {
      this.a.setAttribute("CLASS", "ccs_step disabled");
      return this.a.removeEventListener("click", this._handleClick);
    }
  };

  CCSPrefixView.prototype.setPossibleSteps = function(steps) {
    var p, s, _i, _len, _ref3;

    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (p === this.process && (this.allowsInternalActions || s.action.channel !== CCSInternalChannel)) {
        this.steps.push([p, s]);
      }
    }
    return this._setEnabled(this.steps.length > 0);
  };

  CCSPrefixView.prototype.setPossibleSyncableSteps = function(steps) {
    return this.setPossibleSteps(steps);
  };

  CCSPrefixView.prototype._handleClick = function(event) {
    return this.__this.stepView._handleActionSelection(this.__this);
  };

  return CCSPrefixView;

})(CCSProcessView);

CCSInputView = (function(_super) {
  __extends(CCSInputView, _super);

  function CCSInputView(stepView, prefix) {
    CCSInputView.__super__.constructor.call(this, stepView, prefix);
  }

  CCSInputView.prototype.getNode = function() {
    CCSInputView.__super__.getNode.apply(this, arguments);
    /*
    		@input = document.createElement("INPUT")
    		equals = document.createTextNode("=")
    		dot = @a.nextSibling
    		@span.insertBefore(equals, dot)
    		@span.insertBefore(@input, dot)
    		@input.setAttribute("CLASS", "ccs_input")
    */

    return this.span;
  };

  return CCSInputView;

})(CCSPrefixView);

CCSConditionView = (function(_super) {
  __extends(CCSConditionView, _super);

  function CCSConditionView(stepView, condition) {
    CCSConditionView.__super__.constructor.call(this, stepView, condition, false, CCSProcessCreateView(stepView, condition.process));
  }

  CCSConditionView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    t = document.createTextNode("when (" + (this.process.expression.toString()) + ") ");
    this.span.appendChild(t);
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    return this.span;
  };

  return CCSConditionView;

})(CCSProcessView);

CCSChoiceView = (function(_super) {
  __extends(CCSChoiceView, _super);

  function CCSChoiceView(stepView, choice, needsBrackets) {
    var lv, rv;

    lv = CCSProcessCreateView(stepView, choice.getLeft(), choice.needsBracketsForSubprocess(choice.getLeft()));
    rv = CCSProcessCreateView(stepView, choice.getRight(), choice.needsBracketsForSubprocess(choice.getRight()));
    CCSChoiceView.__super__.constructor.call(this, stepView, choice, needsBrackets, lv, rv);
  }

  CCSChoiceView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.leftSpan = this.subviews[0].getNode();
    this.rightSpan = this.subviews[1].getNode();
    this.span.appendChild(this.leftSpan);
    t = document.createTextNode(" + ");
    this.span.appendChild(t);
    this.span.appendChild(this.rightSpan);
    return this.span;
  };

  return CCSChoiceView;

})(CCSProcessView);

CCSParallelView = (function(_super) {
  __extends(CCSParallelView, _super);

  function CCSParallelView(stepView, parallel, needsBrackets) {
    var lv, rv;

    lv = CCSProcessCreateView(stepView, parallel.getLeft(), parallel.needsBracketsForSubprocess(parallel.getLeft()));
    rv = CCSProcessCreateView(stepView, parallel.getRight(), parallel.needsBracketsForSubprocess(parallel.getRight()));
    CCSParallelView.__super__.constructor.call(this, stepView, parallel, needsBrackets, lv, rv);
  }

  CCSParallelView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    if (this.needsBrackets) {
      this.span.appendChild(document.createTextNode("("));
    }
    this.leftSpan = this.subviews[0].getNode();
    this.rightSpan = this.subviews[1].getNode();
    this.span.appendChild(this.leftSpan);
    t = document.createTextNode(" | ");
    this.span.appendChild(t);
    this.span.appendChild(this.rightSpan);
    if (this.needsBrackets) {
      this.span.appendChild(document.createTextNode(")"));
    }
    return this.span;
  };

  return CCSParallelView;

})(CCSProcessView);

CCSSequenceView = (function(_super) {
  __extends(CCSSequenceView, _super);

  function CCSSequenceView(stepView, sequence, needsBrackets) {
    CCSSequenceView.__super__.constructor.call(this, stepView, sequence, needsBrackets, CCSProcessCreateView(stepView, sequence.getLeft()), CCSProcessCreateView(this.stepView, sequence.getRight()));
  }

  CCSSequenceView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.leftSpan = this.subviews[0].getNode();
    this.rightSpan = this.subviews[1].getNode();
    this.span.appendChild(this.leftSpan);
    t = document.createTextNode(" ; ");
    this.span.appendChild(t);
    this.span.appendChild(this.rightSpan);
    return this.span;
  };

  CCSSequenceView.prototype.setPossibleSteps = function(steps) {
    return this.subviews[0].setPossibleSteps(steps);
  };

  return CCSSequenceView;

})(CCSProcessView);

CCSRestrictionView = (function(_super) {
  __extends(CCSRestrictionView, _super);

  function CCSRestrictionView(stepView, restriction, needsBrackets) {
    CCSRestrictionView.__super__.constructor.call(this, stepView, restriction, needsBrackets, CCSProcessCreateView(stepView, restriction.getProcess()));
  }

  CCSRestrictionView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    t = document.createTextNode(" \\ {" + (this.process.restrictedChannels.join(", ")) + "}");
    this.span.appendChild(t);
    return this.span;
  };

  return CCSRestrictionView;

})(CCSProcessView);

CCSStepView = (function() {
  function CCSStepView(ccs) {
    this.ccs = ccs;
    this.syncableSteps = null;
  }

  CCSStepView.prototype.getNode = function() {
    if (this.p) {
      return this.p;
    }
    this.p = document.createElement("P");
    this.p.setAttribute("CLASS", "ccs_view");
    this.system = this.ccs.system.copy();
    this.rootView = CCSProcessCreateView(this, this.system);
    this.p.appendChild(this.rootView.getNode());
    this._updatePossibleSteps();
    return this.p;
  };

  CCSStepView.prototype._setPossibleSteps = function(steps) {
    var p, s;

    this.steps = ((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        s = steps[_i];
        _results.push((function() {
          var _j, _len1, _ref3, _results1;

          _ref3 = s.getLeaveProcesses();
          _results1 = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            p = _ref3[_j];
            _results1.push([p, s]);
          }
          return _results1;
        })());
      }
      return _results;
    })()).concatChildren();
    return this.rootView.setPossibleSteps(this.steps);
  };

  CCSStepView.prototype._setPossibleSyncableSteps = function(steps) {
    var p, s;

    this.syncableSteps = ((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        s = steps[_i];
        _results.push((function() {
          var _j, _len1, _ref3, _results1;

          _ref3 = s.getLeaveProcesses();
          _results1 = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            p = _ref3[_j];
            _results1.push([p, s]);
          }
          return _results1;
        })());
      }
      return _results;
    })()).concatChildren();
    return this.rootView.setPossibleSteps(this.syncableSteps);
  };

  CCSStepView.prototype._handleActionSelection = function(prefixView) {
    var p, s;

    this.prefixView = prefixView;
    if (this.syncableSteps) {
      this.prefixView.allowsInternalActions = true;
      this.syncableSteps = null;
      if (this.prefixView.steps.length !== 1) {
        console.warn("Prefix view has more than one possible step: " + this.prefixView.steps);
      }
      this.system = this.prefixView.steps[0][1].perform();
      return this._checkSystemChanges();
    } else {
      this.prefixView.allowsInternalActions = false;
      return this._setPossibleSyncableSteps((function() {
        var _i, _len, _ref3, _ref4, _results;

        _ref3 = this.prefixView.steps;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          _ref4 = _ref3[_i], p = _ref4[0], s = _ref4[1];
          _results.push(s);
        }
        return _results;
      }).call(this));
    }
  };

  CCSStepView.prototype._handleExitSelection = function(exitView) {
    if (exitView.steps.length !== 1) {
      console.warn("Exit view has more than one possible step: " + exitView.steps);
    }
    this.system = exitView.steps[0][1].perform();
    return this._checkSystemChanges();
  };

  CCSStepView.prototype._checkSystemChanges = function() {
    this.rootView.removeView();
    this.rootView = CCSProcessCreateView(this, this.system);
    this.p.appendChild(this.rootView.getNode());
    return this._updatePossibleSteps();
  };

  CCSStepView.prototype._updatePossibleSteps = function() {
    if (!this.rootView) {
      return;
    }
    return this._setPossibleSteps(this.system.getPossibleSteps());
  };

  return CCSStepView;

})();

/*

	The following classes represent the PseuCo tree. Its implementation is partly incomplete.
	Method _getType is not implemented everywhere and does not perform type checking anywhere at the moment!
	
	toString returns the string representation of the tree with minimal brackets and correctly indented.
*/


PCIndent = "   ";

PCNode = (function() {
  function PCNode() {
    var c, children, _i, _len, _ref3;

    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.children = children;
    this.parent = null;
    _ref3 = this.children;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      c = _ref3[_i];
      c.parent = this;
    }
  }

  PCNode.prototype.getType = function(env) {
    if (!this._type) {
      this._type = this._getType(env);
      if (!this._type) {
        this._type = true;
      }
    }
    if (this._type === true) {
      return null;
    } else {
      return this._type;
    }
  };

  PCNode.prototype._getType = function() {
    throw new Error("Not implemented");
  };

  return PCNode;

})();

PCProgram = (function(_super) {
  __extends(PCProgram, _super);

  function PCProgram() {
    _ref3 = PCProgram.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  PCProgram.prototype.collectClasses = function(env) {
    var c, _i, _len, _ref4, _results;

    _ref4 = this.children;
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      c = _ref4[_i];
      _results.push(c.collectClasses(env));
    }
    return _results;
  };

  PCProgram.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref4, _results;

    _ref4 = this.children;
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      c = _ref4[_i];
      _results.push(c.collectEnvironment(env));
    }
    return _results;
  };

  PCProgram.prototype.toString = function() {
    var o;

    return ((function() {
      var _i, _len, _ref4, _results;

      _ref4 = this.children;
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        o = _ref4[_i];
        _results.push(o.toString(""));
      }
      return _results;
    }).call(this)).join("\n");
  };

  return PCProgram;

})(PCNode);

PCMainAgent = (function(_super) {
  __extends(PCMainAgent, _super);

  function PCMainAgent() {
    _ref4 = PCMainAgent.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  PCMainAgent.prototype.collectClasses = function(env) {
    return null;
  };

  PCMainAgent.prototype.collectEnvironment = function(env) {
    env.beginMainAgent();
    this.children[0].collectEnvironment(env);
    return env.endMainAgent();
  };

  PCMainAgent.prototype.toString = function() {
    return "mainAgent " + this.children[0].toString("");
  };

  return PCMainAgent;

})(PCNode);

PCProcedureDecl = (function(_super) {
  __extends(PCProcedureDecl, _super);

  function PCProcedureDecl() {
    var body, name, parameters, resultType;

    resultType = arguments[0], name = arguments[1], body = arguments[2], parameters = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.name = name;
    parameters.unshift(resultType, body);
    PCProcedureDecl.__super__.constructor.apply(this, parameters);
  }

  PCProcedureDecl.prototype.getResultType = function() {
    return this.children[0];
  };

  PCProcedureDecl.prototype.getBody = function() {
    return this.children[1];
  };

  PCProcedureDecl.prototype.getArgumentCount = function() {
    return this.children.length - 2;
  };

  PCProcedureDecl.prototype.getArgumentAtIndex = function(index) {
    return this.children[index + 2];
  };

  PCProcedureDecl.prototype.collectClasses = function(env) {
    return null;
  };

  PCProcedureDecl.prototype.collectEnvironment = function(env) {
    var args, p;

    args = (function() {
      var _i, _len, _ref5, _results;

      _ref5 = this.children.slice(2, this.children.length);
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i += 1) {
        p = _ref5[_i];
        _results.push(p.getVariable(env));
      }
      return _results;
    }).call(this);
    env.beginNewProcedure(this, this.name, this.getResultType().getType(env).type, args);
    this.getBody().collectEnvironment(env);
    return env.endProcedure();
  };

  PCProcedureDecl.prototype.toString = function(indent) {
    var i;

    return "" + indent + (this.getResultType().toString()) + " " + this.name + "(" + (((function() {
      var _i, _ref5, _results;

      _results = [];
      for (i = _i = 0, _ref5 = this.getArgumentCount(); _i < _ref5; i = _i += 1) {
        _results.push(this.getArgumentAtIndex(i).toString());
      }
      return _results;
    }).call(this)).join(", ")) + ") " + (this.getBody().toString(indent));
  };

  return PCProcedureDecl;

})(PCNode);

PCFormalParameter = (function(_super) {
  __extends(PCFormalParameter, _super);

  function PCFormalParameter(type, identifier) {
    this.identifier = identifier;
    PCFormalParameter.__super__.constructor.call(this, type);
  }

  PCFormalParameter.prototype.getVariable = function(env) {
    return new PCVariable(this, this.identifier, this.children[0].getType(env).type);
  };

  PCFormalParameter.prototype.toString = function() {
    return this.children[0].toString() + " " + this.identifier;
  };

  return PCFormalParameter;

})(PCNode);

PCMonitor = (function(_super) {
  __extends(PCMonitor, _super);

  function PCMonitor() {
    var declarations, name;

    name = arguments[0], declarations = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.name = name;
    PCMonitor.__super__.constructor.apply(this, declarations);
  }

  PCMonitor.prototype.collectClasses = function(env) {
    return env.processNewClass(this, new PCTClassType(true, this.name));
  };

  PCMonitor.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref5;

    env.beginClass(this.name);
    _ref5 = this.children;
    for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
      c = _ref5[_i];
      c.collectEnvironment(env);
    }
    return env.endClass();
  };

  PCMonitor.prototype.toString = function() {
    var o;

    return "monitor " + this.name + " {\n" + (((function() {
      var _i, _len, _ref5, _results;

      _ref5 = this.children;
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        o = _ref5[_i];
        _results.push(o.toString(PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n}";
  };

  return PCMonitor;

})(PCNode);

PCStruct = (function(_super) {
  __extends(PCStruct, _super);

  function PCStruct() {
    var declarations, name;

    name = arguments[0], declarations = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.name = name;
    PCStruct.__super__.constructor.apply(this, declarations);
  }

  PCStruct.prototype.collectClasses = function(env) {
    return env.processNewClass(this, new PCTClassType(false, this.name));
  };

  PCStruct.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref5;

    env.beginClass(this.name);
    _ref5 = this.children;
    for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
      c = _ref5[_i];
      c.collectEnvironment(env);
    }
    return env.endClass();
  };

  PCStruct.prototype.toString = function() {
    var o;

    return "struct " + this.name + " {\n" + (((function() {
      var _i, _len, _ref5, _results;

      _ref5 = this.children;
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        o = _ref5[_i];
        _results.push(o.toString(PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n}";
  };

  return PCStruct;

})(PCNode);

PCConditionDecl = (function(_super) {
  __extends(PCConditionDecl, _super);

  function PCConditionDecl(name, expression) {
    this.name = name;
    PCConditionDecl.__super__.constructor.call(this, expression);
  }

  PCConditionDecl.prototype.getExpression = function() {
    return this.children[0];
  };

  PCConditionDecl.prototype.collectEnvironment = function(env) {
    return env.processNewVariable(new PCVariable(this, this.name, new PCTType(PCTType.CONDITION)));
  };

  PCConditionDecl.prototype.toString = function(indent) {
    return "" + indent + "condition " + this.name + " with " + (this.children[0].toString()) + ";";
  };

  return PCConditionDecl;

})(PCNode);

PCDecl = (function(_super) {
  __extends(PCDecl, _super);

  function PCDecl() {
    _ref5 = PCDecl.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  PCDecl.prototype.getType = function() {
    return this.children[0];
  };

  PCDecl.prototype.getDeclarators = function() {
    return this.children.slice(1);
  };

  PCDecl.prototype.collectClasses = function(env) {
    return null;
  };

  PCDecl.prototype.collectEnvironment = function(env) {
    var i, type, _i, _ref6, _results;

    type = this.children[0].getType(env).type;
    _results = [];
    for (i = _i = 1, _ref6 = this.children.length; _i < _ref6; i = _i += 1) {
      _results.push(this.children[i].collectEnvironment(env, type));
    }
    return _results;
  };

  PCDecl.prototype.toString = function(indent) {
    return indent + this.children[0].toString() + " " + this.children[1].toString();
  };

  return PCDecl;

})(PCNode);

PCDeclStmt = (function(_super) {
  __extends(PCDeclStmt, _super);

  function PCDeclStmt() {
    _ref6 = PCDeclStmt.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  PCDeclStmt.prototype.toString = function(indent) {
    return PCDeclStmt.__super__.toString.apply(this, arguments) + ";";
  };

  return PCDeclStmt;

})(PCDecl);

PCVariableDeclarator = (function(_super) {
  __extends(PCVariableDeclarator, _super);

  function PCVariableDeclarator(name, initializer) {
    this.name = name;
    if (initializer) {
      PCVariableDeclarator.__super__.constructor.call(this, initializer);
    } else {
      PCVariableDeclarator.__super__.constructor.apply(this, []);
    }
  }

  PCVariableDeclarator.prototype.getInitializer = function() {
    if (this.children.length > 0) {
      return this.children[0];
    } else {
      return null;
    }
  };

  PCVariableDeclarator.prototype.getTypeNode = function() {
    return this.parent.getType();
  };

  PCVariableDeclarator.prototype.collectEnvironment = function(env, type) {
    return env.processNewVariable(new PCVariable(this, this.name, type));
  };

  PCVariableDeclarator.prototype.toString = function() {
    var res;

    res = this.name;
    if (this.children.length > 0) {
      res += " " + (this.children[0].toString());
    }
    return res;
  };

  return PCVariableDeclarator;

})(PCNode);

PCVariableInitializer = (function(_super) {
  __extends(PCVariableInitializer, _super);

  function PCVariableInitializer() {
    var children, isUncompletedArray;

    isUncompletedArray = arguments[0], children = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.isUncompletedArray = isUncompletedArray != null ? isUncompletedArray : false;
    PCVariableInitializer.__super__.constructor.apply(this, children);
  }

  PCVariableInitializer.prototype.isArray = function() {
    return !(this.children[0] instanceof PCExpression);
  };

  PCVariableInitializer.prototype.toString = function() {
    var o;

    if (this.children[0] instanceof PCExpression) {
      return "= " + (this.children[0].toString());
    } else {
      return "{" + (((function() {
        var _i, _len, _ref7, _results;

        _ref7 = this.children;
        _results = [];
        for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
          o = _ref7[_i];
          _results.push(o.toString());
        }
        return _results;
      }).call(this)).join(", ")) + (this.isUncompletedArray ? "," : "") + "}";
    }
  };

  return PCVariableInitializer;

})(PCNode);

PCArrayType = (function(_super) {
  __extends(PCArrayType, _super);

  function PCArrayType(baseType, size) {
    this.size = size;
    PCArrayType.__super__.constructor.call(this, baseType);
  }

  PCArrayType.prototype._getType = function() {
    return new PCTTypeType(new PCTArrayType(this.children[0].getType().type, this.size));
  };

  PCArrayType.prototype.toString = function() {
    return "" + this.children[0] + "[" + this.size + "]";
  };

  return PCArrayType;

})(PCNode);

PCBaseType = (function(_super) {
  __extends(PCBaseType, _super);

  function PCBaseType() {
    PCBaseType.__super__.constructor.apply(this, []);
  }

  return PCBaseType;

})(PCNode);

PCSimpleType = (function(_super) {
  __extends(PCSimpleType, _super);

  function PCSimpleType(type) {
    this.type = type;
    if (this.type < 0 || this.type > 5) {
      throw "Unknown type";
    }
    PCSimpleType.__super__.constructor.apply(this, arguments);
  }

  PCSimpleType.prototype._getType = function() {
    return new PCTTypeType(new PCTType(PCSimpleType.typeToTypeKind(this.type)));
  };

  PCSimpleType.prototype.toString = function() {
    return PCSimpleType.typeToString(this.type);
  };

  return PCSimpleType;

})(PCBaseType);

PCSimpleType.VOID = 0;

PCSimpleType.BOOL = 1;

PCSimpleType.INT = 2;

PCSimpleType.STRING = 3;

PCSimpleType.MUTEX = 4;

PCSimpleType.AGENT = 5;

PCSimpleType.typeToString = function(type) {
  switch (type) {
    case PCSimpleType.VOID:
      return "void";
    case PCSimpleType.BOOL:
      return "bool";
    case PCSimpleType.INT:
      return "int";
    case PCSimpleType.STRING:
      return "string";
    case PCSimpleType.MUTEX:
      return "mutex";
    case PCSimpleType.AGENT:
      return "agent";
    default:
      throw new Error("Unknown type!");
  }
};

PCSimpleType.typeToTypeKind = function(type) {
  switch (type) {
    case PCSimpleType.MUTEX:
      return PCTType.MUTEX;
    case PCSimpleType.AGENT:
      return PCTType.AGENT;
    case PCSimpleType.VOID:
      return PCTType.VOID;
    case PCSimpleType.BOOL:
      return PCTType.BOOL;
    case PCSimpleType.INT:
      return PCTType.INT;
    case PCSimpleType.STRING:
      return PCTType.STRING;
    default:
      throw new Error("Unknown type!");
  }
};

PCChannelType = (function(_super) {
  __extends(PCChannelType, _super);

  function PCChannelType(valueType, capacity) {
    this.valueType = valueType;
    this.capacity = capacity;
    PCChannelType.__super__.constructor.apply(this, []);
  }

  PCChannelType.prototype._getType = function() {
    return new PCTTypeType(new PCTChannelType(new PCTType(PCSimpleType.typeToTypeKind(this.valueType)), this.capacity));
  };

  PCChannelType.prototype.toString = function() {
    return "" + (PCSimpleType.typeToString(this.valueType)) + "chan" + (this.capacity !== PCChannelType.CAPACITY_UNKNOWN ? this.capacity : "");
  };

  return PCChannelType;

})(PCNode);

PCChannelType.CAPACITY_UNKNOWN = -1;

PCClassType = (function(_super) {
  __extends(PCClassType, _super);

  function PCClassType(className) {
    this.className = className;
    PCClassType.__super__.constructor.apply(this, arguments);
  }

  PCClassType.prototype._getType = function(env) {
    return new PCTTypeType(env.getClassWithName(this.className).type);
  };

  PCClassType.prototype.toString = function() {
    return this.className;
  };

  return PCClassType;

})(PCBaseType);

PCExpression = (function(_super) {
  __extends(PCExpression, _super);

  function PCExpression() {
    _ref7 = PCExpression.__super__.constructor.apply(this, arguments);
    return _ref7;
  }

  PCExpression.prototype.childToString = function(i, diff) {
    var res;

    if (i == null) {
      i = 0;
    }
    if (diff == null) {
      diff = 0;
    }
    res = this.children[i].toString();
    if (this.getPrecedence() + diff > this.children[i].getPrecedence()) {
      res = "(" + res + ")";
    }
    return res;
  };

  return PCExpression;

})(PCNode);

PCStartExpression = (function(_super) {
  __extends(PCStartExpression, _super);

  function PCStartExpression() {
    _ref8 = PCStartExpression.__super__.constructor.apply(this, arguments);
    return _ref8;
  }

  PCStartExpression.prototype.getPrecedence = function() {
    return 42;
  };

  PCStartExpression.prototype.toString = function() {
    return "start " + (this.childToString(0));
  };

  PCStartExpression.prototype._getType = function() {
    return new PCType(PCType.AGENT);
  };

  return PCStartExpression;

})(PCExpression);

PCAssignExpression = (function(_super) {
  __extends(PCAssignExpression, _super);

  function PCAssignExpression(destination, operator, expression) {
    this.operator = operator;
    PCAssignExpression.__super__.constructor.call(this, destination, expression);
  }

  PCAssignExpression.prototype.getDestination = function() {
    return this.children[0];
  };

  PCAssignExpression.prototype.getExpression = function() {
    return this.children[1];
  };

  PCAssignExpression.prototype._getType = function(env) {
    return this.children[1].getType(env);
  };

  PCAssignExpression.prototype.getPrecedence = function() {
    return 39;
  };

  PCAssignExpression.prototype.toString = function() {
    return "" + (this.getDestination().toString()) + " " + this.operator + " " + (this.childToString(1));
  };

  return PCAssignExpression;

})(PCExpression);

PCAssignDestination = (function(_super) {
  __extends(PCAssignDestination, _super);

  function PCAssignDestination() {
    var arrayIndexExpressions, identifier;

    identifier = arguments[0], arrayIndexExpressions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.identifier = identifier;
    PCAssignDestination.__super__.constructor.apply(this, arrayIndexExpressions);
  }

  PCAssignDestination.prototype.toString = function() {
    var o;

    return "" + this.identifier + (((function() {
      var _i, _len, _ref9, _results;

      _ref9 = this.children;
      _results = [];
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        o = _ref9[_i];
        _results.push("[" + (o.toString()) + "]");
      }
      return _results;
    }).call(this)).join(""));
  };

  return PCAssignDestination;

})(PCNode);

PCSendExpression = (function(_super) {
  __extends(PCSendExpression, _super);

  function PCSendExpression() {
    _ref9 = PCSendExpression.__super__.constructor.apply(this, arguments);
    return _ref9;
  }

  PCSendExpression.prototype._getType = function(env) {
    return this.children[1].getType(env);
  };

  PCSendExpression.prototype.getPrecedence = function() {
    return 39;
  };

  PCSendExpression.prototype.toString = function() {
    return "" + (this.childToString(0, 1)) + " <! " + (this.childToString(1));
  };

  return PCSendExpression;

})(PCExpression);

PCConditionalExpression = (function(_super) {
  __extends(PCConditionalExpression, _super);

  function PCConditionalExpression() {
    _ref10 = PCConditionalExpression.__super__.constructor.apply(this, arguments);
    return _ref10;
  }

  PCConditionalExpression.prototype._getType = function(env) {
    return this.children[1].getType(env);
  };

  PCConditionalExpression.prototype.getPrecedence = function() {
    return 45;
  };

  PCConditionalExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " ? " + (this.children[1].toString()) + " : " + (this.children[2].toString());
  };

  return PCConditionalExpression;

})(PCExpression);

PCOrExpression = (function(_super) {
  __extends(PCOrExpression, _super);

  function PCOrExpression() {
    _ref11 = PCOrExpression.__super__.constructor.apply(this, arguments);
    return _ref11;
  }

  PCOrExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCOrExpression.prototype.getPrecedence = function() {
    return 48;
  };

  PCOrExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " || " + (this.childToString(1, 1));
  };

  return PCOrExpression;

})(PCExpression);

PCAndExpression = (function(_super) {
  __extends(PCAndExpression, _super);

  function PCAndExpression() {
    _ref12 = PCAndExpression.__super__.constructor.apply(this, arguments);
    return _ref12;
  }

  PCAndExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCAndExpression.prototype.getPrecedence = function() {
    return 51;
  };

  PCAndExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " && " + (this.childToString(1, 1));
  };

  return PCAndExpression;

})(PCExpression);

PCEqualityExpression = (function(_super) {
  __extends(PCEqualityExpression, _super);

  function PCEqualityExpression(left, operator, right) {
    this.operator = operator;
    PCEqualityExpression.__super__.constructor.call(this, left, right);
  }

  PCEqualityExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCEqualityExpression.prototype.getPrecedence = function() {
    return 54;
  };

  PCEqualityExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCEqualityExpression;

})(PCExpression);

PCRelationalExpression = (function(_super) {
  __extends(PCRelationalExpression, _super);

  function PCRelationalExpression(left, operator, right) {
    this.operator = operator;
    PCRelationalExpression.__super__.constructor.call(this, left, right);
  }

  PCRelationalExpression.prototype._getType = function() {
    return new PCTType(PCType.BOOL);
  };

  PCRelationalExpression.prototype.getPrecedence = function() {
    return 57;
  };

  PCRelationalExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCRelationalExpression;

})(PCExpression);

PCAdditiveExpression = (function(_super) {
  __extends(PCAdditiveExpression, _super);

  function PCAdditiveExpression(left, operator, right) {
    this.operator = operator;
    PCAdditiveExpression.__super__.constructor.call(this, left, right);
  }

  PCAdditiveExpression.prototype._getType = function() {
    return new PCTType(PCType.INT);
  };

  PCAdditiveExpression.prototype.getPrecedence = function() {
    return 60;
  };

  PCAdditiveExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCAdditiveExpression;

})(PCExpression);

PCMultiplicativeExpression = (function(_super) {
  __extends(PCMultiplicativeExpression, _super);

  function PCMultiplicativeExpression(left, operator, right) {
    this.operator = operator;
    PCMultiplicativeExpression.__super__.constructor.call(this, left, right);
  }

  PCMultiplicativeExpression.prototype._getType = function() {
    return new PCTType(PCType.INT);
  };

  PCMultiplicativeExpression.prototype.getPrecedence = function() {
    return 63;
  };

  PCMultiplicativeExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + " " + this.operator + " " + (this.childToString(1, 1));
  };

  return PCMultiplicativeExpression;

})(PCExpression);

PCUnaryExpression = (function(_super) {
  __extends(PCUnaryExpression, _super);

  function PCUnaryExpression(operator, expression) {
    this.operator = operator;
    PCUnaryExpression.__super__.constructor.call(this, expression);
  }

  PCUnaryExpression.prototype._getType = function(env) {
    return this.children[0].getType(env);
  };

  PCUnaryExpression.prototype.getPrecedence = function() {
    return 66;
  };

  PCUnaryExpression.prototype.toString = function() {
    return "" + this.operator + (this.childToString(0));
  };

  return PCUnaryExpression;

})(PCExpression);

PCPostfixExpression = (function(_super) {
  __extends(PCPostfixExpression, _super);

  function PCPostfixExpression(assignDestination, operator) {
    this.operator = operator;
    PCPostfixExpression.__super__.constructor.call(this, assignDestination);
  }

  PCPostfixExpression.prototype._getType = function() {
    return new PCTType(PCType.INT);
  };

  PCPostfixExpression.prototype.getPrecedence = function() {
    return 69;
  };

  PCPostfixExpression.prototype.toString = function() {
    return "" + (this.childToString(0)) + this.operator;
  };

  return PCPostfixExpression;

})(PCExpression);

PCReceiveExpression = (function(_super) {
  __extends(PCReceiveExpression, _super);

  function PCReceiveExpression() {
    _ref13 = PCReceiveExpression.__super__.constructor.apply(this, arguments);
    return _ref13;
  }

  PCReceiveExpression.prototype._getType = function(env) {
    return this.children[0].getType(env).chanelledType;
  };

  PCReceiveExpression.prototype.getPrecedence = function() {
    return 72;
  };

  PCReceiveExpression.prototype.toString = function() {
    return "<? " + (this.childToString(0));
  };

  return PCReceiveExpression;

})(PCExpression);

PCProcedureCall = (function(_super) {
  __extends(PCProcedureCall, _super);

  function PCProcedureCall() {
    var args, procedureName;

    procedureName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.procedureName = procedureName;
    PCProcedureCall.__super__.constructor.apply(this, args);
  }

  PCProcedureCall.prototype.getProcedure = function(env, className) {
    return (className ? env.getClassWithName(className) : env).getProcedureWithName(this.procedureName);
  };

  PCProcedureCall.prototype.getType = function(env, className) {
    if (!className) {
      return PCProcedureCall.__super__.getType.apply(this, arguments);
    } else {
      return this._getType(env, className);
    }
  };

  PCProcedureCall.prototype._getType = function(env, className) {
    return this.getProcedure(env, className).returnType;
  };

  PCProcedureCall.prototype.getPrecedence = function() {
    return 75;
  };

  PCProcedureCall.prototype.toString = function() {
    var o;

    return "" + this.procedureName + "(" + (((function() {
      var _i, _len, _ref14, _results;

      _ref14 = this.children;
      _results = [];
      for (_i = 0, _len = _ref14.length; _i < _len; _i++) {
        o = _ref14[_i];
        _results.push(o.toString());
      }
      return _results;
    }).call(this)).join(", ")) + ")";
  };

  return PCProcedureCall;

})(PCExpression);

PCClassCall = (function(_super) {
  __extends(PCClassCall, _super);

  function PCClassCall() {
    _ref14 = PCClassCall.__super__.constructor.apply(this, arguments);
    return _ref14;
  }

  PCClassCall.prototype.getProcedure = function(env) {
    return this.children[1].getProcedure(env, this.children[0].getType(env).identifier);
  };

  PCClassCall.prototype._getType = function(env) {
    return this.children[1].getType(env, this.children[0].getType(env).identifier);
  };

  PCClassCall.prototype.getPrecedence = function() {
    return 78;
  };

  PCClassCall.prototype.toString = function() {
    return "" + (this.children[0].toString()) + "." + (this.children[1].toString());
  };

  return PCClassCall;

})(PCExpression);

PCArrayExpression = (function(_super) {
  __extends(PCArrayExpression, _super);

  function PCArrayExpression() {
    _ref15 = PCArrayExpression.__super__.constructor.apply(this, arguments);
    return _ref15;
  }

  PCArrayExpression.prototype._getType = function(env) {
    return this.children[0].getType(env).elementsType;
  };

  PCArrayExpression.prototype.getPrecedence = function() {
    return 81;
  };

  PCArrayExpression.prototype.toString = function() {
    return "" + (this.children[0].toString()) + "[" + (this.children[1].toString()) + "]";
  };

  return PCArrayExpression;

})(PCExpression);

PCLiteralExpression = (function(_super) {
  __extends(PCLiteralExpression, _super);

  function PCLiteralExpression(value) {
    this.value = value;
    PCLiteralExpression.__super__.constructor.apply(this, []);
  }

  PCLiteralExpression.prototype._getType = function() {
    switch (typeof this.value) {
      case "boolean":
        return new PCTType(PCTType.BOOL);
      case "string":
        return PCTType(PCTType.STRING);
      default:
        return PCTType(PCTType.INT);
    }
  };

  PCLiteralExpression.prototype.getPrecedence = function() {
    return 84;
  };

  PCLiteralExpression.prototype.toString = function() {
    switch (typeof this.value) {
      case "boolean":
        if (this.value) {
          return "true";
        } else {
          return "false";
        }
      case "string":
        return "\"" + this.value + "\"";
      default:
        return "" + this.value;
    }
  };

  return PCLiteralExpression;

})(PCExpression);

PCIdentifierExpression = (function(_super) {
  __extends(PCIdentifierExpression, _super);

  function PCIdentifierExpression(identifier) {
    this.identifier = identifier;
    PCIdentifierExpression.__super__.constructor.apply(this, []);
  }

  PCIdentifierExpression.prototype._getType = function(env) {
    return env.getVariableWithName(this.identifier).type;
  };

  PCIdentifierExpression.prototype.getPrecedence = function() {
    return 84;
  };

  PCIdentifierExpression.prototype.toString = function() {
    return this.identifier;
  };

  return PCIdentifierExpression;

})(PCExpression);

PCStatement = (function(_super) {
  __extends(PCStatement, _super);

  function PCStatement() {
    _ref16 = PCStatement.__super__.constructor.apply(this, arguments);
    return _ref16;
  }

  PCStatement.prototype.collectEnvironment = function(env) {
    return this.children.length > 0 && this.children[0].collectEnvironment(env);
  };

  PCStatement.prototype.toString = function(indent, expectsNewBlock) {
    var addIndent, res;

    addIndent = expectsNewBlock === true && (this.children.length === 0 || !(this.children[0] instanceof PCStmtBlock));
    if (addIndent) {
      indent += PCIndent;
    }
    if (this.children.length === 0) {
      res = indent + ";";
    } else {
      res = this.children[0].toString(indent);
      if (this.children[0] instanceof PCStmtExpression) {
        res += ";";
      }
    }
    if (addIndent) {
      res = "\n" + res;
    }
    return res;
  };

  return PCStatement;

})(PCNode);

PCBreakStmt = (function(_super) {
  __extends(PCBreakStmt, _super);

  function PCBreakStmt() {
    PCBreakStmt.__super__.constructor.apply(this, []);
  }

  PCBreakStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCBreakStmt.prototype.toString = function(indent) {
    return indent + "break";
  };

  return PCBreakStmt;

})(PCNode);

PCContinueStmt = (function(_super) {
  __extends(PCContinueStmt, _super);

  function PCContinueStmt() {
    PCContinueStmt.__super__.constructor.apply(this, []);
  }

  PCContinueStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCContinueStmt.prototype.toString = function(indent) {
    return indent + "continue";
  };

  return PCContinueStmt;

})(PCNode);

PCStmtBlock = (function(_super) {
  __extends(PCStmtBlock, _super);

  function PCStmtBlock() {
    _ref17 = PCStmtBlock.__super__.constructor.apply(this, arguments);
    return _ref17;
  }

  PCStmtBlock.prototype.collectEnvironment = function(env) {
    var c, _i, _len, _ref18, _results;

    _ref18 = this.children;
    _results = [];
    for (_i = 0, _len = _ref18.length; _i < _len; _i++) {
      c = _ref18[_i];
      _results.push(c.collectEnvironment(env));
    }
    return _results;
  };

  PCStmtBlock.prototype.toString = function(indent) {
    var o;

    return "{\n" + (((function() {
      var _i, _len, _ref18, _results;

      _ref18 = this.children;
      _results = [];
      for (_i = 0, _len = _ref18.length; _i < _len; _i++) {
        o = _ref18[_i];
        _results.push(o.toString(indent + PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + "\n" + indent + "}";
  };

  return PCStmtBlock;

})(PCNode);

PCStmtExpression = (function(_super) {
  __extends(PCStmtExpression, _super);

  function PCStmtExpression() {
    _ref18 = PCStmtExpression.__super__.constructor.apply(this, arguments);
    return _ref18;
  }

  PCStmtExpression.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCStmtExpression.prototype.toString = function(indent) {
    return indent + this.children[0].toString();
  };

  return PCStmtExpression;

})(PCNode);

PCSelectStmt = (function(_super) {
  __extends(PCSelectStmt, _super);

  function PCSelectStmt() {
    _ref19 = PCSelectStmt.__super__.constructor.apply(this, arguments);
    return _ref19;
  }

  PCSelectStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCSelectStmt.prototype.toString = function(indent) {
    var o;

    return "" + indent + "select {\n" + (((function() {
      var _i, _len, _ref20, _results;

      _ref20 = this.children;
      _results = [];
      for (_i = 0, _len = _ref20.length; _i < _len; _i++) {
        o = _ref20[_i];
        _results.push(o.toString(indent + PCIndent));
      }
      return _results;
    }).call(this)).join("\n")) + indent + "\n}";
  };

  return PCSelectStmt;

})(PCNode);

PCCase = (function(_super) {
  __extends(PCCase, _super);

  function PCCase(execution, condition) {
    if (condition) {
      PCCase.__super__.constructor.call(this, execution, condition);
    } else {
      PCCase.__super__.constructor.call(this, execution);
    }
  }

  PCCase.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCCase.prototype.toString = function(indent) {
    return "" + indent + (this.children.length === 2 ? "case " + (this.children[1].toString()) : "default") + ": " + (this.children[0].toString());
  };

  return PCCase;

})(PCNode);

PCIfStmt = (function(_super) {
  __extends(PCIfStmt, _super);

  function PCIfStmt() {
    _ref20 = PCIfStmt.__super__.constructor.apply(this, arguments);
    return _ref20;
  }

  PCIfStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCIfStmt.prototype.toString = function(indent) {
    return "" + indent + "if (" + (this.children[0].toString()) + ") " + (this.children[1].toString(indent, true)) + (this.children[2] ? " " + (this.children[2].toString(indent, true)) : "");
  };

  return PCIfStmt;

})(PCNode);

PCWhileStmt = (function(_super) {
  __extends(PCWhileStmt, _super);

  function PCWhileStmt() {
    _ref21 = PCWhileStmt.__super__.constructor.apply(this, arguments);
    return _ref21;
  }

  PCWhileStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCWhileStmt.prototype.toString = function(indent) {
    return "" + indent + "while (" + (this.children[0].toString()) + ") " + (this.children[1].toString(indent, true));
  };

  return PCWhileStmt;

})(PCNode);

PCDoStmt = (function(_super) {
  __extends(PCDoStmt, _super);

  function PCDoStmt() {
    _ref22 = PCDoStmt.__super__.constructor.apply(this, arguments);
    return _ref22;
  }

  PCDoStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCDoStmt.prototype.toString = function(indent) {
    return "" + indent + "do " + (this.children[0].toString(indent, true)) + "\n" + indent + "while (" + (this.children[1].toString()) + ")";
  };

  return PCDoStmt;

})(PCNode);

PCForStmt = (function(_super) {
  __extends(PCForStmt, _super);

  function PCForStmt() {
    var body, children, expression, init, update;

    body = arguments[0], init = arguments[1], expression = arguments[2], update = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.body = body;
    this.init = init;
    this.expression = expression;
    this.update = update;
    children = this.update.concat([this.body]);
    if (this.expression) {
      children.unshift(this.expression);
    }
    if (this.init) {
      children.unshift(this.init);
    }
    PCForStmt.__super__.constructor.call(this, children);
  }

  PCForStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCForStmt.prototype.toString = function(indent) {
    var o;

    return "" + indent + "for (" + (this.init ? this.init.toString() : "") + "; " + (this.expression ? this.expression.toString() : "") + "; " + (((function() {
      var _i, _len, _ref23, _results;

      _ref23 = this.update;
      _results = [];
      for (_i = 0, _len = _ref23.length; _i < _len; _i++) {
        o = _ref23[_i];
        _results.push(o.toString(""));
      }
      return _results;
    }).call(this)).join(", ")) + ") " + (this.body.toString(indent, true));
  };

  return PCForStmt;

})(PCNode);

PCForInit = (function(_super) {
  __extends(PCForInit, _super);

  function PCForInit() {
    _ref23 = PCForInit.__super__.constructor.apply(this, arguments);
    return _ref23;
  }

  PCForInit.prototype.toString = function() {
    var o;

    return "" + (((function() {
      var _i, _len, _ref24, _results;

      _ref24 = this.children;
      _results = [];
      for (_i = 0, _len = _ref24.length; _i < _len; _i++) {
        o = _ref24[_i];
        _results.push(o.toString(""));
      }
      return _results;
    }).call(this)).join(", "));
  };

  return PCForInit;

})(PCNode);

PCReturnStmt = (function(_super) {
  __extends(PCReturnStmt, _super);

  function PCReturnStmt() {
    _ref24 = PCReturnStmt.__super__.constructor.apply(this, arguments);
    return _ref24;
  }

  PCReturnStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCReturnStmt.prototype.toString = function(indent) {
    return "" + indent + "return" + (this.children.length === 1 ? " " + (this.children[0].toString()) : "") + ";";
  };

  return PCReturnStmt;

})(PCNode);

PCPrimitiveStmt = (function(_super) {
  __extends(PCPrimitiveStmt, _super);

  function PCPrimitiveStmt(kind, expression) {
    this.kind = kind;
    if (expression) {
      PCPrimitiveStmt.__super__.constructor.call(this, expression);
    } else {
      PCPrimitiveStmt.__super__.constructor.call(this);
    }
  }

  PCPrimitiveStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCPrimitiveStmt.prototype.toString = function(indent) {
    return "" + indent + (PCPrimitiveStmt.kindToString(this.kind)) + (this.children.length === 1 ? " " + (this.children[0].toString()) : "") + ";";
  };

  return PCPrimitiveStmt;

})(PCNode);

PCPrimitiveStmt.JOIN = 0;

PCPrimitiveStmt.LOCK = 1;

PCPrimitiveStmt.UNLOCK = 2;

PCPrimitiveStmt.WAIT = 3;

PCPrimitiveStmt.SIGNAL = 4;

PCPrimitiveStmt.SIGNAL_ALL = 5;

PCPrimitiveStmt.kindToString = function(kind) {
  switch (kind) {
    case PCPrimitiveStmt.JOIN:
      return "join";
    case PCPrimitiveStmt.LOCK:
      return "lock";
    case PCPrimitiveStmt.UNLOCK:
      return "unlock";
    case PCPrimitiveStmt.WAIT:
      return "waitForCondition";
    case PCPrimitiveStmt.SIGNAL:
      return "signal";
    case PCPrimitiveStmt.SIGNAL_ALL:
      return "signal all";
  }
};

PCPrintStmt = (function(_super) {
  __extends(PCPrintStmt, _super);

  function PCPrintStmt() {
    _ref25 = PCPrintStmt.__super__.constructor.apply(this, arguments);
    return _ref25;
  }

  PCPrintStmt.prototype.collectEnvironment = function(env) {
    return null;
  };

  PCPrintStmt.prototype.toString = function(indent) {
    var o;

    return "" + indent + "println(" + (((function() {
      var _i, _len, _ref26, _results;

      _ref26 = this.children;
      _results = [];
      for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
        o = _ref26[_i];
        _results.push(o.toString());
      }
      return _results;
    }).call(this)).join(", ")) + ");";
  };

  return PCPrintStmt;

})(PCNode);

/*
	This class represents PseuCo's types.
	May be partly incomplete as type checking is not yet completely supported by the PseuCo tree.
*/


PCTType = (function() {
  function PCTType(kind) {
    this.kind = kind;
    if (this.kind < 0 || this.kind > 14) {
      throw new Error("Unknown kind of type!");
    }
  }

  PCTType.prototype.isEqual = function(type) {
    return type.kind === this.kind;
  };

  PCTType.prototype.toString = function() {
    switch (this.kind) {
      case PCTType.INT:
        return "int";
      case PCTType.BOOL:
        return "bool";
      case PCTType.STRING:
        return "string";
      case PCTType.CHANNEL:
        return "channel";
      case PCTType.ARRAY:
        return "array";
      case PCTType.MONITOR:
        return "monitor";
      case PCTType.STRUCTURE:
        return "struct";
      case PCTType.MUTEX:
        return "mutex";
      case PCTType.CONDITION:
        return "condition";
      case PCTType.PROCEDURE:
        return "procedure";
      case PCTType.TYPE:
        return "type";
      case PCTType.MAINAGENT:
        return "mainAgent";
      case PCTType.AGENT:
        return "agent";
      case PCTType.WILDCARD:
        return "wildcard";
      default:
        return "void";
    }
  };

  return PCTType;

})();

PCTType.VOID = 0;

PCTType.BOOL = 1;

PCTType.INT = 2;

PCTType.STRING = 3;

PCTType.CHANNEL = 4;

PCTType.ARRAY = 5;

PCTType.MONITOR = 6;

PCTType.STRUCT = 7;

PCTType.MUTEX = 8;

PCTType.CONDITION = 9;

PCTType.PROCEDURE = 10;

PCTType.TYPE = 11;

PCTType.MAINAGENT = 12;

PCTType.AGENT = 13;

PCTType.WILDCARD = 14;

PCTArrayType = (function(_super) {
  __extends(PCTArrayType, _super);

  function PCTArrayType(elementsType, capacity) {
    this.elementsType = elementsType;
    this.capacity = capacity;
    PCTArrayType.__super__.constructor.call(this, PCTType.ARRAY);
  }

  PCTArrayType.prototype.isEqual = function(type) {
    var capacityFulfilled;

    capacityFulfilled = type.capacity === this.capacity || this.capacity === 0 || type.capacity === 0;
    return type.kind === this.kind && capacityFulfilled && this.elementsType.isEqual(type.elementsType);
  };

  PCTArrayType.prototype.toString = function() {
    return "" + (this.elementsType.toString()) + "[" + this.capacity + "]";
  };

  return PCTArrayType;

})(PCTType);

PCTChannelType = (function(_super) {
  __extends(PCTChannelType, _super);

  function PCTChannelType(channelledType, capacity) {
    this.channelledType = channelledType;
    this.capacity = capacity;
    PCTChannelType.__super__.constructor.call(this, PCTType.CHANNEL);
  }

  PCTChannelType.prototype.isEqual = function(type) {
    return this.kind === type.kind && this.capacity === type.capacity && this.channelledType.isEqual(type.channelledType);
  };

  PCTChannelType.prototype.isAssignableTo = function(type) {
    return this.kind === type.kind && (this.capacity === type.capacity || type.capacity === 0) && this.channelledType.isEqual(type.channelledType);
  };

  PCTChannelType.prototype.toString = function() {
    if (this.capacity === 0) {
      return "handshake " + (this.channelledType.toString()) + " " + PCTChannelType.__super__.toString.apply(this, arguments);
    } else {
      return "" + (this.channelledType.toString()) + " " + PCTChannelType.__super__.toString.apply(this, arguments) + " of capacity " + this.capacity;
    }
  };

  return PCTChannelType;

})(PCTType);

PCTClassType = (function(_super) {
  __extends(PCTClassType, _super);

  function PCTClassType(isMonitor, identifier) {
    this.identifier = identifier;
    PCTClassType.__super__.constructor.call(this, (isMonitor ? PCTType.MONITOR : PCTType.STRUCT));
  }

  PCTClassType.prototype.isEqual = function(type) {
    return this.kind === type.kind && this.identifier === type.identifier;
  };

  PCTClassType.prototype.toString = function() {
    return "" + PCTClassType.__super__.toString.apply(this, arguments) + " " + this.identifier;
  };

  return PCTClassType;

})(PCTType);

PCTProcedureType = (function(_super) {
  __extends(PCTProcedureType, _super);

  function PCTProcedureType(returnType, argumentTypes) {
    this.returnType = returnType;
    this.argumentTypes = argumentTypes;
    PCTProcedureType.__super__.constructor.call(this, PCTType.PROCEDURE);
  }

  PCTProcedureType.prototype.isEqual = function(type) {
    var i, _i, _ref26;

    if (type.argumentTypes.length !== this.argumentTypes) {
      return false;
    }
    for (i = _i = 0, _ref26 = this.argumentTypes.length; _i < _ref26; i = _i += 1) {
      if (!type.argumentTypes[i].isEqual(this.argumentTypes[i])) {
        return false;
      }
    }
    return type.returnType.isEqual(this.returnType);
  };

  PCTProcedureType.prototype.toString = function() {
    var args, t;

    args = ((function() {
      var _i, _len, _ref26, _results;

      _ref26 = this.argumentTypes;
      _results = [];
      for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
        t = _ref26[_i];
        _results.push(t.toString());
      }
      return _results;
    }).call(this)).join(" x ");
    return "" + (this.returnType.toString()) + " -> (" + args + ")";
  };

  return PCTProcedureType;

})(PCTType);

PCTTypeType = (function(_super) {
  __extends(PCTTypeType, _super);

  function PCTTypeType(type) {
    this.type = type;
    PCTTypeType.__super__.constructor.call(this, PCTType.TYPE);
  }

  PCTTypeType.prototype.isEqual = function(type) {
    return this.kind === type.kind && this.type.isEqual(type.type);
  };

  return PCTTypeType;

})(PCTType);

/*
	ToDo
*/


PCEnvironmentController = (function() {
  function PCEnvironmentController() {
    this.root = new PCEnvironmentNode(null, "");
    this.classes = {};
    this._envStack = this.root;
  }

  PCEnvironmentController.prototype.getGlobal = function() {
    return this.root;
  };

  PCEnvironmentController.prototype.getClassWithName = function(name) {
    var result;

    result = this.classes[name];
    if (result === void 0) {
      throw new Error("Unknown class");
    }
    return result;
  };

  PCEnvironmentController.prototype.getAllClasses = function() {
    return this.root.getAllClasses();
  };

  PCEnvironmentController.prototype.getVariableWithName = function(name) {
    return this._envStack.getVariableWithName(name);
  };

  PCEnvironmentController.prototype.getProcedureWithName = function(name) {
    return this._envStack.getProcedureWithName(name);
  };

  PCEnvironmentController.prototype.processNewClass = function(node, classType) {
    var tnode;

    tnode = new PCClass(node, classType);
    return this._processNewClass(tnode);
  };

  PCEnvironmentController.prototype._processNewClass = function(node) {
    if (this.classes[node.getName()]) {
      throw new Error("Class already registered!");
    }
    this._envStack.addChild(node);
    return this.classes[node.getName()] = node;
  };

  PCEnvironmentController.prototype.beginClass = function(className) {
    var node;

    node = this.getClassWithName(className);
    if (!node) {
      throw new Error("Node must not be null!");
    }
    this._envStack = node;
    return node;
  };

  PCEnvironmentController.prototype.endClass = function() {
    if (!this._envStack instanceof PCClass) {
      throw new Error("No class did begin!");
    }
    return this._envStack = this._envStack.parent;
  };

  PCEnvironmentController.prototype.beginNewProcedure = function(node, procedureName, returnType, args) {
    var tnode;

    tnode = new PCProcedure(node, procedureName, returnType, args);
    return this._processNewProcedure(tnode);
  };

  PCEnvironmentController.prototype._beginNewProcedure = function(node) {
    this._envStack.addChild(node);
    return this.beginProcedure(node.getName());
  };

  PCEnvironmentController.prototype.beginProcedure = function(procedureName) {
    var node;

    node = this._envStack.getProcedureWithName(procedureName);
    if (!node) {
      throw new Error("Node must not be null!");
    }
    this._envStack = node;
    return node;
  };

  PCEnvironmentController.prototype.endProcedure = function() {
    if (!this._envStack instanceof PCProcedure) {
      throw new Error("No procedure did begin!");
    }
    return this._envStack = this._envStack.parent;
  };

  PCEnvironmentController.prototype.beginMainAgent = function() {
    if (this._envStack.getProcedureWithName("#mainAgent")) {
      return this.beginProcedure("#mainAgent");
    } else {
      return this.beginNewProcedure("#mainAgent", new PCTType(PCTType.VOID), []);
    }
  };

  PCEnvironmentController.prototype.endMainAgent = function() {
    return this.endProcedure();
  };

  PCEnvironmentController.prototype.processNewVariable = function(variable) {
    return this._processNewVariable(variable);
  };

  PCEnvironmentController.prototype._processNewVariable = function(node) {
    this._envStack.addChild(node);
    return node;
  };

  return PCEnvironmentController;

})();

PCEnvironmentNode = (function() {
  function PCEnvironmentNode(node, label) {
    this.node = node;
    this.label = label;
    this.parent = null;
    this.children = [];
    this.variables = {};
    this.procedures = {};
  }

  PCEnvironmentNode.prototype.addChild = function(child) {
    this.children.push(child);
    child.parent = this;
    if (child instanceof PCProcedure) {
      this.procedures[child.getName()] = child;
    } else if (child instanceof PCVariable) {
      this.variables[child.getIdentifier()] = child;
    }
    return child;
  };

  PCEnvironmentNode.prototype.getVariableWithName = function(name) {
    return this.variables[name];
  };

  PCEnvironmentNode.prototype.getProcedureWithName = function(name) {
    return this.procedures[name];
  };

  PCEnvironmentNode.prototype.getComposedLabel = function() {
    return "" + (this.parent ? "" + (this.parent.getComposedLabel()) + "_" : "") + this.label;
  };

  PCEnvironmentNode.prototype.getAllClasses = function() {
    var c, result, _i, _len, _ref26;

    result = [];
    _ref26 = this.children;
    for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
      c = _ref26[_i];
      if (c instanceof PCClass) {
        result.push(c);
      }
    }
    return result;
  };

  return PCEnvironmentNode;

})();

PCClass = (function(_super) {
  __extends(PCClass, _super);

  function PCClass(node, type) {
    this.type = type;
    PCClass.__super__.constructor.call(this, node, this.type.identifier);
  }

  PCClass.prototype.getName = function() {
    return this.label;
  };

  return PCClass;

})(PCEnvironmentNode);

PCProcedure = (function(_super) {
  __extends(PCProcedure, _super);

  function PCProcedure(node, name, returnType, _arguments) {
    this.returnType = returnType;
    this["arguments"] = _arguments;
    PCProcedure.__super__.constructor.call(this, node, name);
  }

  PCProcedure.prototype.getName = function() {
    return this.label;
  };

  PCProcedure.prototype.isClassProcedure = function() {
    return this.parent instanceof PCClass;
  };

  return PCProcedure;

})(PCEnvironmentNode);

PCVariable = (function() {
  function PCVariable(node, name, type) {
    this.node = node;
    this.type = type;
    if (typeof this.node === "string") {
      debugger;
    }
    this.label = name;
    this.parent = null;
  }

  PCVariable.prototype.getName = function() {
    return this.label;
  };

  PCVariable.prototype.getIdentifier = function() {
    return this.label;
  };

  PCVariable.prototype.getComposedLabel = function() {
    return "" + (this.parent ? "" + (this.parent.getComposedLabel()) + "_" : "") + this.label;
  };

  return PCVariable;

})();

/*
	Manages multiple versions of process frames. A process frame is the set of all arguments, local variables and temporary containers of a compile unit, also called a process groupable (e.g. a procedure) at a specific time.
	Process frames may exist in multiple versions: One version for each CCS process. Because of restrictions of CCS it is not always possible to compile into a single process. This class helps to manage the fragmentation of code into multiple processes.
	Versions are partially ordered.
*/


/*
	Groupable implements:
	 getProcessName()
*/


PCCProcessFrame = (function() {
  function PCCProcessFrame(groupable, variables, tempTypes, autoInit) {
    this.groupable = groupable;
    this.variables = variables != null ? variables : [];
    this.tempTypes = tempTypes != null ? tempTypes : [];
    if (autoInit == null) {
      autoInit = true;
    }
    if (autoInit) {
      this._freshInit();
    }
    null;
  }

  PCCProcessFrame.prototype._freshInit = function() {
    var i, v, _i, _len, _ref26;

    if (this.groupable.frameCount === void 0) {
      this.groupable.frameCount = 0;
    }
    this.processID = this.groupable.frameCount++;
    this.containerIndex = 0;
    this.usedContainers = [];
    this.varTable = {};
    _ref26 = this.variables;
    for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
      v = _ref26[_i];
      this.varTable[v.getIdentifier()] = this.createContainer(v.getCCSType(), v.getSuggestedContainerName());
    }
    this.protections = (function() {
      var _j, _ref27, _results;

      _results = [];
      for (i = _j = 0, _ref27 = this.tempTypes.length; _j < _ref27; i = _j += 1) {
        _results.push(this.createContainer(this.tempTypes[i], "t" + i));
      }
      return _results;
    }).call(this);
    return this.initialVariableCount = this.variables.length;
  };

  PCCProcessFrame.prototype._argumentsForProcessDefinition = function() {
    var args, v;

    args = (function() {
      var _i, _len, _ref26, _results;

      _ref26 = this.variables;
      _results = [];
      for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
        v = _ref26[_i];
        _results.push(this.varTable[v.getIdentifier()]);
      }
      return _results;
    }).call(this);
    return args.concat(this.protections);
  };

  PCCProcessFrame.prototype.emitProcessDefinition = function(compiler) {
    var args;

    args = this._argumentsForProcessDefinition();
    return compiler._silentlyAddProcessDefinition(this._getProcessName(), args);
  };

  PCCProcessFrame.prototype._getProcessName = function() {
    return "" + (this.groupable.getProcessName()) + (this.processID > 0 ? "_" + this.processID : "");
  };

  PCCProcessFrame.prototype._getProcessArgCount = function() {
    return this.initialVariableCount + this.tempTypes.length;
  };

  PCCProcessFrame.prototype._didAlreadyUseContainerWithIdentifier = function(id) {
    var c, _i, _len, _ref26;

    _ref26 = this.usedContainers;
    for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
      c = _ref26[_i];
      if (c.identifier === id) {
        return true;
      }
    }
    return false;
  };

  PCCProcessFrame.prototype.createContainer = function(ccsType, wish) {
    var container, id;

    if (typeof wish === "string" && wish.length > 0 && wish.indexOf("f_") !== 0 && !this._didAlreadyUseContainerWithIdentifier(wish)) {
      id = wish;
    } else {
      id = "f_" + (this.containerIndex++);
    }
    container = new PCCVariableContainer(id, ccsType);
    this.usedContainers.push(container);
    return container;
  };

  PCCProcessFrame.prototype.getContainerForVariable = function(identifier) {
    if (this.varTable[identifier] === void 0) {
      throw new Error("Unknown variable!");
    }
    return this.varTable[identifier];
  };

  PCCProcessFrame.prototype.assignContainerToVariable = function(identifier, container) {
    if (this.varTable[identifier] === void 0) {
      throw new Error("Unknown variable!");
    }
    return this.varTable[identifier] = container;
  };

  PCCProcessFrame.prototype.addLocalVariable = function(variable, container) {
    if (this.varTable[variable.getIdentifier()] !== void 0) {
      throw new Error("Variable already defined!");
    }
    this.variables.push(variable);
    return this.varTable[variable.getIdentifier()] = container;
  };

  PCCProcessFrame.prototype.protectContainer = function(container) {
    return this.protections.push(container);
  };

  PCCProcessFrame.prototype.unprotectContainer = function() {
    return this.protections.pop();
  };

  PCCProcessFrame.prototype.getProtectedContainer = function() {
    if (this.protections.length === 0) {
      throw new Error("No protected containers available");
    }
    return this.protections[this.protections.length - 1];
  };

  PCCProcessFrame.prototype.isContainerLocalVariable = function(container) {
    var c, v, _ref26;

    _ref26 = this.varTable;
    for (v in _ref26) {
      c = _ref26[v];
      if (container.isEqual(c)) {
        return true;
      }
    }
    return false;
  };

  PCCProcessFrame.prototype.createFollowupFrame = function() {
    return PCCProcessFrame.createFollowupFrameForFrames([this]);
  };

  PCCProcessFrame.prototype._createFollowupFrameAcceptingTempTypes = function(tempTypes) {
    return new PCCProcessFrame(this.groupable, this.variables.slice(0), tempTypes);
  };

  PCCProcessFrame.prototype.createNewScope = function() {
    return this.copy();
  };

  PCCProcessFrame.prototype._checkHierarchyConsistency = function(frame) {
    if (this.parentFrame === frame || this === frame) {
      return;
    }
    while (frame.parentFrame) {
      frame = frame.parentFrame;
      if (frame === this.parentFrame) {
        return;
      }
    }
    throw new Error("Frame must be connected in hierarchy");
  };

  PCCProcessFrame.prototype._argumentsToCallProcessFromFrame = function(frame) {
    var args, v;

    args = (function() {
      var _i, _len, _ref26, _results;

      _ref26 = this.variables;
      _results = [];
      for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
        v = _ref26[_i];
        _results.push(frame.varTable[v.getIdentifier()]);
      }
      return _results;
    }).call(this);
    return args.concat(frame.protections.slice(0, this.tempTypes.length));
  };

  PCCProcessFrame.prototype.emitCallProcessFromFrame = function(compiler, frame, appPlaceholder) {
    var args;

    args = this._argumentsToCallProcessFromFrame(frame);
    return this.emitCallProcessWithArgumentContainers(compiler, args, appPlaceholder);
  };

  PCCProcessFrame.prototype.emitCallProcessWithArgumentContainers = function(compiler, containers, appPlaceholder) {
    if (containers.length !== this._getProcessArgCount()) {
      throw new Error("Number of argument containers does not match number of required arguments");
    }
    if (appPlaceholder) {
      return appPlaceholder.set(this._getProcessName(), containers);
    } else {
      return compiler.emitProcessApplication(this._getProcessName(), containers);
    }
  };

  PCCProcessFrame.prototype.copy = function() {
    var res;

    res = new PCCProcessFrame(this.groupable, this.variables.slice(0), this.tempTypes, false);
    this._copyVariablesToCopy(res);
    res.parentFrame = this;
    return res;
  };

  PCCProcessFrame.prototype._copyVariablesToCopy = function(res) {
    var v, _i, _len, _ref26;

    res.processID = this.processID;
    res.containerIndex = this.containerIndex;
    res.usedContainers = this.usedContainers.slice(0);
    res.varTable = {};
    _ref26 = this.variables;
    for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
      v = _ref26[_i];
      res.varTable[v.getIdentifier()] = this.varTable[v.getIdentifier()];
    }
    res.protections = this.protections.slice(0);
    return res.initialVariableCount = this.initialVariableCount;
  };

  return PCCProcessFrame;

})();

PCCProcedureFrame = (function(_super) {
  __extends(PCCProcedureFrame, _super);

  function PCCProcedureFrame(procedure, variables, tempTypes, autoInit) {
    if (!variables) {
      variables = procedure["arguments"];
      if (procedure.isClassProcedure()) {
        variables.unshift(new PCCVariableInfo(null, "i", null, true));
      }
      variables.unshift(new PCCVariableInfo(null, "r", null, true));
    }
    PCCProcedureFrame.__super__.constructor.call(this, procedure, variables, tempTypes, autoInit);
  }

  PCCProcedureFrame.prototype.getProcedure = function() {
    return this.groupable;
  };

  /*
  	getContainerForVariable: (identifier) ->
  		if identifier == "i_r" then PCCContainer.RETURN()
  		else if identifier == "i_i" then PCCContainer.INSTANCE()
  		else if identifier == "i_g" then PCCContainer.GUARD()
  		else super
  	
  	assignContainerToVariable: (identifier, container) ->
  		throw new Error("Tried to assign read-only variable!") if identifier == "i_r" or identifier == "i_i" or identifier == "i_g"
  		super
  	
  	addLocalVariable: (variable, container) ->
  		identifier = variable.getName()
  		throw new Error("Tried to add internal read-only variable!") if identifier == "i_r" or identifier == "i_i" or identifier == "i_g"
  		super
  */


  PCCProcedureFrame.prototype._createFollowupFrameAcceptingTempTypes = function(tempTypes) {
    return new PCCProcedureFrame(this.groupable, this.variables.slice(0), tempTypes);
  };

  /*
  	_argumentsToCallProcessFromFrame: (frame) ->
  		args = super
  		#args.unshift(PCCContainer.GUARD()) if @groupable.isMonitorProcedure()
  		args.unshift(PCCContainer.INSTANCE()) if @groupable.isClassProcedure()
  		args.unshift(PCCContainer.RETURN())
  		args
  */


  PCCProcedureFrame.prototype.copy = function() {
    var res;

    res = new PCCProcedureFrame(this.groupable, this.variables.slice(0), this.tempTypes, false);
    this._copyVariablesToCopy(res);
    res.parentFrame = this;
    return res;
  };

  return PCCProcedureFrame;

})(PCCProcessFrame);

PCCProcessFrame.prototype.parentFrame = null;

PCCProcessFrame.prototype.mark = function(m) {
  if (!this.marked) {
    this.marked = [];
  }
  return this.marked.push(m);
};

PCCProcessFrame.checkTempTypesEquality = function(types1, types2) {
  var i, _i, _ref26;

  if (types1.length !== types2.length) {
    return false;
  }
  for (i = _i = 0, _ref26 = types1.length; 0 <= _ref26 ? _i < _ref26 : _i > _ref26; i = 0 <= _ref26 ? ++_i : --_i) {
    if (!types1[i].isEqual(types2[i])) {
      return false;
    }
  }
  return true;
};

PCCProcessFrame.checkFramesForConsistency = function(frames) {
  var groupable, i, tempTypes, _i, _ref26;

  groupable = frames[0].groupable;
  tempTypes = frames[0].tempTypes;
  for (i = _i = 1, _ref26 = frames.length; _i < _ref26; i = _i += 1) {
    if (frames[i].groupable !== groupable || !PCCProcessFrame.checkTempTypesEquality(tempTypes, frames[i].tempTypes)) {
      throw new Error("Inconsistent process frames");
    }
  }
  return null;
};

PCCProcessFrame.findClosesAncestorForFrames = function(frames) {
  var closestAncestor, currentFrames, f, i, markedFrames, _i, _j, _len, _ref26;

  closestAncestor = null;
  markedFrames = [];
  currentFrames = frames.concat([]);
  while (closestAncestor === null) {
    for (i = _i = 0, _ref26 = frames.length; _i < _ref26; i = _i += 1) {
      if (currentFrames[i] !== null) {
        currentFrames[i].mark(frames[i]);
        markedFrames.push(currentFrames[i]);
        if (currentFrames[i].marked.length === frames.length) {
          closestAncestor = currentFrames[i];
          break;
        }
        currentFrames[i] = currentFrames[i].parentFrame;
      }
    }
  }
  for (_j = 0, _len = markedFrames.length; _j < _len; _j++) {
    f = markedFrames[_j];
    f.marked = null;
  }
  return closestAncestor;
};

PCCProcessFrame.createFollowupFrameForFrames = function(frames) {
  var c, closestAncestor, result;

  PCCProcessFrame.checkFramesForConsistency(frames);
  closestAncestor = PCCProcessFrame.findClosesAncestorForFrames(frames);
  result = closestAncestor._createFollowupFrameAcceptingTempTypes((function() {
    var _i, _len, _ref26, _results;

    _ref26 = frames[0].protections;
    _results = [];
    for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
      c = _ref26[_i];
      _results.push(c.ccsType);
    }
    return _results;
  })());
  result.parentFrame = closestAncestor;
  return result;
};

PCCProcessFrame.prototype.compilerHandleNewVariableWithDefaultValueCallback = function(compiler, variable) {
  var c;

  c = variable.compileDefaultValue(compiler);
  compiler.getProcessFrame().addLocalVariable(variable, c);
  return variable;
};

PCCProcessFrame.prototype.compilerGetVariable = function(compiler, identifier) {
  var v, _i, _len, _ref26;

  _ref26 = this.variables;
  for (_i = 0, _len = _ref26.length; _i < _len; _i++) {
    v = _ref26[_i];
    if (v.getIdentifier() === identifier) {
      return new PCCLocalVariable(v.node, v.getName(), v.type, v.isInternal);
    }
  }
  return null;
};

PCCProcessFrame.prototype.compilerGetProcedure = function(compiler, identifier, instanceContainer) {
  return null;
};

PCCProcedureFrame.prototype.compilerGetProcedure = function(compiler, identifier, instanceContainer) {
  var p;

  p = this.getProcedure();
  if (p.getName() === identifier) {
    return p;
  } else {
    return p.getProcedureWithName(identifier);
  }
};

/*
class PCCContainerInfo
	constructor: (@payload, @isLocalVariable) ->


class PCCContainerInfoArray
	constructor: (temporaryItems=[]) -> @infos = (new PCCContainerInfo(c, false) for c in temporaryItems)
	copy: ->
		res = new PCCContainerProtectionArray()
		res.infos = @infos[..]
		res
	getCount: ->
		res = 0
		++res for ci in @infos
		res
	
	# Protecting Containers
	protectContainer: (container, isLocalVariable) ->
		@protections.push(new PCCContainerInfo(container, isLocalVariable))
	unprotectContainer: -> @infos.pop().container
	getContainer: ->
		throw new Error("getProtection: Nothing protected at the moment!") if @infos.length == 0
		@infos[@infos.length-1].payload
	getTemporaryContainers: ->
		res = []
		(res.push(ci.payload) if not ci.isLocalVariable) for ci in @infos
		res
	
	getCCSTypes: ->
		res = new PCCContainerInfoArray()
		res.infos = (new PCCContainerInfo(ci.payload.ccsType, ci.isLocalVariable) for ci in @infos)
		res
		
	getTemporaryTypes: ->
		res = []
		return res if infos.length == 0
		if @infos[0].payload instanceof PCCContainer
			(res.push(ci.payload.ccsType) if not cp.isLocalVariable) for ci in @infos
		else if infos[0].payload instanceof PCCType
			(res.push(ci.payload) if not cp.isLocalVariable) for ci in @infos
		else
			throw new Error("getTemporaryTypes not applicable on payload!")
		res
*/


PCCGroupable = (function() {
  function PCCGroupable(processName) {
    this.processName = processName;
  }

  PCCGroupable.prototype.getProcessName = function() {
    return this.processName;
  };

  return PCCGroupable;

})();

/*

{version: "1.0", tree: (new PCProgram((new PCMonitor("M", (new PCConditionDecl("c", (new PCRelationalExpression((new PCLiteralExpression(parseInt(3))), "<", (new PCLiteralExpression(parseInt(4))))))), (new PCConditionDecl("c2", (new PCLiteralExpression(true)))), (new PCConditionDecl("c3", (new PCLiteralExpression(false)))), (new PCProcedureDecl((new PCSimpleType(PCSimpleType.VOID)), "f", (new PCStmtBlock((new PCStatement((new PCPrimitiveStmt(PCPrimitiveStmt.WAIT, (new PCIdentifierExpression("c")))))), (new PCStatement((new PCPrintStmt((new PCLiteralExpression("condition fulfilled!")))))))))), (new PCProcedureDecl((new PCSimpleType(PCSimpleType.VOID)), "g", (new PCStmtBlock((new PCStatement((new PCPrintStmt((new PCLiteralExpression("Before signal")))))), (new PCStatement((new PCPrimitiveStmt(PCPrimitiveStmt.SIGNAL, (new PCIdentifierExpression("c")))))), (new PCStatement((new PCPrintStmt((new PCLiteralExpression("Behind signal")))))), (new PCStatement((new PCPrimitiveStmt(PCPrimitiveStmt.SIGNAL_ALL)))), (new PCStatement((new PCPrintStmt((new PCLiteralExpression("Behind signallAll")))))))))))), (new PCDeclStmt((new PCSimpleType(PCSimpleType.MUTEX)), (new PCVariableDeclarator("guard", null)))), (new PCMainAgent((new PCStmtBlock((new PCDeclStmt((new PCClassType("M")), (new PCVariableDeclarator("m", null)))), (new PCDeclStmt((new PCSimpleType(PCSimpleType.AGENT)), (new PCVariableDeclarator("a", (new PCVariableInitializer(false, (new PCStartExpression((new PCProcedureCall("agent1", (new PCIdentifierExpression("m")))))))))))), (new PCStatement((new PCPrimitiveStmt(PCPrimitiveStmt.LOCK, (new PCIdentifierExpression("guard")))))), (new PCStatement((new PCStmtExpression((new PCClassCall((new PCIdentifierExpression("m")), (new PCProcedureCall("f")))))))), (new PCStatement((new PCPrimitiveStmt(PCPrimitiveStmt.UNLOCK, (new PCIdentifierExpression("guard")))))), (new PCStatement((new PCPrimitiveStmt(PCPrimitiveStmt.JOIN, (new PCIdentifierExpression("a")))))))))), (new PCProcedureDecl((new PCSimpleType(PCSimpleType.VOID)), "agent1", (new PCStmtBlock((new PCStatement((new PCPrimitiveStmt(PCPrimitiveStmt.LOCK, (new PCIdentifierExpression("guard")))))), (new PCStatement((new PCStmtExpression((new PCClassCall((new PCIdentifierExpression("m")), (new PCProcedureCall("g")))))))), (new PCStatement((new PCPrimitiveStmt(PCPrimitiveStmt.UNLOCK, (new PCIdentifierExpression("guard")))))))), (new PCFormalParameter((new PCClassType("M")), "m"))))))}
*/


/*
	PCCProgramController manages all variables, classes, procedures and the relationships between each other that occur in a PseuCo program.
*/


PCCGlobal = (function(_super) {
  __extends(PCCGlobal, _super);

  function PCCGlobal(program) {
    PCCGlobal.__super__.constructor.call(this, program, "");
  }

  PCCGlobal.prototype.getVariableClass = function() {
    return PCCGlobalVariable;
  };

  PCCGlobal.prototype.compilerGetVariable = function(compiler, identifier) {
    return this.getVariableWithName(identifier);
  };

  PCCGlobal.prototype.compilerGetProcedure = function(compiler, identifier) {
    return this.getProcedureWithName(identifier);
  };

  PCCGlobal.prototype.compilerHandleNewVariableWithDefaultValueCallback = function(compiler, variable) {
    variable = this.getVariableWithName(variable.getName());
    if (variable === void 0) {
      throw new Error("Unexpected new identifier found!");
    }
    variable.emitConstructor(compiler);
    return variable;
  };

  return PCCGlobal;

})(PCEnvironmentNode);

PCCClass = (function(_super) {
  __extends(PCCClass, _super);

  function PCCClass() {
    PCCClass.__super__.constructor.apply(this, arguments);
    this.addChild(new PCCInternalReadOnlyField(null, "guard", new PCTType(PCTType.MUTEX), true));
  }

  PCCClass.prototype.getAllConditions = function() {
    var n, result, v, _ref26;

    result = [];
    _ref26 = this.variables;
    for (n in _ref26) {
      v = _ref26[n];
      if (v.type && v.type.kind === PCTType.CONDITION) {
        result.push(v);
      }
    }
    return result;
  };

  PCCClass.prototype.getVariableClass = function() {
    return PCCField;
  };

  PCCClass.prototype.compilerGetVariable = function(compiler, identifier) {
    return this.getVariableWithName(identifier);
  };

  PCCClass.prototype.compilerGetProcedure = function(compiler, identifier) {
    return this.getProcedureWithName(identifier);
  };

  PCCClass.prototype.compilerHandleNewVariableWithDefaultValueCallback = function(compiler, variable) {
    return this.getVariableWithName(variable.getName());
  };

  PCCClass.prototype.emitEnvironment = function(compiler) {
    var control, i, instance, n, names, v, variables, _i, _ref26;

    variables = (function() {
      var _ref26, _results;

      _ref26 = this.variables;
      _results = [];
      for (n in _ref26) {
        v = _ref26[n];
        _results.push(v);
      }
      return _results;
    }).call(this);
    instance = new PCCVariableInfo(null, "i", this.type, true);
    variables.unshift(instance);
    compiler.beginProcessGroup(new PCCGroupable(this.getEnvProcessName()), variables);
    variables = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = variables.length; _i < _len; _i++) {
        v = variables[_i];
        _results.push(compiler.getVariableWithName(v.getIdentifier()));
      }
      return _results;
    })();
    names = (function() {
      var _results;

      _results = [];
      for (n in this.variables) {
        _results.push(n);
      }
      return _results;
    }).call(this);
    for (i = _i = 0, _ref26 = names.length - 1; 0 <= _ref26 ? _i < _ref26 : _i > _ref26; i = 0 <= _ref26 ? ++_i : --_i) {
      control = compiler.emitChoice();
      this.variables[names[i]].emitAccessors(compiler, variables, variables[0].getContainer(compiler));
      control.setBranchFinished();
    }
    this.variables[names[names.length - 1]].emitAccessors(compiler, variables, variables[0].getContainer(compiler));
    return compiler.endProcessGroup();
  };

  PCCClass.prototype.emitConstructor = function(compiler) {
    var hasVariables, n;

    hasVariables = false;
    for (n in this.variables) {
      hasVariables = true;
      break;
    }
    if (!hasVariables) {
      return;
    }
    this.emitEnvironment(compiler);
    return PCCConstructor.emitConstructor(compiler, this);
  };

  PCCClass.prototype.constructorGetName = function() {
    return this.getEnvProcessName();
  };

  PCCClass.prototype.constructorGetArguments = function() {
    return [new PCCVariableInfo(null, "next_i", this.type, true)];
  };

  PCCClass.prototype.constructorProtectEnvironmentArguments = function(cons, compiler, variables) {
    var c, instance, n, res, v, _ref26;

    instance = variables[0];
    compiler.emitOutput("env_class_" + (this.getName()) + "_create", null, instance.getContainer(compiler));
    compiler.protectContainer(instance.getContainer(compiler));
    res = 1;
    _ref26 = this.variables;
    for (n in _ref26) {
      v = _ref26[n];
      c = v.compileDefaultValue(compiler);
      compiler.protectContainer(c);
      res++;
    }
    return res;
  };

  PCCClass.prototype.constructorShouldCallRecursively = function() {
    return true;
  };

  PCCClass.prototype.constructorUpdateVariablesForRecursiveCall = function(cons, compiler, entry, variables) {
    var instance, new_i;

    instance = variables[0];
    new_i = new PCCBinaryContainer(instance.getContainer(compiler), new PCCConstantContainer(1), "+");
    return instance.setContainer(compiler, new_i);
  };

  PCCClass.prototype.getProcessName = function() {
    return "Env_class_" + (this.getName()) + "_cons";
  };

  PCCClass.prototype.getEnvProcessName = function() {
    return "Env_class_" + (this.getName());
  };

  return PCCClass;

})(PCClass);

PCCProcedure = (function(_super) {
  __extends(PCCProcedure, _super);

  function PCCProcedure() {
    _ref26 = PCCProcedure.__super__.constructor.apply(this, arguments);
    return _ref26;
  }

  PCCProcedure.prototype.getProcessName = function() {
    return "Proc" + (this.getComposedLabel());
  };

  PCCProcedure.prototype.getAgentStarterChannel = function() {
    return "start" + (this.getComposedLabel());
  };

  PCCProcedure.prototype.getVariableClass = function() {
    return PCCLocalVariable;
  };

  PCCProcedure.prototype.getAllArgumentContainers = function(compiler, explicitArgumentContainers, instanceContainer) {
    var argumentContainers;

    argumentContainers = explicitArgumentContainers.slice(0);
    if (this.isClassProcedure()) {
      if (!instanceContainer) {
        instanceContainer = compiler.getVariableWithName("i", null, true).getContainer(compiler);
      }
      argumentContainers.unshift(instanceContainer);
    } else {
      if (instanceContainer) {
        throw new Error("Illegal instance value");
      }
    }
    argumentContainers.unshift(compiler.getVariableWithName("r", null, true).getContainer(compiler));
    return argumentContainers;
  };

  PCCProcedure.prototype.getImplicitAndExplicitArgumentCount = function() {
    var res;

    res = this["arguments"].length + 1;
    if (this.isClassProcedure()) {
      res++;
    }
    return res;
  };

  PCCProcedure.prototype.emitAgentConstructor = function(compiler) {
    var a, args, control1, control2, control3, definitionName, i, j, _i, _ref27;

    definitionName = "Agent" + (this.getComposedLabel());
    compiler.beginProcessDefinition(definitionName, []);
    i = new PCCVariableContainer("i", PCCType.INT);
    compiler.emitInput("agent_new", null, i);
    compiler.emitOutput(this.getAgentStarterChannel(), null, i);
    args = [];
    for (j = _i = 0, _ref27 = this.getImplicitAndExplicitArgumentCount(); 0 <= _ref27 ? _i < _ref27 : _i > _ref27; j = 0 <= _ref27 ? ++_i : --_i) {
      a = new PCCConstantContainer("a" + j, PCCType.VOID);
      compiler.emitInput("start_set_arg", i, a);
      args.push(a);
    }
    control1 = compiler.emitParallel();
    compiler.emitProcessApplication(definitionName, []);
    control1.setBranchFinished();
    control2 = compiler.emitParallel();
    control3 = compiler.emitSequence();
    compiler.emitProcessApplication(this.getProcessName(), args);
    control3.setBranchFinished();
    compiler.emitOutput("agent_terminate", i, null);
    compiler.emitStop();
    control3.setBranchFinished();
    control2.setBranchFinished();
    compiler.emitProcessApplication("AgentJoiner", [i, new PCCConstantContainer(0)]);
    control2.setBranchFinished();
    control1.setBranchFinished();
    return compiler.endProcessDefinition();
  };

  return PCCProcedure;

})(PCProcedure);

PCCType = (function() {
  function PCCType(_type, _className) {
    this._type = _type;
    this._className = _className;
    if (!this._type && this._className) {
      this._type = 1;
    }
  }

  PCCType.prototype.isVoid = function() {
    return this._type === -1;
  };

  PCCType.prototype.isBool = function() {
    return this._type === 0;
  };

  PCCType.prototype.isInt = function() {
    return this._type === 1;
  };

  PCCType.prototype.isString = function() {
    return this._type === 2;
  };

  PCCType.prototype.isArray = function() {
    return this._type instanceof PCCType;
  };

  PCCType.prototype.isClass = function() {
    if (this._className) {
      return true;
    } else {
      return false;
    }
  };

  PCCType.prototype.getClassName = function() {
    if (!this._className) {
      throw new Error("Can't get class name for non-class type!");
    }
    return this._className;
  };

  PCCType.prototype.isEqual = function(type) {
    if (this.isArray()) {
      return type.isArray() && this._type.isEqual(type._type);
    } else {
      return this._type === type._type;
    }
  };

  PCCType.prototype.getSubtype = function() {
    if (!this.isArray()) {
      throw new Error("Cannot get subtype for non-array type!");
    }
    return this._type._type;
  };

  return PCCType;

})();

PCCType.VOID = new PCCType(-1);

PCCType.BOOL = new PCCType(0);

PCCType.INT = new PCCType(1);

PCCType.STRING = new PCCType(2);

PCTType.prototype.getCCSType = function() {
  switch (this.kind) {
    case PCTType.INT:
      return PCCType.INT;
    case PCTType.BOOL:
      return PCCType.BOOL;
    case PCTType.STRING:
      return PCCType.STRING;
    case PCTType.CHANNEL:
      throw new Error("Unexpected type kind!");
      break;
    case PCTType.ARRAY:
      throw new Error("Unexpected type kind!");
      break;
    case PCTType.MONITOR:
      return PCCType.INT;
    case PCTType.STRUCTURE:
      return PCCType.INT;
    case PCTType.MUTEX:
      return PCCType.INT;
    case PCTType.CONDITION:
      return PCCType.INT;
    case PCTType.PROCEDURE:
      throw new Error("Unexpected type kind!");
      break;
    case PCTType.TYPE:
      throw new Error("Unexpected type kind!");
      break;
    case PCTType.MAINAGENT:
      throw new Error("Unexpected type kind!");
      break;
    case PCTType.AGENT:
      return PCCType.INT;
    case PCTType.WILDCARD:
      throw new Error("Unexpected type kind!");
      break;
    default:
      return PCCType.VOID;
  }
};

PCTArrayType.prototype.getCCSType = function() {
  return new PCCType(this.elementsType.getCCSType());
};

PCTChannelType.prototype.getCCSType = function() {
  return new PCCType(this.chanelledType.getCCSType());
};

PCTProcedureType.prototype.getCCSType = function() {
  return this.returnType.getCCSType();
};

PCTProcedureType.prototype.getCCSArgumentTypes = function() {
  var t, _i, _len, _ref27, _results;

  _ref27 = this.argumentTypes;
  _results = [];
  for (_i = 0, _len = _ref27.length; _i < _len; _i++) {
    t = _ref27[_i];
    _results.push(t.getCCSType());
  }
  return _results;
};

PCTArrayType.prototype.fulfillAssignment = function(compiler, container) {
  var result;

  result = compiler.getFreshContainer(container.ccsType);
  compiler.emitInput("array_copy", container, result);
  return result;
};

PCTArrayType.prototype.createDefaultContainer = function(compiler) {
  var result;

  result = compiler.getFreshContainer(this.getCCSType());
  compiler.emitInput("array" + this.capacity + "_create", null, result);
  return result;
};

PCTType.prototype.fulfillAssignment = function(compiler, container) {
  return container;
};

PCTType.prototype.createDefaultContainer = function(compiler) {
  var result;

  if (this.kind === PCTType.AGENT) {
    throw new Error("No default value for agents available");
  }
  if (this.kind === PCTType.VOID) {
    throw new Error("No default value for void available");
  }
  if (this.kind === PCTType.MUTEX) {
    result = compiler.getFreshContainer(PCCType.INT);
    compiler.emitInput("mutex_create", null, result);
    return result;
  } else if (this.kind === PCTType.STRING) {
    return new PCCConstantContainer("");
  } else {
    return new PCCConstantContainer(0);
  }
};

PCTChannelType.prototype.createDefaultContainer = function(compiler) {
  var channel, res;

  res = compiler.getFreshContainer(this.getCCSType());
  channel = "channel" + (this.capacity !== PCChannelType.CAPACITY_UNKNOWN ? this.capacity : "") + "_create";
  compiler.emitInput(channel, null, res);
  return res;
};

PCTClassType.prototype.createDefaultContainer = function(compiler) {
  var result;

  result = compiler.getFreshContainer(PCCType.INT);
  compiler.emitInput("class_" + this.identifier + "_create", null, result);
  return result;
};

PCCVariableInfo = (function(_super) {
  __extends(PCCVariableInfo, _super);

  function PCCVariableInfo(node, name, type, isInternal) {
    this.isInternal = isInternal != null ? isInternal : false;
    PCCVariableInfo.__super__.constructor.call(this, node, name, type);
  }

  PCCVariableInfo.prototype.getIdentifier = function() {
    return "" + (this.isInternal ? "#" : "") + (this.getName());
  };

  PCCVariableInfo.prototype.getSuggestedContainerName = function() {
    return this.getName() + (this.isInternal ? "H" : "L");
  };

  return PCCVariableInfo;

})(PCVariable);

PCCVariableInfo.getNameForInternalVariableWithName = function(name) {
  return "#" + name;
};

PCVariable.prototype.getSuggestedContainerName = function() {
  return this.getName() + "L";
};

PCVariable.prototype.getCCSType = function() {
  return this.type.getCCSType();
};

PCVariable.prototype.compileDefaultValue = function(compiler) {
  if (this.node) {
    return this.node.compileDefaultValue(compiler);
  } else {
    return this.type.createDefaultContainer(compiler);
  }
};

PCCVariableInfo.prototype.getCCSType = function() {
  if (this.type || !this.isInternal) {
    return PCCVariableInfo.__super__.getCCSType.apply(this, arguments);
  } else {
    return PCCType.INT;
  }
};

PCCVariable = (function(_super) {
  __extends(PCCVariable, _super);

  function PCCVariable() {
    _ref27 = PCCVariable.__super__.constructor.apply(this, arguments);
    return _ref27;
  }

  PCCVariable.prototype.getContainer = function(compiler) {
    throw new Error("Not implemented!");
  };

  PCCVariable.prototype.setContainer = function(compiler, container) {
    throw new Error("Not implemented");
  };

  return PCCVariable;

})(PCCVariableInfo);

PCCGlobalVariable = (function(_super) {
  __extends(PCCGlobalVariable, _super);

  function PCCGlobalVariable() {
    _ref28 = PCCGlobalVariable.__super__.constructor.apply(this, arguments);
    return _ref28;
  }

  PCCGlobalVariable.prototype.accessorChannel = function(set) {
    return "env_global_" + (set ? "set" : "get") + "_" + (this.getName());
  };

  PCCGlobalVariable.prototype.getContainer = function(compiler) {
    var result;

    result = compiler.getFreshContainer(this.type.getCCSType());
    compiler.emitInput(this.accessorChannel(false), null, result);
    return result;
  };

  PCCGlobalVariable.prototype.setContainer = function(compiler, container) {
    compiler.emitOutput(this.accessorChannel(true), null, container);
    return null;
  };

  PCCGlobalVariable.prototype.emitAccessors = function(compiler, variables, instance) {
    var c, containers, control, local, v;

    if (instance == null) {
      instance = null;
    }
    local = compiler.getVariableWithName(this.getIdentifier());
    containers = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = variables.length; _i < _len; _i++) {
        v = variables[_i];
        _results.push(v.getContainer(compiler));
      }
      return _results;
    })();
    control = compiler.emitChoice();
    c = local.getContainer(compiler);
    compiler.emitOutput(this.accessorChannel(false), instance, c);
    compiler.emitProcessApplication(this.getEnvProcessName(), containers);
    control.setBranchFinished();
    compiler.emitInput(this.accessorChannel(true), instance, c);
    compiler.emitProcessApplication(this.getEnvProcessName(), containers);
    return control.setBranchFinished();
  };

  PCCGlobalVariable.prototype.emitConstructor = function(compiler) {
    var container;

    compiler.beginProcessGroup(new PCCGroupable(this.getEnvProcessName()), [this]);
    this.emitAccessors(compiler, [compiler.getVariableWithName(this.getName())]);
    compiler.endProcessGroup();
    compiler.beginProcessGroup(this);
    container = this.compileDefaultValue(compiler);
    compiler.emitProcessApplication(this.getEnvProcessName(), [container]);
    return compiler.endProcessGroup();
  };

  PCCGlobalVariable.prototype.getProcessName = function() {
    return "Env_global_" + (this.getName()) + "_cons";
  };

  PCCGlobalVariable.prototype.getEnvProcessName = function() {
    return "Env_global_" + (this.getName());
  };

  return PCCGlobalVariable;

})(PCCVariable);

PCCField = (function(_super) {
  __extends(PCCField, _super);

  function PCCField() {
    _ref29 = PCCField.__super__.constructor.apply(this, arguments);
    return _ref29;
  }

  PCCField.prototype.accessorChannel = function(set) {
    return "env_class_" + (this.parent.getName()) + "_" + (set ? "set" : "get") + "_" + (this.getName());
  };

  PCCField.prototype.getContainer = function(compiler) {
    var result;

    if (this.getIdentifier() === "#guard") {
      result = compiler.getFreshContainer(PCCType.INT);
      compiler.emitInput("env_class_get_guard", compiler.getVariableWithName("i", null, true).getContainer(compiler), result);
    } else {
      result = compiler.getFreshContainer(this.type.getCCSType());
      compiler.emitInput(this.accessorChannel(false), compiler.getVariableWithName("i", null, true).getContainer(compiler), result);
    }
    return result;
  };

  PCCField.prototype.setContainer = function(compiler, container) {
    compiler.emitOutput(this.accessorChannel(true), compiler.getVariableWithName("i", null, true).getContainer(compiler), container);
    return null;
  };

  PCCField.prototype.getEnvProcessName = function() {
    return "Env_class_" + (this.parent.getName());
  };

  return PCCField;

})(PCCGlobalVariable);

PCCInternalReadOnlyField = (function(_super) {
  __extends(PCCInternalReadOnlyField, _super);

  function PCCInternalReadOnlyField() {
    _ref30 = PCCInternalReadOnlyField.__super__.constructor.apply(this, arguments);
    return _ref30;
  }

  PCCInternalReadOnlyField.prototype.emitAccessors = function(compiler, variables, instance) {
    var c, containers, local, v;

    local = compiler.getVariableWithName(this.getIdentifier());
    containers = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = variables.length; _i < _len; _i++) {
        v = variables[_i];
        _results.push(v.getContainer(compiler));
      }
      return _results;
    })();
    c = local.getContainer(compiler);
    compiler.emitOutput("env_class_guard", instance, c);
    return compiler.emitProcessApplication(this.getEnvProcessName(), containers);
  };

  PCCInternalReadOnlyField.prototype.getContainer = function(compiler) {
    var result;

    result = compiler.getFreshContainer(PCCType.INT);
    compiler.emitInput("env_class_guard", compiler.getVariableWithName("i", null, true).getContainer(compiler), result);
    return result;
  };

  PCCInternalReadOnlyField.prototype.setContainer = function() {
    throw new Error("Setting container for read only variable!");
  };

  return PCCInternalReadOnlyField;

})(PCCField);

PCCCondition = (function(_super) {
  __extends(PCCCondition, _super);

  function PCCCondition(name, expressionNode) {
    this.expressionNode = expressionNode;
    PCCCondition.__super__.constructor.call(this, name, new PCTType(PCTType.CONDITION));
  }

  return PCCCondition;

})(PCCField);

PCCLocalVariable = (function(_super) {
  __extends(PCCLocalVariable, _super);

  function PCCLocalVariable() {
    _ref31 = PCCLocalVariable.__super__.constructor.apply(this, arguments);
    return _ref31;
  }

  PCCLocalVariable.prototype.getContainer = function(compiler) {
    return compiler.getProcessFrame().getContainerForVariable(this.getIdentifier());
  };

  PCCLocalVariable.prototype.setContainer = function(compiler, container) {
    return compiler.getProcessFrame().assignContainerToVariable(this.getIdentifier(), container);
  };

  return PCCLocalVariable;

})(PCCVariable);

PCCProgramController = (function(_super) {
  __extends(PCCProgramController, _super);

  function PCCProgramController() {
    PCCProgramController.__super__.constructor.apply(this, arguments);
    this.root = new PCCGlobal();
    this.agents = [];
    this._envStack = this.root;
  }

  PCCProgramController.prototype.processNewClass = function(node, classType) {
    var tnode;

    tnode = new PCCClass(node, classType);
    return this._processNewClass(tnode);
  };

  PCCProgramController.prototype.beginNewProcedure = function(node, procedureName, returnType, args) {
    var tnode;

    tnode = new PCCProcedure(node, procedureName, returnType, args);
    return this._beginNewProcedure(tnode);
  };

  PCCProgramController.prototype.processNewVariable = function(variable) {
    var tnode, varClass;

    varClass = this._envStack.getVariableClass();
    tnode = new varClass(variable.node, variable.getName(), variable.type);
    return this._processNewVariable(tnode);
  };

  PCCProgramController.prototype.processProcedureAsAgent = function(procedure) {
    return this.agents.push(procedure);
  };

  PCCProgramController.prototype.getUsedTypes = function() {
    var res;

    res = {
      arrays: {},
      channels: {}
    };
    this.root.getUsedTypes(res);
    return res;
  };

  return PCCProgramController;

})(PCEnvironmentController);

PCEnvironmentNode.prototype.getUsedTypes = function(res) {
  var c, _i, _len, _ref32;

  _ref32 = this.children;
  for (_i = 0, _len = _ref32.length; _i < _len; _i++) {
    c = _ref32[_i];
    c.getUsedTypes(res);
  }
  return null;
};

PCVariable.prototype.getUsedTypes = function(res) {
  if (this.type.kind === PCTType.ARRAY) {
    res.arrays[this.type.capacity] = true;
  } else if (this.type.kind === PCTType.CHANNEL) {
    res.channels[this.type.capacity] = true;
  }
  return null;
};

PCNode.prototype.collectAgents = function(env) {
  var c, _i, _len, _ref32, _results;

  _ref32 = this.children;
  _results = [];
  for (_i = 0, _len = _ref32.length; _i < _len; _i++) {
    c = _ref32[_i];
    _results.push(c.collectAgents(env));
  }
  return _results;
};

PCMonitor.prototype.collectAgents = function(env) {
  env.beginClass(this.name);
  PCMonitor.__super__.collectAgents.apply(this, arguments);
  return env.endClass();
};

PCStruct.prototype.collectAgents = function(env) {
  env.beginClass(this.name);
  PCStruct.__super__.collectAgents.apply(this, arguments);
  return env.endClass();
};

PCProcedure.prototype.collectAgents = function(env) {
  env.beginProcedure(this.name);
  PCProcedure.__super__.collectAgents.apply(this, arguments);
  return env.endProcedure();
};

PCStartExpression.prototype.collectAgents = function(env) {
  return env.processProcedureAsAgent(this.children[0].getProcedure(env));
};

/*
	The central coordination class for the compile process of PseuCo to CCS.
	You start the compilation process by creating a new PCCCompiler object with the node of your PseuCo tree and call compile() on it. You'll get a CCS tree on success
*/


PCCCompiler = (function() {
  function PCCCompiler(program) {
    this.program = program;
    this.controller = null;
    this.stack = null;
    this.groupElements = [];
    this.controller = new PCCProgramController(this.program);
  }

  PCCCompiler.prototype.compile = function() {
    var cls, global, n, p, usedTypes, _i, _j, _len, _len1, _ref32, _ref33;

    this.program.collectClasses(this.controller);
    this.program.collectEnvironment(this.controller);
    this.program.collectAgents(this.controller);
    global = new PCCGlobalStackElement(this.controller.getGlobal());
    this.stack = new PCCCompilerStack(global);
    usedTypes = this.controller.getUsedTypes();
    this.compileMutex();
    this.compileWaitRoom();
    this.compileArrayManager();
    for (n in usedTypes.arrays) {
      this.compileArrayWithCapacity(n);
    }
    this.compileAgentTools();
    _ref32 = this.controller.agents;
    for (_i = 0, _len = _ref32.length; _i < _len; _i++) {
      p = _ref32[_i];
      p.emitAgentConstructor(this);
    }
    _ref33 = this.controller.getAllClasses();
    for (_j = 0, _len1 = _ref33.length; _j < _len1; _j++) {
      cls = _ref33[_j];
      cls.emitConstructor(this);
    }
    this.program.compile(this);
    return new CCS(this.controller.root.collectPDefs(), new CCSStop());
  };

  /*
  		Delegates must implement the following methods:
  		 compilerGetVariable(compiler, identifier)
  		 compilerGetProcedure(compiler, identifier)
  		 compilerHandleNewIdentifierWithDefaultValueCallback(compiler, identifier, callback, context)
  		When these methods are called, the receiver may modify the compiler state by emitting CCS processes, pushing processes, ...
  */


  PCCCompiler.prototype.getVariableWithName = function(name, className, isInternal) {
    if (isInternal) {
      name = PCCVariableInfo.getNameForInternalVariableWithName(name);
    }
    if (className) {
      return this.controller.getClassWithName(className).compilerGetVariable(this, name);
    }
    return this.stack.compilerGetVariable(this, name);
  };

  PCCCompiler.prototype.getProcedureWithName = function(name, className) {
    if (className) {
      return this.controller.getClassWithName(className).compilerGetProcedure(this, name);
    }
    return this.stack.compilerGetProcedure(this, name);
  };

  PCCCompiler.prototype.getClassWithName = function(name) {
    return this.controller.getClassWithName(name);
  };

  PCCCompiler.prototype.getCurrentClass = function() {
    var e, _i, _len, _ref32;

    _ref32 = this.groupElements;
    for (_i = 0, _len = _ref32.length; _i < _len; _i++) {
      e = _ref32[_i];
      if (e instanceof PCCClassStackElement) {
        return e.classInfo;
      }
    }
  };

  PCCCompiler.prototype.getGlobal = function() {
    return this.controller.getGlobal();
  };

  PCCCompiler.prototype.getFreshContainer = function(ccsType, wish) {
    return this.getProcessFrame().createContainer(ccsType, wish);
  };

  PCCCompiler.prototype.handleNewVariableWithDefaultValueCallback = function(variable, callback, context) {
    return this.stack.compilerHandleNewVariableWithDefaultValueCallback(this, variable, callback, context);
  };

  PCCCompiler.prototype._getControlElement = function() {
    return this.stack.getCurrentControlElement();
  };

  PCCCompiler.prototype._handleStackResult = function(resultContainer, controlElement) {
    var result, _i, _len, _ref32, _results;

    console.log("Saving results to " + controlElement.__proto__.constructor);
    _ref32 = resultContainer.results;
    _results = [];
    for (_i = 0, _len = _ref32.length; _i < _len; _i++) {
      result = _ref32[_i];
      _results.push(result.type === PCCStackResult.TYPE_CCSPROCESS_DEFINITION ? controlElement.compilerPushPDef(result.data) : void 0);
    }
    return _results;
  };

  PCCCompiler.prototype.beginProcessGroup = function(groupable, variables) {
    var element, frame;

    frame = new PCCProcessFrame(groupable, variables);
    element = new PCCProcessFrameStackElement(frame);
    this.groupElements.push(element);
    this.stack.pushElement(element);
    return frame.emitProcessDefinition(this);
  };

  PCCCompiler.prototype.endProcessGroup = function() {
    var controlElement, frame;

    frame = this.groupElements.pop();
    if (!(frame instanceof PCCProcessFrameStackElement)) {
      throw new Error("Unexpected stack element!");
    }
    controlElement = this._getControlElement();
    return this._handleStackResult(frame.removeFromStack(), controlElement);
  };

  PCCCompiler.prototype.getProcessFrame = function() {
    return this.stack.getCurrentProcessFrame();
  };

  PCCCompiler.prototype.addProcessGroupFrame = function(nextFrame) {
    this.stack.pushElement(new PCCProcessFrameStackElement(nextFrame));
    nextFrame.emitProcessDefinition(this);
    return null;
  };

  PCCCompiler.prototype.emitNewScope = function() {
    var frame, scope;

    frame = this.getProcessFrame();
    scope = frame.createNewScope();
    this.stack.pushElement(new PCCScopeStackElement(scope));
    return scope;
  };

  PCCCompiler.prototype.emitNextProcessFrame = function() {
    var frame, next;

    frame = this.getProcessFrame();
    next = frame.createFollowupFrame();
    next.emitCallProcessFromFrame(this, frame);
    this.addProcessGroupFrame(next);
    return next;
  };

  PCCCompiler.prototype.emitMergeOfProcessFramesOfPlaceholders = function(placeholders) {
    var followup, frames, p, _i, _len;

    if (placeholders.length === 0) {
      return null;
    }
    frames = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = placeholders.length; _i < _len; _i++) {
        p = placeholders[_i];
        _results.push(p.frame);
      }
      return _results;
    })();
    followup = PCCProcessFrame.createFollowupFrameForFrames(frames);
    for (_i = 0, _len = placeholders.length; _i < _len; _i++) {
      p = placeholders[_i];
      followup.emitCallProcessFromFrame(compiler, p.frame, p);
    }
    this.addProcessGroupFrame(followup);
    return followup;
  };

  PCCCompiler.prototype.protectContainer = function(container) {
    return this.getProcessFrame().protectContainer(container);
  };

  PCCCompiler.prototype.unprotectContainer = function() {
    return this.getProcessFrame().unprotectContainer();
  };

  PCCCompiler.prototype.getProtectedContainer = function() {
    return this.getProcessFrame().getProtectedContainer();
  };

  PCCCompiler.prototype._silentlyAddProcessDefinition = function(processName, argumentContainers) {
    var element;

    element = new PCCProcessDefinitionStackElement(processName, argumentContainers);
    this.stack.pushElement(element);
    return element;
  };

  PCCCompiler.prototype.beginProcessDefinition = function(processName, argumentContainers) {
    var element;

    element = this._silentlyAddProcessDefinition(processName, argumentContainers);
    return this.groupElements.push(element);
  };

  PCCCompiler.prototype.isCurrentProcessCompleted = function() {
    return this.stack.isCurrentProcessCompleted();
  };

  PCCCompiler.prototype.endProcessDefinition = function() {
    var controlElement, def;

    def = this.groupElements.pop();
    if (!(def instanceof PCCProcessDefinitionStackElement)) {
      throw new Error("Unexpected stack element!");
    }
    controlElement = this._getControlElement();
    return this._handleStackResult(def.removeFromStack(), controlElement);
  };

  PCCCompiler.prototype.beginClass = function(className) {
    var curClass, element;

    this.controller.beginClass(className);
    curClass = this.controller.getClassWithName(className);
    if (!curClass) {
      throw new Error("Tried to begin unknown class!");
    }
    element = new PCCClassStackElement(curClass);
    this.stack.pushElement(element);
    return this.groupElements.push(element);
  };

  PCCCompiler.prototype.endClass = function() {
    var cls;

    this.controller.endClass();
    cls = this.groupElements.pop();
    if (!(cls instanceof PCCClassStackElement)) {
      throw new Error("Unexpected stack element!");
    }
    return cls.removeFromStack();
  };

  PCCCompiler.prototype.beginProgram = function() {
    /*
    		throw new Error("Stack already existed before beginning of program!") if @stack != null
    		global = new PCCGlobalStackElement(@controller.getGlobal())
    		@stack = new PCCCompilerStack(global)
    		@groupElements.push(global)
    */

  };

  PCCCompiler.prototype.endProgram = function() {};

  /*
  		global = @groupElements.pop()
  		throw new Error("Unexpected stack element!") if not (global instanceof PCCGlobalStackElement)
  		global.removeFromStack()
  		@stack = null
  */


  PCCCompiler.prototype.beginMainAgent = function() {
    this.controller.beginMainAgent();
    return this.beginProcessGroup(new PCCGroupable("MainAgent"));
  };

  PCCCompiler.prototype.endMainAgent = function() {
    this.controller.endMainAgent();
    return this.endProcessGroup();
  };

  PCCCompiler.prototype.beginProcedure = function(procedureName) {
    var element, frame, procedure;

    this.controller.beginProcedure(procedureName);
    procedure = this.stack.compilerGetProcedure(this, procedureName);
    if (!procedure) {
      throw new Error("Tried to begin unknown procedure!");
    }
    frame = new PCCProcedureFrame(procedure);
    element = new PCCProcedureStackElement(procedure);
    this.stack.pushElement(element);
    this.groupElements.push(element);
    return this.addProcessGroupFrame(frame);
  };

  PCCCompiler.prototype.endProcedure = function() {
    var controlElement, proc;

    this.controller.endProcedure();
    proc = this.groupElements.pop();
    if (!(proc instanceof PCCProcedureStackElement)) {
      throw new Error("Unexpected stack element!");
    }
    controlElement = this._getControlElement();
    return this._handleStackResult(proc.removeFromStack(), controlElement);
  };

  PCCCompiler.prototype.beginStatement = function(statement) {};

  PCCCompiler.prototype.endStatement = function() {};

  PCCCompiler.prototype.beginExpression = function(expression) {};

  PCCCompiler.prototype.endExpression = function() {};

  PCCCompiler.prototype.emitStop = function() {
    return this.stack.pushElement(new PCCStopStackElement());
  };

  PCCCompiler.prototype.emitExit = function() {
    return this.stack.pushElement(new PCCExitStackElement());
  };

  PCCCompiler.prototype.emitProcessApplication = function(processName, argumentContainers) {
    if (argumentContainers == null) {
      argumentContainers = [];
    }
    return this.stack.pushElement(new PCCApplicationStackElement(processName, argumentContainers));
  };

  PCCCompiler.prototype.emitOutput = function(channel, specificChannel, valueContainer) {
    return this.stack.pushElement(new PCCOutputStackElement(channel, specificChannel, valueContainer));
  };

  PCCCompiler.prototype.emitInput = function(channel, specificChannel, container) {
    return this.stack.pushElement(new PCCInputStackElement(channel, specificChannel, container));
  };

  PCCCompiler.prototype.emitCondition = function(condition) {
    return this.stack.pushElement(new PCCConditionStackElement(condition));
  };

  PCCCompiler.prototype.emitChoice = function() {
    var res;

    res = new PCCChoiceStackElement();
    this.stack.pushElement(res);
    if (this.groupElements.length > 1) {
      this.emitNewScope();
    }
    return res;
  };

  PCCCompiler.prototype.emitParallel = function() {
    var res;

    res = new PCCParallelStackElement();
    this.stack.pushElement(res);
    if (this.groupElements.length > 1) {
      this.emitNewScope();
    }
    return res;
  };

  PCCCompiler.prototype.emitSequence = function() {
    var res;

    res = new PCCSequenceStackElement();
    this.stack.pushElement(res);
    return res;
  };

  PCCCompiler.prototype.emitRestriction = function(restrictedChannelNames) {
    return this.stack.pushElement(new PCCRestrictionStackElement(restrictedChannelNames));
  };

  PCCCompiler.prototype.emitProcessApplicationPlaceholder = function() {
    var ph;

    ph = new PCCApplicationPlaceholderStackElement(this.getProcessFrame());
    this.stack.pushElement(ph);
    return ph;
  };

  PCCCompiler.prototype.compileMutex = function() {
    var control, i;

    i = new PCCVariableContainer("i", PCCType.INT);
    this.beginProcessDefinition("Mutex", [i]);
    this.emitInput("lock", i, null);
    this.emitInput("unlock", i, null);
    this.emitProcessApplication("Mutex", [i]);
    this.endProcessDefinition();
    i = new PCCVariableContainer("next_i", PCCType.INT);
    this.beginProcessDefinition("Mutex_cons", [i]);
    this.emitOutput("mutex_create", null, i);
    control = this.emitParallel();
    this.emitProcessApplication("Mutex_cons", [new PCCBinaryContainer(i, new PCCConstantContainer(1), "+")]);
    control.setBranchFinished();
    this.emitProcessApplication("Mutex", [i]);
    control.setBranchFinished();
    return this.endProcessDefinition();
  };

  PCCCompiler.prototype.compileWaitRoom = function() {
    var c, control, control1, control2, control3, i, inner;

    i = new PCCVariableContainer("i", PCCType.INT);
    c = new PCCVariableContainer("c", PCCType.INT);
    this.beginProcessDefinition("WaitRoom", [i, c]);
    control1 = this.emitChoice();
    this.emitInput("signal", i, null);
    inner = this.emitChoice();
    this.emitCondition(new PCCBinaryContainer(c, new PCCConstantContainer(0), "=="));
    this.emitProcessApplication("WaitRoom", [i, c]);
    inner.setBranchFinished();
    this.emitCondition(new PCCBinaryContainer(c, new PCCConstantContainer(0), ">"));
    this.emitInput("wait", i, null);
    this.emitProcessApplication("WaitRoom", [i, new PCCBinaryContainer(c, new PCCConstantContainer(1), "-")]);
    inner.setBranchFinished();
    control1.setBranchFinished();
    control2 = this.emitChoice();
    this.emitInput("add", i, null);
    this.emitProcessApplication("WaitRoom", [i, new PCCBinaryContainer(c, new PCCConstantContainer(1), "+")]);
    control2.setBranchFinished();
    control3 = this.emitSequence();
    this.emitInput("signal_all", i, null);
    this.emitProcessApplication("WaitDistributor", [i, c]);
    control3.setBranchFinished();
    this.emitProcessApplication("WaitRoom", [i, new PCCConstantContainer(0)]);
    control3.setBranchFinished();
    control2.setBranchFinished();
    control1.setBranchFinished();
    this.endProcessDefinition();
    i = new PCCVariableContainer("i", PCCType.INT);
    c = new PCCVariableContainer("c", PCCType.INT);
    this.beginProcessDefinition("WaitDistributor", [i, c]);
    control = this.emitChoice();
    this.emitCondition(new PCCBinaryContainer(c, new PCCConstantContainer(0), "<="));
    this.emitExit();
    control.setBranchFinished();
    this.emitCondition(new PCCBinaryContainer(c, new PCCConstantContainer(0), ">"));
    this.emitInput("wait", i, null);
    this.emitProcessApplication("WaitDistributor", [i, new PCCBinaryContainer(c, new PCCConstantContainer(1), "-")]);
    control.setBranchFinished();
    this.endProcessDefinition();
    i = new PCCVariableContainer("next_i", PCCType.INT);
    this.beginProcessDefinition("WaitRoom_cons", [i]);
    this.emitOutput("wait_create", null, i);
    control = this.emitParallel();
    this.emitProcessApplication("WaitRoom_cons", [new PCCBinaryContainer(i, new PCCConstantContainer(1), "+")]);
    control.setBranchFinished();
    this.emitProcessApplication("WaitRoom", [i, new PCCConstantContainer(0)]);
    control.setBranchFinished();
    return this.endProcessDefinition();
  };

  PCCCompiler.prototype.compileArrayWithCapacity = function(size) {
    var args, control, def, emitAccessors, i, index, j, _i, _j, _k, _ref32;

    i = new PCCVariableContainer("i", PCCType.INT);
    args = [i];
    for (j = _i = 0; 0 <= size ? _i < size : _i > size; j = 0 <= size ? ++_i : --_i) {
      args.push(new PCCVariableContainer("v" + j, PCCType.INT));
    }
    this.beginProcessDefinition("Array" + size, args);
    index = new PCCVariableContainer("index", PCCType.INT);
    this.emitInput("array_access", i, index);
    emitAccessors = function(compiler, i, size, j, args) {
      var inner;

      compiler.emitCondition(new PCCBinaryContainer(index, new PCCConstantContainer(j), "=="));
      inner = compiler.emitChoice();
      compiler.emitOutput("array_get", i, args[j + 1]);
      compiler.emitProcessApplication("Array" + size, args);
      inner.setBranchFinished();
      compiler.emitInput("array_set", i, args[j + 1]);
      compiler.emitProcessApplication("Array" + size, args);
      return inner.setBranchFinished();
    };
    for (j = _j = 0, _ref32 = size - 1; 0 <= _ref32 ? _j < _ref32 : _j > _ref32; j = 0 <= _ref32 ? ++_j : --_j) {
      control = this.emitChoice();
      emitAccessors(this, i, size, j, args);
      control.setBranchFinished();
    }
    emitAccessors(this, i, size, size - 1, args);
    this.endProcessDefinition();
    i = new PCCVariableContainer("next_i", PCCType.INT);
    this.beginProcessDefinition("Array" + size + "_cons", []);
    this.emitInput("array_new", null, i);
    def = new PCCVariableContainer("d", PCCType.VOID);
    this.emitOutput("array" + size + "_create", null, i);
    this.emitInput("array_setDefault", i, def);
    control = this.emitParallel();
    this.emitProcessApplication("Array" + size + "_cons", []);
    control.setBranchFinished();
    args = [i];
    for (j = _k = 0; 0 <= size ? _k < size : _k > size; j = 0 <= size ? ++_k : --_k) {
      args.push(def);
    }
    this.emitProcessApplication("Array" + size, args);
    control.setBranchFinished();
    return this.endProcessDefinition();
  };

  PCCCompiler.prototype.compileArrayManager = function() {
    var i;

    i = new PCCVariableContainer("next_i", PCCType.INT);
    this.beginProcessDefinition("ArrayManager", [i]);
    this.emitOutput("array_new", null, i);
    this.emitProcessApplication("ArrayManager", [new PCCBinaryContainer(i, new PCCConstantContainer(1), "+")]);
    return this.endProcessDefinition();
  };

  PCCCompiler.prototype.compileAgentTools = function() {
    var a, c, control, i;

    i = new PCCVariableContainer("next_i", PCCType.INT);
    this.beginProcessDefinition("AgentManager", [i]);
    this.emitOutput("agent_new", null, i);
    this.emitProcessApplication("AgentManager", [new PCCBinaryContainer(i, new PCCConstantContainer(1), "+")]);
    this.endProcessDefinition();
    a = new PCCVariableContainer("a", PCCType.INT);
    c = new PCCVariableContainer("c", PCCType.INT);
    this.beginProcessDefinition("AgentJoiner", [a, c]);
    control = this.emitChoice();
    this.emitInput("join_register", a, null);
    this.emitProcessApplication("AgentJoiner", [a, new PCCBinaryContainer(c, new PCCConstantContainer(1), "+")]);
    control.setBranchFinished();
    this.emitInput("agent_terminate", a, null);
    this.emitProcessApplication("JoinDistributor", [a, c]);
    control.setBranchFinished();
    this.endProcessDefinition();
    a = new PCCVariableContainer("a", PCCType.INT);
    c = new PCCVariableContainer("c", PCCType.INT);
    this.beginProcessDefinition("JoinDistributor", [a, c]);
    control = this.emitChoice();
    this.emitCondition(new PCCBinaryContainer(c, new PCCConstantContainer(0), "<="));
    this.emitInput("join_register", a, null);
    this.emitInput("join", a, null);
    this.emitProcessApplication("JoinDistributor", [a, new PCCConstantContainer(0)]);
    control.setBranchFinished();
    this.emitCondition(new PCCBinaryContainer(c, new PCCConstantContainer(0), ">"));
    this.emitInput("join", a, null);
    this.emitProcessApplication("JoinDistributor", [a, new PCCBinaryContainer(c, new PCCConstantContainer(1), "-")]);
    control.setBranchFinished();
    return this.endProcessDefinition();
  };

  return PCCCompiler;

})();

PCEnvironmentNode.prototype.compilerPushPDef = function(pdef) {
  if (!this.PCCCompilerPDefs) {
    this.PCCCompilerPDefs = [];
  }
  return this.PCCCompilerPDefs.push(pdef);
};

PCVariable.prototype.compilerPushPDef = PCEnvironmentNode.prototype.compilerPushPDef;

PCEnvironmentNode.prototype.collectPDefs = function() {
  var c;

  if (!this.PCCCompilerPDefs) {
    this.PCCCompilerPDefs = [];
  }
  return this.PCCCompilerPDefs.concat(((function() {
    var _i, _len, _ref32, _results;

    _ref32 = this.children;
    _results = [];
    for (_i = 0, _len = _ref32.length; _i < _len; _i++) {
      c = _ref32[_i];
      _results.push(c.collectPDefs());
    }
    return _results;
  }).call(this)).concatChildren());
};

PCVariable.prototype.collectPDefs = function() {
  if (this.PCCCompilerPDefs) {
    return this.PCCCompilerPDefs;
  } else {
    return [];
  }
};

/*
PCStmtExpression::collectAgents = (env) -> 
	@children[0].collectAgents(env)
PCVariableDeclarator::collectEnvironment = (env, type) ->
	@children.length > 0 and @children[0].collectEnvironment(env)
PCVariableInitializer::collectEnvironment = (env) ->
	!@isArray() and @children[0].collectEnvironment(env)
PCExpression::collectEnvironment = (env) -> c.collectEnvironment(env) for c in @children
PCStartExpression::collectEnvironment = (env) ->
	env instanceof PCCProgramController and env.processProcedureAsAgent(@children[0].getProcedure(env))
*/


PCCConstructor = (function() {
  function PCCConstructor(compiler, delegate, context) {
    this.compiler = compiler;
    this.delegate = delegate;
    this.context = context;
  }

  PCCConstructor.prototype.emit = function() {
    var control, entry, envArgCount, envName, i, recursion, v, variables, vars, _base, _i;

    envName = this.delegate.constructorGetName(this, this.context);
    variables = this.delegate.constructorGetArguments(this, compiler, this.context);
    compiler.beginProcessGroup(new PCCGroupable(envName + "_cons"), variables);
    entry = compiler.getProcessFrame();
    variables = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = variables.length; _i < _len; _i++) {
        v = variables[_i];
        _results.push(compiler.getVariableWithName(v.getName(), null, v.isInternal));
      }
      return _results;
    })();
    envArgCount = this.delegate.constructorProtectEnvironmentArguments(this, compiler, variables, this.context);
    vars = [];
    for (i = _i = 0; 0 <= envArgCount ? _i < envArgCount : _i > envArgCount; i = 0 <= envArgCount ? ++_i : --_i) {
      vars.unshift(compiler.unprotectContainer());
    }
    recursion = typeof (_base = this.delegate).constructorShouldCallRecursively === "function" ? _base.constructorShouldCallRecursively(this, this.context) : void 0;
    control = null;
    if (recursion) {
      control = compiler.emitParallel();
    }
    compiler.emitProcessApplication(envName, vars);
    if (recursion) {
      control.setBranchFinished();
      this.delegate.constructorUpdateVariablesForRecursiveCall(this, compiler, entry, variables, this.context);
      entry.emitCallProcessFromFrame(compiler, compiler.getProcessFrame());
      control.setBranchFinished();
    }
    return compiler.endProcessGroup();
  };

  return PCCConstructor;

})();

PCCConstructor.emitConstructor = function(compiler, delegate, context) {
  return (new PCCConstructor(compiler, delegate, context)).emit();
};

/*
	Manages different kinds of containers. Containers basically wrap CCS Expressions.
*/


PCCContainer = (function() {
  function PCCContainer(ccsType) {
    this.ccsType = ccsType;
  }

  PCCContainer.prototype.isReadonly = function() {
    throw new Error("Abstract");
  };

  PCCContainer.prototype.ccsTree = function() {
    throw new Error("Abstract");
  };

  PCCContainer.prototype.isEqual = function(container) {
    throw new Error("Abstract");
  };

  return PCCContainer;

})();

PCCConstantContainer = (function(_super) {
  __extends(PCCConstantContainer, _super);

  function PCCConstantContainer(value) {
    this.value = value;
    if (typeof this.value === "boolean") {
      PCCConstantContainer.__super__.constructor.call(this, PCCType.BOOL);
    } else if (typeof this.value === "number") {
      PCCConstantContainer.__super__.constructor.call(this, PCCType.INT);
    } else if (typeof this.value === "string") {
      PCCConstantContainer.__super__.constructor.call(this, PCCType.STRING);
    } else {
      throw new Error("Unknown type");
    }
  }

  PCCConstantContainer.prototype.isReadonly = function() {
    return true;
  };

  PCCConstantContainer.prototype.ccsTree = function() {
    return new CCSConstantExpression(this.value);
  };

  PCCConstantContainer.prototype.isEqual = function(container) {
    return container instanceof PCCConstantContainer && container.value === this.value;
  };

  return PCCConstantContainer;

})(PCCContainer);

PCCVariableContainer = (function(_super) {
  __extends(PCCVariableContainer, _super);

  function PCCVariableContainer(identifier, ccsType) {
    this.identifier = identifier;
    PCCVariableContainer.__super__.constructor.call(this, ccsType);
  }

  PCCVariableContainer.prototype.isReadonly = function() {
    return false;
  };

  PCCVariableContainer.prototype.ccsTree = function() {
    return new CCSVariableExpression(this.identifier);
  };

  PCCVariableContainer.prototype.isEqual = function(container) {
    return container instanceof PCCVariableContainer && container.identifier === this.identifier;
  };

  return PCCVariableContainer;

})(PCCContainer);

PCCComposedContainer = (function(_super) {
  __extends(PCCComposedContainer, _super);

  function PCCComposedContainer(ccsType) {
    PCCComposedContainer.__super__.constructor.call(this, ccsType);
  }

  return PCCComposedContainer;

})(PCCContainer);

PCCBinaryContainer = (function(_super) {
  __extends(PCCBinaryContainer, _super);

  function PCCBinaryContainer(leftContainer, rightContainer, operator) {
    this.leftContainer = leftContainer;
    this.rightContainer = rightContainer;
    this.operator = operator;
    if (this.operator === "+" || this.operator === "^") {
      if (this.leftContainer.ccsType.isString() || this.rightContainer.ccsType.isString() || this.operator === "^") {
        this.exp = new CCSConcatenatingExpression(this.leftContainer.ccsTree(), this.rightContainer.ccsTree());
        PCCBinaryContainer.__super__.constructor.call(this, PCCType.STRING);
      } else {
        this.exp = new CCSAdditiveExpression(this.leftContainer.ccsTree(), this.rightContainer.ccsTree(), this.operator);
        PCCBinaryContainer.__super__.constructor.call(this, PCCType.INT);
      }
    } else if (this.operator === "-") {
      this.exp = new CCSAdditiveExpression(this.leftContainer.ccsTree(), this.rightContainer.ccsTree(), this.operator);
      PCCBinaryContainer.__super__.constructor.call(this, PCCType.INT);
    } else if (this.operator === "*" || this.operator === "/" || this.operator === "%") {
      this.exp = new MultiplicativeExpression(this.leftContainer.ccsTree(), this.rightContainer.ccsTree(), this.operator);
      PCCBinaryContainer.__super__.constructor.call(this, PCCType.INT);
    } else if (this.operator === "<" || this.operator === "<=" || this.operator === ">" || this.operator === ">=") {
      this.exp = new CCSRelationalExpression(this.leftContainer.ccsTree(), this.rightContainer.ccsTree(), this.operator);
      PCCBinaryContainer.__super__.constructor.call(this, PCCType.BOOL);
    } else if (this.operator === "==" || this.operator === "!=") {
      this.exp = new CCSEqualityExpression(this.leftContainer.ccsTree(), this.rightContainer.ccsTree(), this.operator);
      PCCBinaryContainer.__super__.constructor.call(this, PCCType.BOOL);
    } else if (this.operator === "&&") {
      throw new Error("Not available in CCS");
    } else if (this.operator === "||") {
      throw new Error("Not available in CCS");
    } else {
      throw new Error("Unknown operator");
    }
  }

  PCCBinaryContainer.prototype.isReadonly = function() {
    return true;
  };

  PCCBinaryContainer.prototype.ccsTree = function() {
    return this.exp;
  };

  PCCBinaryContainer.prototype.isEqual = function(container) {
    return container instanceof PCCBinaryContainer && container.operator === this.operator && container.leftContainer.isEqual(this.leftContainer) && container.rightContainer.isEqual(this.rightContainer);
  };

  return PCCBinaryContainer;

})(PCCComposedContainer);

PCCUnaryContainer = (function(_super) {
  __extends(PCCUnaryContainer, _super);

  function PCCUnaryContainer(operator, container) {
    this.operator = operator;
    this.container = container;
    if (this.operator === "!") {
      this.exp = new CCSEqualityExpression(this.container.ccsTree(), new CCSConstantExpression(false), "==");
      PCCUnaryContainer.__super__.constructor.call(this, PCCType.BOOL);
    } else if (this.operator === "-") {
      this.exp = new CCSAdditiveExpression(new CCSConstantExpression(0), this.container.ccsTree(), "-");
      PCCUnaryContainer.__super__.constructor.call(this, PCCType.INT);
    } else if (this.operator !== "+") {
      throw new Error("Unknown operator");
    }
  }

  PCCUnaryContainer.prototype.isReadonly = function() {
    return true;
  };

  PCCUnaryContainer.prototype.ccsTree = function() {
    return this.exp;
  };

  PCCUnaryContainer.prototype.isEqual = function(container) {
    return container instanceof PCCConstantContainer && container.operator === this.operator && container.container.isEqual(this.container);
  };

  return PCCUnaryContainer;

})(PCCComposedContainer);

/*
PCCContainer.RETURN = -> new PCCVariableContainer("i_r")
PCCContainer.INSTANCE = -> new PCCVariableContainer("i_i")
PCCContainer.GUARD = -> new PCCVariableContainer("i_g")
*/


PCCStackElement = (function() {
  function PCCStackElement() {
    this.parent = null;
  }

  PCCStackElement.prototype.getResult = function() {
    throw new Error("Abstract and not implemented!");
  };

  PCCStackElement.prototype.getNext = function() {
    throw new Error("Abstract and not implemented!");
  };

  PCCStackElement.prototype.setNext = function() {
    throw new Error("Abstract and not implemented!");
  };

  PCCStackElement.prototype.removeNext = function(next) {
    throw new Error("Abstract and not implemented!");
  };

  PCCStackElement.prototype.getTopElement = function() {
    var next;

    next = this.getNext();
    if (next === null) {
      return this;
    } else {
      return next.getTopElement();
    }
  };

  PCCStackElement.prototype.getCurrentProcessFrame = function() {
    var _ref32;

    return (_ref32 = this.parent) != null ? _ref32.getCurrentProcessFrame() : void 0;
  };

  PCCStackElement.prototype.getCurrentControlElement = function() {
    var _ref32;

    return (_ref32 = this.parent) != null ? _ref32.getCurrentControlElement() : void 0;
  };

  PCCStackElement.prototype.getResults = function() {
    throw new Error("Not implemented");
  };

  PCCStackElement.prototype.removeFromStack = function() {
    var _ref32;

    this.getStack().setTopElement(this.parent);
    if ((_ref32 = this.parent) != null) {
      _ref32.removeNext(this);
    }
    return this.getResults();
  };

  PCCStackElement.prototype.isCompletedProcess = function() {
    return false;
  };

  PCCStackElement.prototype.compilerGetVariable = function(compiler, identifier) {
    var _ref32;

    return (_ref32 = this.parent) != null ? _ref32.compilerGetVariable(compiler, identifier) : void 0;
  };

  PCCStackElement.prototype.compilerGetProcedure = function(compiler, identifier) {
    var _ref32;

    return (_ref32 = this.parent) != null ? _ref32.compilerGetProcedure(compiler, identifier) : void 0;
  };

  PCCStackElement.prototype.compilerHandleNewVariableWithDefaultValueCallback = function(compiler, variable, callback, context) {
    var _ref32;

    return (_ref32 = this.parent) != null ? _ref32.compilerHandleNewVariableWithDefaultValueCallback(compiler, variable, callback, context) : void 0;
  };

  return PCCStackElement;

})();

PCCUnaryStackElement = (function(_super) {
  __extends(PCCUnaryStackElement, _super);

  function PCCUnaryStackElement() {
    this.next = null;
    PCCUnaryStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCUnaryStackElement.prototype.getResults = function() {
    if (this.next === null) {
      return new PCCStackResultContainer();
    } else {
      return this.next.getResults();
    }
  };

  PCCUnaryStackElement.prototype.getNext = function() {
    return this.next;
  };

  PCCUnaryStackElement.prototype.setNext = function(next) {
    if (this.next !== null) {
      throw new Error("Can't set next twice!");
    }
    next.parent = this;
    return this.next = next;
  };

  PCCUnaryStackElement.prototype.removeNext = function(next) {
    if (this.next !== next) {
      throw new Error("Unknown next");
    }
    next.parent = null;
    return this.next = null;
  };

  return PCCUnaryStackElement;

})(PCCStackElement);

PCCBinaryStackElement = (function(_super) {
  __extends(PCCBinaryStackElement, _super);

  function PCCBinaryStackElement() {
    this.leftStack = null;
    this.rightStack = null;
    this.topStack = null;
    this.target = 0;
    PCCBinaryStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCBinaryStackElement.prototype.getResults = function() {
    throw new Error("Abstract and not implemented!");
  };

  PCCBinaryStackElement.prototype.getNext = function() {
    if (this.target === PCCBinaryTarget.LEFT) {
      return this.leftStack;
    } else if (this.target === PCCBinaryTarget.RIGHT) {
      return this.rightStack;
    } else {
      return this.topStack;
    }
  };

  PCCBinaryStackElement.prototype.setNext = function(next) {
    if (next) {
      next.parent = this;
    }
    if (this.target === PCCBinaryTarget.LEFT) {
      if (this.leftStack) {
        throw new Error("Can't set next twice!");
      }
      return this.leftStack = next;
    } else if (this.target === PCCBinaryTarget.RIGHT) {
      if (this.rightStack) {
        throw new Error("Can't set next twice!");
      }
      return this.rightStack = next;
    } else {
      if (this.topStack) {
        throw new Error("Can't set next twice!");
      }
      return this.topStack = next;
    }
  };

  PCCBinaryStackElement.prototype.removeNext = function(next) {
    if (this.next !== this.getNext()) {
      throw new Error("Unknown next");
    }
    return this.setNext(null);
  };

  PCCBinaryStackElement.prototype.setTarget = function(target) {
    if (target < 0 || target > 2) {
      raise(new Error("Illegal target!"));
    }
    if (target === PCCBinaryTarget.TOP && this.topStack) {
      raise(new Error("Left and right target are not allowed once top was modified!"));
    }
    this.target = target;
    this.getStack().setTopElement(this.getTopElement());
    return this.parent.updateBinaryTargets(this);
  };

  PCCBinaryStackElement.prototype.setBranchFinished = function() {
    if (this.target === PCCBinaryTarget.TOP) {
      throw new Error("All branches are already finished!");
    } else if (this.target === PCCBinaryTarget.RIGHT) {
      this.setTarget(PCCBinaryTarget.TOP);
    } else if (this.target === PCCBinaryTarget.LEFT) {
      this.setTarget(PCCBinaryTarget.RIGHT);
    } else {
      throw new Error("Unknown target is currently specified!");
    }
    return null;
  };

  PCCBinaryStackElement.prototype.updateBinaryTargets = function(destination) {
    if (destination === this.leftStack) {
      return this.target = PCCBinaryTarget.LEFT;
    } else if (destination === this.rightStack) {
      return this.target = PCCBinaryTarget.RIGHT;
    } else if (destination === this.topStack) {
      return this.target = PCCBinaryTarget.TOP;
    } else {
      throw new Error("Unknown destination!");
    }
  };

  return PCCBinaryStackElement;

})(PCCStackElement);

PCCBinaryTarget = {};

PCCBinaryTarget.LEFT = 0;

PCCBinaryTarget.RIGHT = 1;

PCCBinaryTarget.TOP = 2;

PCCStackElement.prototype.updateBinaryTargets = function(destination) {
  var _ref32;

  return (_ref32 = this.parent) != null ? _ref32.updateBinaryTargets(this) : void 0;
};

PCCStopStackElement = (function(_super) {
  __extends(PCCStopStackElement, _super);

  function PCCStopStackElement() {
    _ref32 = PCCStopStackElement.__super__.constructor.apply(this, arguments);
    return _ref32;
  }

  PCCStopStackElement.prototype.getResults = function() {
    var more;

    more = this.next ? this.next.getResults() : new PCCStackResultContainer();
    more.addResult(PCCStackResult.TYPE_CCSPROCESS, new CCSStop());
    return more;
  };

  PCCStopStackElement.prototype.isCompletedProcess = function() {
    return true;
  };

  return PCCStopStackElement;

})(PCCUnaryStackElement);

PCCExitStackElement = (function(_super) {
  __extends(PCCExitStackElement, _super);

  function PCCExitStackElement() {
    _ref33 = PCCExitStackElement.__super__.constructor.apply(this, arguments);
    return _ref33;
  }

  PCCExitStackElement.prototype.getResults = function() {
    var more;

    more = this.next ? this.next.getResults() : new PCCStackResultContainer();
    more.addResult(PCCStackResult.TYPE_CCSPROCESS, new CCSExit());
    return more;
  };

  PCCExitStackElement.prototype.isCompletedProcess = function() {
    return true;
  };

  return PCCExitStackElement;

})(PCCUnaryStackElement);

PCCPrefixStackElement = (function(_super) {
  __extends(PCCPrefixStackElement, _super);

  function PCCPrefixStackElement(channel, specificChannel) {
    this.channel = channel;
    this.specificChannel = specificChannel;
    PCCPrefixStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCPrefixStackElement.prototype._getChannel = function() {
    return new CCSChannel(this.channel, this.specificChannel ? this.specificChannel.ccsTree() : null);
  };

  PCCPrefixStackElement.prototype._getAction = function() {
    throw new Error("Abstract and not implemented!");
  };

  PCCPrefixStackElement.prototype.getResults = function() {
    var container, pRes;

    container = this.next.getResults();
    pRes = container.getResult();
    if (pRes.type !== PCCStackResult.TYPE_CCSPROCESS) {
      throw new Error("Unexpected result type!");
    }
    container.replaceResult(PCCStackResult.TYPE_CCSPROCESS, new CCSPrefix(this._getAction(), pRes.data));
    return container;
  };

  PCCPrefixStackElement.prototype.isCompletedProcess = function() {
    if (this.next) {
      return this.next.isCompletedProcess();
    } else {
      return false;
    }
  };

  return PCCPrefixStackElement;

})(PCCUnaryStackElement);

PCCInputStackElement = (function(_super) {
  __extends(PCCInputStackElement, _super);

  function PCCInputStackElement(channel, specificChannel, container) {
    this.container = container;
    PCCInputStackElement.__super__.constructor.call(this, channel, specificChannel);
  }

  PCCInputStackElement.prototype._getAction = function() {
    return new CCSInput(this._getChannel(), this.container ? this.container.identifier : null);
  };

  return PCCInputStackElement;

})(PCCPrefixStackElement);

PCCOutputStackElement = (function(_super) {
  __extends(PCCOutputStackElement, _super);

  function PCCOutputStackElement(channel, sepcificChannel, container) {
    this.container = container;
    PCCOutputStackElement.__super__.constructor.call(this, channel, sepcificChannel);
  }

  PCCOutputStackElement.prototype._getAction = function() {
    return new CCSOutput(this._getChannel(), this.container ? this.container.ccsTree() : null);
  };

  return PCCOutputStackElement;

})(PCCPrefixStackElement);

PCCConditionStackElement = (function(_super) {
  __extends(PCCConditionStackElement, _super);

  function PCCConditionStackElement(conditionContainer) {
    this.conditionContainer = conditionContainer;
    PCCConditionStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCConditionStackElement.prototype.getResults = function() {
    var container, pRes;

    container = this.next.getResults();
    pRes = container.getResult();
    if (pRes.type !== PCCStackResult.TYPE_CCSPROCESS) {
      throw new Error("Unexpected result type!");
    }
    container.replaceResult(PCCStackResult.TYPE_CCSPROCESS, new CCSCondition(this.conditionContainer.ccsTree(), pRes.data));
    return container;
  };

  PCCConditionStackElement.prototype.isCompletedProcess = function() {
    if (this.next) {
      return this.next.isCompletedProcess();
    } else {
      return false;
    }
  };

  return PCCConditionStackElement;

})(PCCUnaryStackElement);

PCCRestrictionStackElement = (function(_super) {
  __extends(PCCRestrictionStackElement, _super);

  function PCCRestrictionStackElement(restrictedChannels) {
    this.restrictedChannels = restrictedChannels;
    PCCRestrictionStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCRestrictionStackElement.prototype.getResults = function() {
    var container, pRes;

    container = this.next.getResults();
    pRes = container.getResult();
    if (pRes.type !== PCCStackResult.TYPE_CCSPROCESS) {
      throw new Error("Unexpected result type!");
    }
    container.replaceResult(PCCStackResult.TYPE_CCSPROCESS, new CCSRestriction(pRes.data, this.restrictedChannels));
    return container;
  };

  PCCRestrictionStackElement.prototype.isCompletedProcess = function() {
    if (this.next) {
      return this.next.isCompletedProcess();
    } else {
      return false;
    }
  };

  return PCCRestrictionStackElement;

})(PCCUnaryStackElement);

PCCApplicationStackElement = (function(_super) {
  __extends(PCCApplicationStackElement, _super);

  function PCCApplicationStackElement(processName, argContainers) {
    this.processName = processName;
    this.argContainers = argContainers;
    PCCApplicationStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCApplicationStackElement.prototype.getResults = function() {
    var c, more, values;

    more = this.next ? this.next.getResults() : new PCCStackResultContainer();
    values = (function() {
      var _i, _len, _ref34, _results;

      _ref34 = this.argContainers;
      _results = [];
      for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
        c = _ref34[_i];
        _results.push(c.ccsTree());
      }
      return _results;
    }).call(this);
    more.addResult(PCCStackResult.TYPE_CCSPROCESS, new CCSProcessApplication(this.processName, values));
    return more;
  };

  PCCApplicationStackElement.prototype.isCompletedProcess = function() {
    return true;
  };

  return PCCApplicationStackElement;

})(PCCUnaryStackElement);

PCCApplicationPlaceholderStackElement = (function(_super) {
  __extends(PCCApplicationPlaceholderStackElement, _super);

  function PCCApplicationPlaceholderStackElement(frame) {
    this.frame = frame;
    PCCApplicationPlaceholderStackElement.__super__.constructor.call(this, null, null);
  }

  PCCApplicationPlaceholderStackElement.prototype.set = function(processName, argContainers) {
    if (this.processName || this.argContainers) {
      throw new Error("Placeholder values can't be set twice!");
    }
    this.processName = processName;
    this.argContainers = argContainers;
    return null;
  };

  PCCApplicationPlaceholderStackElement.prototype.getResults = function() {
    if (!this.processName || !this.argContainers) {
      throw new Error("Placeholder without values!");
    }
    return PCCApplicationPlaceholderStackElement.__super__.getResults.apply(this, arguments);
  };

  return PCCApplicationPlaceholderStackElement;

})(PCCApplicationStackElement);

PCCBinaryCCSStackElement = (function(_super) {
  __extends(PCCBinaryCCSStackElement, _super);

  function PCCBinaryCCSStackElement() {
    _ref34 = PCCBinaryCCSStackElement.__super__.constructor.apply(this, arguments);
    return _ref34;
  }

  PCCBinaryCCSStackElement.prototype._createCCSProcess = function() {
    throw new Error("Abstract and not implemented!");
  };

  PCCBinaryCCSStackElement.prototype.getResults = function() {
    var left, leftContainer, more, right, rightContainer;

    more = this.topStack ? this.topStack.getResults() : new PCCStackResultContainer();
    leftContainer = this.leftStack.getResults();
    left = leftContainer.getResult();
    if (left.type !== PCCStackResult.TYPE_CCSPROCESS) {
      throw new Error("Unexpected result type!");
    }
    rightContainer = this.rightStack.getResults();
    right = rightContainer.getResult();
    if (right.type !== PCCStackResult.TYPE_CCSPROCESS) {
      throw new Error("Unexpected result type!");
    }
    rightContainer.removeResult();
    leftContainer.appendContainer(rightContainer);
    leftContainer.appendContainer(more);
    leftContainer.replaceResult(PCCStackResult.TYPE_CCSPROCESS, this._createCCSProcess(left.data, right.data));
    return leftContainer;
  };

  PCCBinaryCCSStackElement.prototype.isCompletedProcess = function() {
    if (this.leftStack && this.rightStack) {
      return this.leftStack.isCompletedProcess() && this.rightStack.isCompletedProcess();
    } else {
      return false;
    }
  };

  return PCCBinaryCCSStackElement;

})(PCCBinaryStackElement);

PCCChoiceStackElement = (function(_super) {
  __extends(PCCChoiceStackElement, _super);

  function PCCChoiceStackElement() {
    _ref35 = PCCChoiceStackElement.__super__.constructor.apply(this, arguments);
    return _ref35;
  }

  PCCChoiceStackElement.prototype._createCCSProcess = function(left, right) {
    return new CCSChoice(left, right);
  };

  return PCCChoiceStackElement;

})(PCCBinaryCCSStackElement);

PCCParallelStackElement = (function(_super) {
  __extends(PCCParallelStackElement, _super);

  function PCCParallelStackElement() {
    _ref36 = PCCParallelStackElement.__super__.constructor.apply(this, arguments);
    return _ref36;
  }

  PCCParallelStackElement.prototype._createCCSProcess = function(left, right) {
    return new CCSParallel(left, right);
  };

  return PCCParallelStackElement;

})(PCCBinaryCCSStackElement);

PCCSequenceStackElement = (function(_super) {
  __extends(PCCSequenceStackElement, _super);

  function PCCSequenceStackElement() {
    _ref37 = PCCSequenceStackElement.__super__.constructor.apply(this, arguments);
    return _ref37;
  }

  PCCSequenceStackElement.prototype._createCCSProcess = function(left, right) {
    return new CCSSequence(left, right);
  };

  return PCCSequenceStackElement;

})(PCCBinaryCCSStackElement);

PCCProcessDefinitionStackElement = (function(_super) {
  __extends(PCCProcessDefinitionStackElement, _super);

  function PCCProcessDefinitionStackElement(processName, argContainers) {
    this.processName = processName;
    this.argContainers = argContainers != null ? argContainers : [];
    PCCProcessDefinitionStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCProcessDefinitionStackElement.prototype.getResults = function() {
    var argNames, c, container, def, pRes;

    container = this.next.getResults();
    pRes = container.getResult();
    if (pRes.type !== PCCStackResult.TYPE_CCSPROCESS) {
      throw new Error("Unexpected result type!");
    }
    argNames = (function() {
      var _i, _len, _ref38, _results;

      _ref38 = this.argContainers;
      _results = [];
      for (_i = 0, _len = _ref38.length; _i < _len; _i++) {
        c = _ref38[_i];
        _results.push(c.identifier);
      }
      return _results;
    }).call(this);
    def = new CCSProcessDefinition(this.processName, pRes.data, argNames);
    container.replaceResult(PCCStackResult.TYPE_CCSPROCESS_DEFINITION, def);
    return container;
  };

  return PCCProcessDefinitionStackElement;

})(PCCUnaryStackElement);

PCCProcessFrameStackElement = (function(_super) {
  __extends(PCCProcessFrameStackElement, _super);

  function PCCProcessFrameStackElement(frame) {
    this.frame = frame;
    PCCProcessFrameStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCProcessFrameStackElement.prototype.getCurrentProcessFrame = function() {
    return this.frame;
  };

  PCCProcessFrameStackElement.prototype.compilerGetVariable = function(compiler, identifier) {
    var result;

    result = this.frame.compilerGetVariable(compiler, identifier);
    if (result) {
      return result;
    } else {
      return PCCProcessFrameStackElement.__super__.compilerGetVariable.apply(this, arguments);
    }
  };

  PCCProcessFrameStackElement.prototype.compilerGetProcedure = function(compiler, identifier) {
    var result;

    result = this.frame.compilerGetProcedure(compiler, identifier);
    if (result) {
      return result;
    } else {
      return PCCProcessFrameStackElement.__super__.compilerGetProcedure.apply(this, arguments);
    }
  };

  PCCProcessFrameStackElement.prototype.compilerHandleNewVariableWithDefaultValueCallback = function(compiler, variable, callback, context) {
    var result;

    result = this.frame.compilerHandleNewVariableWithDefaultValueCallback(compiler, variable, callback, context);
    if (result) {
      return result;
    } else {
      return PCCProcessFrameStackElement.__super__.compilerHandleNewVariableWithDefaultValueCallback.apply(this, arguments);
    }
  };

  return PCCProcessFrameStackElement;

})(PCCUnaryStackElement);

PCCScopeStackElement = (function(_super) {
  __extends(PCCScopeStackElement, _super);

  function PCCScopeStackElement() {
    _ref38 = PCCScopeStackElement.__super__.constructor.apply(this, arguments);
    return _ref38;
  }

  PCCScopeStackElement.prototype.isCompletedProcess = function() {
    if (this.next) {
      return this.next.isCompletedProcess();
    } else {
      return false;
    }
  };

  return PCCScopeStackElement;

})(PCCProcessFrameStackElement);

PCCClassStackElement = (function(_super) {
  __extends(PCCClassStackElement, _super);

  function PCCClassStackElement(classInfo) {
    this.classInfo = classInfo;
    PCCClassStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCClassStackElement.prototype.getCurrentControlElement = function() {
    return this.classInfo;
  };

  PCCClassStackElement.prototype.compilerGetVariable = function(compiler, identifier) {
    var result;

    result = this.classInfo.compilerGetVariable(compiler, identifier);
    if (result) {
      return result;
    } else {
      return PCCClassStackElement.__super__.compilerGetVariable.apply(this, arguments);
    }
  };

  PCCClassStackElement.prototype.compilerGetProcedure = function(compiler, identifier) {
    var result;

    result = this.classInfo.compilerGetProcedure(compiler, identifier);
    if (result) {
      return result;
    } else {
      return PCCClassStackElement.__super__.compilerGetProcedure.apply(this, arguments);
    }
  };

  PCCClassStackElement.prototype.compilerHandleNewVariableWithDefaultValueCallback = function(compiler, variable, callback, context) {
    var result;

    result = this.classInfo.compilerHandleNewVariableWithDefaultValueCallback(compiler, variable, callback, context);
    if (result) {
      return result;
    } else {
      return PCCClassStackElement.__super__.compilerHandleNewVariableWithDefaultValueCallback.apply(this, arguments);
    }
  };

  return PCCClassStackElement;

})(PCCUnaryStackElement);

PCCGlobalStackElement = (function(_super) {
  __extends(PCCGlobalStackElement, _super);

  function PCCGlobalStackElement(global) {
    this.global = global;
    PCCGlobalStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCGlobalStackElement.prototype.getCurrentControlElement = function() {
    return this.global;
  };

  PCCGlobalStackElement.prototype.compilerGetVariable = function(compiler, identifier) {
    var result;

    result = this.global.compilerGetVariable(compiler, identifier);
    if (result) {
      return result;
    } else {
      return PCCGlobalStackElement.__super__.compilerGetVariable.apply(this, arguments);
    }
  };

  PCCGlobalStackElement.prototype.compilerGetProcedure = function(compiler, identifier) {
    var result;

    result = this.global.compilerGetProcedure(compiler, identifier);
    if (result) {
      return result;
    } else {
      return PCCGlobalStackElement.__super__.compilerGetProcedure.apply(this, arguments);
    }
  };

  PCCGlobalStackElement.prototype.compilerHandleNewVariableWithDefaultValueCallback = function(compiler, variable, callback, context) {
    var result;

    result = this.global.compilerHandleNewVariableWithDefaultValueCallback(compiler, variable, callback, context);
    if (result) {
      return result;
    } else {
      return PCCGlobalStackElement.__super__.compilerHandleNewVariableWithDefaultValueCallback.apply(this, arguments);
    }
  };

  return PCCGlobalStackElement;

})(PCCUnaryStackElement);

PCCProcedureStackElement = (function(_super) {
  __extends(PCCProcedureStackElement, _super);

  function PCCProcedureStackElement(procedure) {
    this.procedure = procedure;
    PCCProcedureStackElement.__super__.constructor.apply(this, arguments);
  }

  PCCProcedureStackElement.prototype.getCurrentControlElement = function() {
    return this.procedure;
  };

  return PCCProcedureStackElement;

})(PCCUnaryStackElement);

PCCCompilerStack = (function() {
  function PCCCompilerStack(initialElement) {
    this.topElement = initialElement;
    this.topElement.__PCCCompilerStack = this;
    this.topElement.getStack = function() {
      return this.__PCCCompilerStack;
    };
  }

  PCCCompilerStack.prototype.setTopElement = function(e) {
    return this.topElement = e;
  };

  PCCCompilerStack.prototype.getCurrentProcessFrame = function() {
    return this.topElement.getCurrentProcessFrame();
  };

  PCCCompilerStack.prototype.getCurrentControlElement = function() {
    return this.topElement.getCurrentControlElement();
  };

  PCCCompilerStack.prototype.pushElement = function(e) {
    this.topElement.setNext(e);
    return this.topElement = e;
  };

  PCCCompilerStack.prototype.isCurrentProcessCompleted = function() {
    return this.topElement.isCompletedProcess();
  };

  PCCCompilerStack.prototype.compilerGetVariable = function(compiler, identifier) {
    var _ref39;

    return (_ref39 = this.topElement) != null ? _ref39.compilerGetVariable(compiler, identifier) : void 0;
  };

  PCCCompilerStack.prototype.compilerGetProcedure = function(compiler, identifier) {
    var _ref39;

    return (_ref39 = this.topElement) != null ? _ref39.compilerGetProcedure(compiler, identifier) : void 0;
  };

  PCCCompilerStack.prototype.compilerHandleNewVariableWithDefaultValueCallback = function(compiler, variable, callback, context) {
    var _ref39;

    return (_ref39 = this.topElement) != null ? _ref39.compilerHandleNewVariableWithDefaultValueCallback(compiler, variable, callback, context) : void 0;
  };

  return PCCCompilerStack;

})();

PCCStackElement.prototype.getStack = function() {
  return this.parent.getStack();
};

PCCStackResult = (function() {
  function PCCStackResult(type, data) {
    this.type = type;
    this.data = data;
  }

  return PCCStackResult;

})();

PCCStackResultContainer = (function() {
  function PCCStackResultContainer() {
    this.results = [];
  }

  PCCStackResultContainer.prototype.addResult = function(type, data) {
    return this.results.unshift(new PCCStackResult(type, data));
  };

  PCCStackResultContainer.prototype.replaceResult = function(type, data) {
    return this.results[0] = new PCCStackResult(type, data);
  };

  PCCStackResultContainer.prototype.getResult = function() {
    return this.results[0];
  };

  PCCStackResultContainer.prototype.removeResult = function() {
    return this.results.shift();
  };

  PCCStackResultContainer.prototype.appendContainer = function(container) {
    return this.results = this.results.concat(container.results);
  };

  return PCCStackResultContainer;

})();

PCCStackResult.TYPE_UNSPECIFIC = 0;

PCCStackResult.TYPE_CCSPROCESS = 1;

PCCStackResult.TYPE_CCSPROCESS_DEFINITION = 2;

PCNode.prototype.compile = function(compiler) {
  throw new Error("Abstract method!");
};

PCNode.prototype._childrenCompile = function(compiler) {
  var c, _i, _len, _ref39, _results;

  _ref39 = this.children;
  _results = [];
  for (_i = 0, _len = _ref39.length; _i < _len; _i++) {
    c = _ref39[_i];
    _results.push(c.compile(compiler));
  }
  return _results;
};

PCProgram.prototype.compile = function(compiler) {
  compiler.beginProgram();
  this._childrenCompile(compiler);
  return compiler.endProgram();
};

PCMainAgent.prototype.compile = function(compiler) {
  var i_r;

  compiler.beginMainAgent();
  i_r = compiler.getFreshContainer(PCCType.INT, "ret");
  compiler.emitInput("channel1_create", null, i_r);
  compiler.getProcessFrame().addLocalVariable(new PCCVariableInfo(null, "r", null, true), i_r);
  this._childrenCompile(compiler);
  compiler.emitStop();
  return compiler.endMainAgent();
};

PCProcedureDecl.prototype.compile = function(compiler) {
  compiler.beginProcedure(this.name);
  this.getBody().compile(compiler);
  compiler.emitExit();
  return compiler.endProcedure();
};

PCFormalParameter.prototype.compile = function(compiler) {
  throw new Error("Not implemented!");
};

PCMonitor.prototype.compile = function(compiler) {
  compiler.beginClass(this.name);
  this._childrenCompile(compiler);
  return compiler.endClass();
};

PCStruct.prototype.compile = function(compiler) {
  compiler.beginClass(this.name);
  this._childrenCompile(compiler);
  return compiler.endClass();
};

PCConditionDecl.prototype.compile = function(compiler) {
  var context, variable;

  context = {
    target: this,
    compiler: compiler
  };
  variable = new PCCVariableInfo(this, this.name, new PCTType(PCTType.CONDITION));
  return compiler.handleNewVariableWithDefaultValueCallback(variable);
};

PCConditionDecl.prototype.compileDefaultValue = function(compiler) {
  var result;

  result = compiler.getFreshContainer(PCCType.INT);
  compiler.emitInput("create_WaitRoom", null, result);
  return result;
};

PCDecl.prototype.compile = function(compiler) {
  var type, vd, _i, _len, _ref39, _results;

  type = this.children[0];
  _ref39 = this.getDeclarators();
  _results = [];
  for (_i = 0, _len = _ref39.length; _i < _len; _i++) {
    vd = _ref39[_i];
    _results.push(vd.compile(compiler));
  }
  return _results;
};

PCVariableDeclarator.prototype.compile = function(compiler) {
  var context, variable;

  context = {
    target: this,
    compiler: compiler
  };
  variable = new PCCVariableInfo(this, this.name, this.getTypeNode().getType(compiler).type);
  return compiler.handleNewVariableWithDefaultValueCallback(variable);
};

PCVariableDeclarator.prototype.compileDefaultValue = function(compiler) {
  var c, init;

  init = this.getInitializer();
  if (init) {
    c = init.compile(compiler);
    return this.getTypeNode().getType(compiler).type.fulfillAssignment(compiler, c);
  } else {
    return this.getTypeNode().getType(compiler).type.createDefaultContainer(compiler);
  }
};

PCVariableInitializer.prototype.compile = function(compiler) {
  if (this.isArray()) {
    return this.fulfillAssignment(compiler, this.PCCCompilerArrayConst);
  } else {
    return this.children[0].compile(compiler);
  }
};

/*
PCArrayType::getCCSType = -> new PCCType(@children[0].getCCSType())

PCSimpleType::getCCSType = ->
	if @type == PCSimpleType.VOID then PCCType.VOID
	else if @type == PCSimpleType.STRING then PCCType.STRING
	else if @type == PCSimpleType.BOOL then PCCType.BOOL
	else PCCType.INT

PCChannelType::getCCSType = -> 
	t = @valueType
	base = if t == PCSimpleType.STRING then PCCType.STRING else if t == PCSimpleType.BOOL then PCCType.BOOL else PCCType.INT
	new PCCType(base)

PCClassType::getCCSType = -> new PCCType(null, @className)
*/


PCExpression.prototype.compile = function(compiler) {
  throw new Error("Not implemented!");
};

PCExpression.prototype.getValueForArrayAtIndex = function(compiler, instanceContainer, indexContainer) {
  var result;

  compiler.emitOutput("array_access", instanceContainer, indexContainer);
  result = compiler.getFreshContainer(instanceContainer.ccsType.getSubtype());
  compiler.emitInput("array_get", instanceContainer, result);
  return result;
};

PCStartExpression.prototype.compile = function(compiler) {
  return this.children[0].compileSend(compiler);
};

PCAssignExpression.prototype.compile = function(compiler) {
  var c;

  c = this.getExpression().compile(compiler);
  if (this.operator === "+=") {
    c = new PCCBinaryContainer(this.getDestination().compile(compiler), c, "+");
  } else if (this.operator === "*=") {
    c = new PCCBinaryContainer(this.getDestination().compile(compiler), c, "*");
  } else if (this.operator === "/=") {
    c = new PCCBinaryContainer(this.getDestination().compile(compiler), c, "/");
  } else if (this.operator !== "=") {
    throw new Error("Unknown assign operator");
  }
  this.getDestination().assignContainer(compiler, c);
  return c;
};

PCAssignDestination.prototype.compile = function(compiler) {
  var arrayIndexCount, i, res, v, _i;

  arrayIndexCount = this.children.length;
  v = compiler.getVariableWithName(this.identifier, null);
  res = v.getContainer(compiler);
  for (i = _i = 0; _i < arrayIndexCount; i = _i += 1) {
    res = this.getValueForArrayAtIndex(compiler, ai, this.children[i].compile(compiler));
  }
  return res;
};

PCAssignDestination.prototype.setValueForArrayAtIndex = function(compiler, instanceContainer, indexContainer, valueContainer) {
  compiler.emitOutput("array_access", instanceContainer, indexContainer);
  compiler.emitInput("array_set", instanceContainer, valueContainer);
  return valueContainer;
};

PCAssignDestination.prototype.assignContainer = function(compiler, c) {
  var ai, arrayIndexCount, i, v, _i, _ref39;

  arrayIndexCount = this.children.length;
  v = compiler.getVariableWithName(this.identifier, null);
  if (arrayIndexCount === 0) {
    return v.setContainer(compiler, c);
  } else {
    ai = v.getContainer(compiler);
    for (i = _i = 0, _ref39 = arrayIndexCount - 2; _i <= _ref39; i = _i += 1) {
      ai = this.getValueForArrayAtIndex(compiler, ai, this.children[i].compile(compiler));
    }
    return this.setValueForArrayAtIndex(compiler, ai, this.children[arrayIndexCount - 1].compile(compiler), c);
  }
};

PCSendExpression.prototype.compile = function(compiler) {
  var c, v;

  c = this.children[0].compile(compiler);
  v = this.children[1].compile(compiler);
  compiler.emitOutput("prepareSend", c, v);
  compiler.emitInput("send", c, null);
  return v;
};

PCConditionalExpression.prototype.compile = function(compiler) {
  var b, c, control, lp, rp;

  b = this.children[0].compile(compiler);
  control = compiler.emitChoice();
  compiler.emitCondition(b);
  c = this.children[1].compile(compiler);
  compiler.protectContainer(c);
  lp = compiler.emitProcessApplicationPlaceholder();
  control.setBranchFinished();
  compiler.emitCondition(new PCCUnaryContainer("!", b));
  c = this.children[2].compile(compiler);
  compiler.protectContainer(c);
  rp = compiler.emitProcessApplicationPlaceholder();
  compiler.emitMergeOfProcessFramesOfPlaceholders([lp, rp]);
  return compiler.unprotectContainer();
};

PCOrExpression.prototype.compile = function(compiler) {
  var left, right;

  left = this.children[0].compile(compiler);
  compiler.protectContainer(left);
  right = this.children[1].compile(compiler);
  left = compiler.unprotectContainer();
  return new PCCBinaryContainer(left, right, "||");
};

PCAndExpression.prototype.compile = function(compiler) {
  var left, right;

  left = this.children[0].compile(compiler);
  compiler.protectContainer(left);
  right = this.children[1].compile(compiler);
  left = compiler.unprotectContainer();
  return new PCCBinaryContainer(left, right, "&&");
};

PCEqualityExpression.prototype.compile = function(compiler) {
  var left, right;

  left = this.children[0].compile(compiler);
  compiler.protectContainer(left);
  right = this.children[1].compile(compiler);
  left = compiler.unprotectContainer();
  return new PCCBinaryContainer(left, right, this.operator);
};

PCRelationalExpression.prototype.compile = function(compiler) {
  var left, right;

  left = this.children[0].compile(compiler);
  compiler.protectContainer(left);
  right = this.children[1].compile(compiler);
  left = compiler.unprotectContainer();
  return new PCCBinaryContainer(left, right, this.operator);
};

PCAdditiveExpression.prototype.compile = function(compiler) {
  var left, right;

  left = this.children[0].compile(compiler);
  compiler.protectContainer(left);
  right = this.children[1].compile(compiler);
  left = compiler.unprotectContainer();
  return new PCCBinaryContainer(left, right, this.operator);
};

PCMultiplicativeExpression.prototype.compile = function(compiler) {
  var left, right;

  left = this.children[0].compile(compiler);
  compiler.protectContainer(left);
  right = this.children[1].compile(compiler);
  left = compiler.unprotectContainer();
  return new PCCBinaryContainer(left, right, this.operator);
};

PCUnaryExpression.prototype.compile = function(compiler) {
  return new PCCUnaryContainer(this.operator, this.children[0].compile(compiler));
};

PCPostfixExpression.prototype.compile = function(compiler) {
  var c, op;

  op = (function() {
    if (this.operator === "++") {
      return "+";
    } else if (this.operator === "--") {
      return "-";
    } else {
      throw new Error("Unknown postfix operator");
    }
  }).call(this);
  c = new PCCBinaryContainer(this.children[0].compile(compiler), new PCCConstantContainer(1), op);
  this.children[0].assignContainer(compiler, c);
  return c;
};

PCReceiveExpression.prototype.compile = function(compiler) {
  var c, res;

  c = this.children[0].compile(compiler);
  res = compiler.getFreshContainer(c.ccsType.getSubtype());
  compiler.emitInput("receive", c, res);
  return res;
};

PCProcedureCall.prototype.compile = function(compiler, instanceContainer, className) {
  var args, c, control, proc, res, _i, _j, _len, _len1, _ref39, _ref40;

  proc = compiler.getProcedureWithName(this.procedureName, className);
  if (instanceContainer) {
    compiler.protectContainer(instanceContainer);
  }
  _ref39 = this.children;
  for (_i = 0, _len = _ref39.length; _i < _len; _i++) {
    c = _ref39[_i];
    compiler.protectContainer(c.compile(compiler));
  }
  control = compiler.emitSequence();
  args = [];
  _ref40 = this.children;
  for (_j = 0, _len1 = _ref40.length; _j < _len1; _j++) {
    c = _ref40[_j];
    args.unshift(compiler.unprotectContainer());
  }
  if (instanceContainer) {
    instanceContainer = compiler.unprotectContainer();
  }
  args = proc.getAllArgumentContainers(compiler, args, instanceContainer);
  compiler.emitProcessApplication(proc.getProcessName(), args);
  control.setBranchFinished();
  if (proc.returnType.kind !== PCTType.VOID) {
    res = compiler.getFreshContainer(proc.returnType.getCCSType());
    compiler.emitInput("receive", compiler.getVariableWithName("r", null, true).getContainer(compiler), res);
    return res;
  } else {
    return null;
  }
};

PCProcedureCall.prototype.compileSend = function(compiler, instanceContainer, className) {
  var args, c, proc, result, _i, _j, _k, _len, _len1, _len2, _ref39, _ref40;

  proc = compiler.getProcedureWithName(this.procedureName, className);
  if (instanceContainer) {
    compiler.protectContainer(instanceContainer);
  }
  _ref39 = this.children;
  for (_i = 0, _len = _ref39.length; _i < _len; _i++) {
    c = _ref39[_i];
    compiler.protectContainer(c.compile(compiler));
  }
  args = [];
  _ref40 = this.children;
  for (_j = 0, _len1 = _ref40.length; _j < _len1; _j++) {
    c = _ref40[_j];
    args.unshift(compiler.unprotectContainer());
  }
  if (instanceContainer) {
    instanceContainer = compiler.unprotectContainer();
  }
  args = proc.getAllArgumentContainers(compiler, args, instanceContainer);
  result = compiler.getFreshContainer(PCCType.INT);
  compiler.emitInput(proc.getAgentStarterChannel(), null, result);
  for (_k = 0, _len2 = args.length; _k < _len2; _k++) {
    c = args[_k];
    compiler.emitOutput("start_set_arg", result, c);
  }
  return result;
};

PCClassCall.prototype.compile = function(compiler) {
  var className;

  className = this.children[0].getType(compiler).identifier;
  return this.children[1].compile(compiler, this.children[0].compile(compiler), className);
};

PCClassCall.prototype.compileSend = function(compiler) {
  var className;

  className = this.children[0].getType(compiler).identifier;
  return this.children[1].compileSend(compiler, this.children[0].compile(compiler), className);
};

PCArrayExpression.prototype.compile = function(compiler) {
  var a, res, t;

  a = this.children[0].compile(compiler);
  compiler.protectContainer(a);
  t = this.children[1].compile(compiler);
  a = compiler.unprotectContainer();
  compiler.emitOutput("array_access", a, t);
  res = compiler.getFreshContainer(this.children[0].getType(compiler).type);
  compiler.emitInput("array_get", a, res);
  return res;
};

PCLiteralExpression.prototype.compile = function(compiler) {
  return new PCCConstantContainer(this.value);
};

PCIdentifierExpression.prototype.compile = function(compiler) {
  var v;

  v = compiler.getVariableWithName(this.identifier, null);
  return v.getContainer(compiler);
};

PCStatement.prototype.compile = function(compiler, loopEntry) {
  return this.children[0].compile(compiler, loopEntry);
};

PCBreakStmt.prototype.compile = function(compiler, loopEntry) {
  return [compiler.emitProcessApplicationPlaceholder()];
};

PCContinueStmt.prototype.compile = function(compiler, loopEntry) {
  loopEntry.emitCallProcessFromFrame(compiler, compiler.getProcessFrame());
  return [];
};

PCStmtBlock.prototype.compile = function(compiler, loopEntry) {
  var c;

  return ((function() {
    var _i, _len, _ref39, _results;

    _ref39 = this.children;
    _results = [];
    for (_i = 0, _len = _ref39.length; _i < _len; _i++) {
      c = _ref39[_i];
      _results.push(c.compile(compiler, loopEntry));
    }
    return _results;
  }).call(this)).concatChildren();
};

PCStmtExpression.prototype.compile = function(compiler, loopEntry) {
  this.children[0].compile(compiler);
  return [];
};

PCSelectStmt.prototype.compile = function(compiler, loopEntry) {
  throw new Error("Not implemented!");
};

PCCase.prototype.compile = function(compiler, loopEntry) {
  throw new Error("Not implemented!");
};

PCIfStmt.prototype.compile = function(compiler, loopEntry) {
  var b, breaks, control, placeholders;

  placeholders = [];
  b = this.children[0].compile(compiler);
  control = compiler.emitChoice();
  compiler.emitCondition(b);
  breaks = this.children[1].compile(compiler, loopEntry);
  if (!compiler.isCurrentProcessCompleted()) {
    placeholders.push(compiler.emitProcessApplicationPlaceholder());
  }
  control.setBranchFinished();
  compiler.emitCondition(new PCCUnaryContainer("!", b));
  if (this.children.length === 3) {
    breaks = breaks.concat(this.children[2].compile(compiler, loopEntry));
  }
  if (!compiler.isCurrentProcessCompleted()) {
    placeholders.push(compiler.emitProcessApplicationPlaceholder());
  }
  control.setBranchFinished();
  compiler.emitMergeOfProcessFramesOfPlaceholders(placeholders);
  return breaks;
};

PCWhileStmt.prototype.compile = function(compiler) {
  var b, breaks, control, entry, out, _i, _len;

  entry = compiler.emitNextProcessFrame();
  b = this.children[0].compile(compiler);
  control = compiler.emitChoice();
  compiler.emitCondition(b);
  breaks = this.children[1].compile(compiler, entry);
  entry.emitCallProcessFromFrame(compiler, compiler.getProcessFrame());
  control.setBranchFinished();
  compiler.emitCondition(new PCCUnaryContainer("!", b));
  out = compiler.emitNextProcessFrame();
  for (_i = 0, _len = breaks.length; _i < _len; _i++) {
    b = breaks[_i];
    out.emitCallProcessFromFrame(compiler, b.frame, b);
  }
  return [];
};

PCDoStmt.prototype.compile = function(compiler) {
  var b, breaks, control, entry, out, _i, _len;

  entry = compiler.emitNextProcessFrame();
  breaks = this.children[0].compile(compiler, entry);
  b = this.children[1].compile(compiler);
  control = compiler.emitChoice();
  compiler.emitCondition(b);
  entry.emitCallProcessFromFrame(compiler, compiler.getProcessFrame());
  control.setBranchFinished();
  compiler.emitCondition(new PCCUnaryContainer("!", b));
  breaks.push(compiler.emitProcessApplicationPlaceholder());
  control.setBranchFinished();
  out = compiler.emitNextProcessFrame();
  for (_i = 0, _len = breaks.length; _i < _len; _i++) {
    b = breaks[_i];
    out.emitCallProcessFromFrame(compiler, b.frame, b);
  }
  return [];
};

PCForStmt.prototype.compile = function(compiler) {
  var b, breaks, control, entry, out, statusQuo, u, _i, _j, _len, _len1, _ref39;

  statusQuo = compiler.getProcessFrame();
  if (this.init) {
    this.init.compile(compiler);
  }
  entry = compiler.emitNextProcessFrame();
  breaks = [];
  control = null;
  if (this.expression) {
    b = this.expression.compile(compiler);
    control = compiler.emitChoice();
    compiler.emitCondition(new PCCUnaryContainer("!", b));
    breaks.push(compiler.emitProcessApplicationPlaceholder());
    control.setBranchFinished();
    compiler.emitCondition(b);
  }
  breaks = breaks.concat(this.body.compile(compiler, entry));
  _ref39 = this.update;
  for (_i = 0, _len = _ref39.length; _i < _len; _i++) {
    u = _ref39[_i];
    u.compile(compiler);
  }
  entry.emitCallProcessFromFrame(compiler, compiler.getProcessFrame());
  if (control) {
    control.setBranchFinished();
  }
  out = compiler.emitNextProcessFrame();
  for (_j = 0, _len1 = breaks.length; _j < _len1; _j++) {
    b = breaks[_j];
    out.emitCallProcessFromFrame(compiler, b.frame, b);
  }
  return [];
};

PCForInit.prototype.compile = function(compiler) {
  var c, _i, _len, _ref39;

  _ref39 = this.children;
  for (_i = 0, _len = _ref39.length; _i < _len; _i++) {
    c = _ref39[_i];
    c.compile(compiler);
  }
  return [];
};

PCReturnStmt.prototype.compile = function(compiler, loopEntry) {
  var res, retChan;

  if (this.children.length === 1) {
    res = this.children[0].compile(compiler);
    retChan = compiler.getVariableWithName("r", null, true).getContainer(compiler);
    compiler.emitOutput("prepareSend", retChan, res);
    compiler.emitInput("send", retChan, null);
  }
  compiler.emitExit();
  return [];
};

PCPrimitiveStmt.prototype.compile = function(compiler, loopEntry) {
  var b, c, cond, control, entry, g, v, vars, _i, _len;

  switch (this.kind) {
    case PCPrimitiveStmt.JOIN:
      c = this.children[0].compile(compiler, loopEntry);
      compiler.emitOutput("join_register", c, null);
      compiler.emitOutput("join", c, null);
      break;
    case PCPrimitiveStmt.LOCK:
      c = this.children[0].compile(compiler, loopEntry);
      compiler.emitOutput("lock", c, null);
      break;
    case PCPrimitiveStmt.UNLOCK:
      c = this.children[0].compile(compiler, loopEntry);
      compiler.emitOutput("unlock", c, null);
      break;
    case PCPrimitiveStmt.WAIT:
      if (!(this.children[0] instanceof PCIdentifierExpression)) {
        throw new Error("Unexpected expression!");
      }
      cond = compiler.getVariableWithName(this.children[0].identifier);
      entry = compiler.emitNextProcessFrame();
      b = cond.node.getExpression().compile(compiler);
      control = compiler.emitChoice();
      compiler.emitCondition(new PCCUnaryContainer("!", b));
      c = cond.getContainer(compiler);
      compiler.emitOutput("wait_add", c, null);
      g = compiler.getVariableWithName("guard", null, true).getContainer(compiler);
      compiler.emitOutput("unlock", g, null);
      compiler.emitOutput("wait", c, null);
      compiler.emitOutput("lock", g, null);
      entry.emitCallProcessFromFrame(compiler, compiler.getProcessFrame());
      control.setBranchFinished();
      compiler.emitCondition(b);
      break;
    case PCPrimitiveStmt.SIGNAL:
      c = this.children[0].compile(compiler, loopEntry);
      compiler.emitOutput("signal", c, null);
      break;
    case PCPrimitiveStmt.SIGNAL_ALL:
      c = this.children.length > 0 ? this.children[0].compile(compiler, loopEntry) : null;
      vars = [];
      if (c) {
        if (!(this.children[0] instanceof PCIdentifierExpression)) {
          throw new Error("Unexpected expression!");
        }
        vars = [compiler.getVariableWithName(this.children[0].identifier)];
      } else {
        vars = compiler.getCurrentClass().getAllConditions();
      }
      for (_i = 0, _len = vars.length; _i < _len; _i++) {
        v = vars[_i];
        c = v.getContainer(compiler);
        compiler.emitOutput("signalAll", c, null);
      }
  }
  return [];
};

PCPrintStmt.prototype.compile = function(compiler, loopEntry) {
  var i, out, _i, _ref39;

  if (this.children.length === 0) {
    return;
  }
  out = this.children[0].compile(compiler);
  for (i = _i = 1, _ref39 = this.children.length; _i < _ref39; i = _i += 1) {
    out = new PCCBinaryContainer(out, this.children[i].compile(compiler), "+");
  }
  compiler.emitOutput("println", null, out);
  return [];
};
