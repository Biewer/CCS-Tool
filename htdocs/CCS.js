// Generated by CoffeeScript 1.6.2
var Action, ActionSets, CCS, CCSBaseStep, CCSChoiceView, CCSConditionView, CCSExitChannel, CCSExitView, CCSInternalChannel, CCSParallelView, CCSPrefixView, CCSProcessApplicationProxyView, CCSProcessApplicationView, CCSProcessCreateView, CCSProcessView, CCSRestrictionView, CCSSequenceView, CCSStep, CCSStepView, CCSStopView, CCSUIChannel, Choice, ChoiceLRule, ChoiceRRule, CondRule, Condition, Exit, ExitRule, Expression, Input, InputRule, Match, MatchRule, ObjID, Output, OutputRule, ParLRule, ParRRule, Parallel, Prefix, PrefixRule, Process, ProcessApplication, ProcessDefinition, RecRule, ResRule, Restriction, Seq1Rule, Seq2Rule, Sequence, SimpleAction, Stop, SyncExitRule, SyncRule, _DEBUG, _ref, _ref1, _ref2,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CCSInternalChannel = "\u03c4";

CCSExitChannel = "\u03b4";

CCSUIChannel = "\u03c8";

ObjID = 1;

_DEBUG = [];

CCS = (function() {
  function CCS(processDefinitions, system) {
    var pd, _i, _len, _ref;

    this.processDefinitions = processDefinitions;
    this.system = system;
    this.system.setCCS(this);
    _ref = this.processDefinitions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pd = _ref[_i];
      pd.setCCS(this);
    }
  }

  CCS.prototype.getProcessDefinition = function(name, argCount) {
    var pd, pn, result, _ref;

    result = null;
    _ref = this.processDefinitions;
    for (pn in _ref) {
      pd = _ref[pn];
      if (pd.name === name && argCount === pd.getArgCount()) {
        result = pd;
      }
    }
    return result;
  };

  CCS.prototype.getPossibleSteps = function(env) {
    return this.system.getPossibleSteps(env);
  };

  CCS.prototype.toString = function() {
    var name, process;

    return "" + (((function() {
      var _ref, _results;

      _ref = this.processDefinitions;
      _results = [];
      for (name in _ref) {
        process = _ref[name];
        _results.push(process.toString());
      }
      return _results;
    }).call(this)).join("")) + "\n" + (this.system.toString());
  };

  return CCS;

})();

ProcessDefinition = (function() {
  function ProcessDefinition(name, process, params) {
    this.name = name;
    this.process = process;
    this.params = params;
  }

  ProcessDefinition.prototype.getArgCount = function() {
    if (this.params) {
      return this.params.length;
    } else {
      return 0;
    }
  };

  ProcessDefinition.prototype.setCCS = function(ccs) {
    return this.process.setCCS(ccs);
  };

  ProcessDefinition.prototype.toString = function() {
    var result;

    result = this.name;
    if (this.params != null) {
      result += "[" + (this.params.join(", ")) + "]";
    }
    result += " := " + (this.process.toString()) + "\n";
    return result;
  };

  return ProcessDefinition;

})();

Process = (function() {
  function Process() {
    var subprocesses;

    subprocesses = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.subprocesses = subprocesses;
    this.__id = ObjID++;
  }

  Process.prototype.setCCS = function(ccs) {
    var p, _i, _len, _ref, _results;

    this.ccs = ccs;
    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.setCCS(this.ccs));
    }
    return _results;
  };

  Process.prototype._setCCS = function(ccs) {
    this.ccs = ccs;
    return this;
  };

  Process.prototype.replaceIdentifierWithValue = function(identifier, value) {
    var p, _i, _len, _ref, _results;

    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.replaceIdentifierWithValue(identifier, value));
    }
    return _results;
  };

  Process.prototype.getApplicapleRules = function() {
    return [];
  };

  Process.prototype.getPossibleSteps = function() {
    var rule;

    return ((function() {
      var _i, _len, _ref, _results;

      _ref = this.getApplicapleRules();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        _results.push(rule.getPossibleSteps(this));
      }
      return _results;
    }).call(this)).concatChildren();
  };

  Process.prototype.needsBracketsForSubprocess = function(process) {
    return (this.getPrecedence != null) && (process.getPrecedence != null) && process.getPrecedence() < this.getPrecedence();
  };

  Process.prototype.stringForSubprocess = function(process) {
    if (this.needsBracketsForSubprocess(process)) {
      return "(" + (process.toString()) + ")";
    } else {
      return "" + (process.toString());
    }
  };

  return Process;

})();

Stop = (function(_super) {
  __extends(Stop, _super);

  function Stop() {
    _ref = Stop.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Stop.prototype.getPrecedence = function() {
    return 12;
  };

  Stop.prototype.toString = function() {
    return "0";
  };

  Stop.prototype.copy = function() {
    return (new Stop())._setCCS(this.ccs);
  };

  return Stop;

})(Process);

Exit = (function(_super) {
  __extends(Exit, _super);

  function Exit() {
    _ref1 = Exit.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Exit.prototype.getPrecedence = function() {
    return 12;
  };

  Exit.prototype.getApplicapleRules = function() {
    return [ExitRule];
  };

  Exit.prototype.toString = function() {
    return "1";
  };

  Exit.prototype.copy = function() {
    return (new Exit())._setCCS(this.ccs);
  };

  return Exit;

})(Process);

ProcessApplication = (function(_super) {
  __extends(ProcessApplication, _super);

  function ProcessApplication(processName, valuesToPass) {
    this.processName = processName;
    this.valuesToPass = valuesToPass;
    ProcessApplication.__super__.constructor.call(this);
  }

  ProcessApplication.prototype.getArgCount = function() {
    if (!this.valuesToPass) {
      return 0;
    } else {
      return this.valuesToPass.length;
    }
  };

  ProcessApplication.prototype.getProcess = function() {
    var pd;

    if (this.process) {
      return this.process;
    }
    pd = this.ccs.getProcessDefinition(this.processName, this.getArgCount());
    this.process = pd.process.copy();
    return this.process;
  };

  ProcessApplication.prototype.getPrecedence = function() {
    return 12;
  };

  ProcessApplication.prototype.getApplicapleRules = function() {
    return [ExtendRule];
  };

  /*getProxy: -> 	# ToDo: cache result
  		pd = @ccs.getProcessDefinition(@processName, @getArgCount())
  		new ProcessApplicationProxy(@, pd.process.copy())
  */


  ProcessApplication.prototype.toString = function() {
    var e, result;

    result = this.processName;
    if (this.valuesToPass) {
      result += "[" + (((function() {
        var _i, _len, _ref2, _results;

        _ref2 = this.valuesToPass;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          e = _ref2[_i];
          _results.push(e.toString());
        }
        return _results;
      }).call(this)).join(", ")) + "]";
    }
    return result;
  };

  ProcessApplication.prototype.copy = function() {
    return (new ProcessApplication(this.processName, this.valuesToPass))._setCCS(this.ccs);
  };

  return ProcessApplication;

})(Process);

/* - ProcessApplicationProxy			
# (Required to support moving back and forth between process name and definition in step view)
class ProcessApplicationProxy extends Process
	constructor: (@processApplication, @subprocess) -> super @subprocess
	
	getPrecedence: -> @subprocess.getPrecedence()
	getApplicapleRules: -> [ProxyForwardRule, CollapseRule]
	
	toString: -> @subprocess.toString()
	copy: -> (new ProcessApplicationProxy(@processApplication, @subprocess))._setCCS(@ccs)
*/


Prefix = (function(_super) {
  __extends(Prefix, _super);

  function Prefix(action, process) {
    this.action = action;
    this.process = process;
    Prefix.__super__.constructor.call(this, this.process);
  }

  Prefix.prototype.getPrecedence = function() {
    return 12;
  };

  Prefix.prototype.getApplicapleRules = function() {
    return [PrefixRule, OutputRule, InputRule, MatchRule];
  };

  Prefix.prototype.replaceIdentifierWithValue = function(identifier, value) {
    if (this.action.replaceIdentifierWithValue(identifier, value)) {
      return Prefix.__super__.replaceIdentifierWithValue.call(this, identifier, value);
    }
  };

  Prefix.prototype.toString = function() {
    return "" + this.action + "." + (this.stringForSubprocess(this.process));
  };

  Prefix.prototype.copy = function() {
    return (new Prefix(this.action.copy(), this.process.copy()))._setCCS(this.ccs);
  };

  return Prefix;

})(Process);

Condition = (function(_super) {
  __extends(Condition, _super);

  function Condition(expression, process) {
    this.expression = expression;
    this.process = process;
    Condition.__super__.constructor.call(this, this.process);
  }

  Condition.prototype.getPrecedence = function() {
    return 12;
  };

  Condition.prototype.getApplicapleRules = function() {
    return [CondRule];
  };

  Condition.prototype.toString = function() {
    return "when (" + (this.expression.toString()) + ") " + (this.stringForSubprocess(this.process));
  };

  Condition.prototype.copy = function() {
    return (new Condition(this.expression.copy(), this.process.copy()))._setCCS(this.ccs);
  };

  return Condition;

})(Process);

Choice = (function(_super) {
  __extends(Choice, _super);

  function Choice(left, right) {
    this.left = left;
    this.right = right;
    Choice.__super__.constructor.call(this, this.left, this.right);
  }

  Choice.prototype.getPrecedence = function() {
    return 9;
  };

  Choice.prototype.getApplicapleRules = function() {
    return [ChoiceLRule, ChoiceRRule];
  };

  Choice.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.left)) + " + " + (this.stringForSubprocess(this.right));
  };

  Choice.prototype.copy = function() {
    return (new Choice(this.left.copy(), this.right.copy()))._setCCS(this.ccs);
  };

  return Choice;

})(Process);

Parallel = (function(_super) {
  __extends(Parallel, _super);

  function Parallel(left, right) {
    this.left = left;
    this.right = right;
    Parallel.__super__.constructor.call(this, this.left, this.right);
  }

  Parallel.prototype.getPrecedence = function() {
    return 6;
  };

  Parallel.prototype.getApplicapleRules = function() {
    return [ParLRule, ParRRule, SyncRule, SyncExitRule];
  };

  Parallel.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.left)) + " | " + (this.stringForSubprocess(this.right));
  };

  Parallel.prototype.copy = function() {
    return (new Parallel(this.left.copy(), this.right.copy()))._setCCS(this.ccs);
  };

  return Parallel;

})(Process);

Sequence = (function(_super) {
  __extends(Sequence, _super);

  function Sequence(left, right) {
    this.left = left;
    this.right = right;
    Sequence.__super__.constructor.call(this, this.left, this.right);
  }

  Sequence.prototype.getPrecedence = function() {
    return 3;
  };

  Sequence.prototype.getApplicapleRules = function() {
    return [Seq1Rule, Seq2Rule];
  };

  Sequence.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.left)) + " ; " + (this.stringForSubprocess(this.right));
  };

  Sequence.prototype.copy = function() {
    return (new Sequence(this.left.copy(), this.right.copy()))._setCCS(this.ccs);
  };

  return Sequence;

})(Process);

Restriction = (function(_super) {
  __extends(Restriction, _super);

  function Restriction(process, restrictedActions) {
    this.process = process;
    this.restrictedActions = restrictedActions;
    Restriction.__super__.constructor.call(this, this.process);
  }

  Restriction.prototype.getPrecedence = function() {
    return 1;
  };

  Restriction.prototype.getApplicapleRules = function() {
    return [ResRule];
  };

  Restriction.prototype.toString = function() {
    var a;

    return "" + (this.stringForSubprocess(this.process)) + " \\ {" + (((function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.restrictedActions;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        a = _ref2[_i];
        _results.push(a.toString());
      }
      return _results;
    }).call(this)).join(", ")) + "}";
  };

  Restriction.prototype.copy = function() {
    return (new Restriction(this.process.copy(), this.restrictedActions))._setCCS(this.ccs);
  };

  return Restriction;

})(Process);

Action = (function() {
  function Action(channel) {
    this.channel = channel;
    if (this.channel === "i") {
      if (!this.isSimpleAction()) {
        throw "Internal channel i is only allowed as simple action!";
      }
      this.channel = CCSInternalChannel;
    } else if (this.channel === "e") {
      if (!this.isSimpleAction()) {
        throw "Exit channel e is only allowed as simple action!";
      }
      this.channel = CCSExitChannel;
    }
  }

  Action.prototype.isSimpleAction = function() {
    return false;
  };

  Action.prototype.isInputAction = function() {
    return false;
  };

  Action.prototype.isMatchAction = function() {
    return false;
  };

  Action.prototype.isOutputAction = function() {
    return false;
  };

  Action.prototype.toString = function() {
    return this.channel;
  };

  Action.prototype.isSyncableWithAction = function(action) {
    return false;
  };

  Action.prototype.replaceIdentifierWithValue = function(identifier, value) {
    return true;
  };

  return Action;

})();

SimpleAction = (function(_super) {
  __extends(SimpleAction, _super);

  function SimpleAction() {
    _ref2 = SimpleAction.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  SimpleAction.prototype.isSimpleAction = function() {
    return true;
  };

  SimpleAction.prototype.copy = function() {
    return new SimpleAction(this.channel);
  };

  return SimpleAction;

})(Action);

Input = (function(_super) {
  __extends(Input, _super);

  function Input(channel, variable, range) {
    this.variable = variable;
    this.range = range;
    Input.__super__.constructor.call(this, channel);
  }

  Input.prototype.isInputAction = function() {
    return true;
  };

  Input.prototype.supportsValuePassing = function() {
    return typeof this.variable === "string" && this.variable.length > 0;
  };

  Input.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel === this.channel && action.supportsValuePassing() === this.supportsValuePassing();
  };

  Input.prototype.replaceIdentifierWithValue = function(identifier, value) {
    return this.variable !== identifier;
  };

  Input.prototype.toString = function() {
    return "" + Input.__super__.toString.apply(this, arguments) + "?" + this.variable;
  };

  Input.prototype.copy = function() {
    return new Input(this.channel, this.variable, this.range);
  };

  return Input;

})(Action);

Match = (function(_super) {
  __extends(Match, _super);

  function Match(channel, expression) {
    this.expression = expression;
    Match.__super__.constructor.call(this, channel);
  }

  Match.prototype.isMatchAction = function() {
    return true;
  };

  Match.prototype.supportsValuePassing = function() {
    return true;
  };

  Match.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel === this.channel && action.supportsValuePassing() && action.expression.evaluate() === this.expression.evaluate();
  };

  Match.prototype.replaceIdentifierWithValue = function(identifier, value) {
    this.expression.replaceIdentifierWithValue(identifier, value);
    return true;
  };

  Match.prototype.toString = function() {
    return "" + Match.__super__.toString.apply(this, arguments) + "?=" + (this.expression ? this.expression.toString() : "");
  };

  Match.prototype.copy = function() {
    var _ref3;

    return new Match(this.channel, (_ref3 = this.expression) != null ? _ref3.copy() : void 0);
  };

  return Match;

})(Action);

Output = (function(_super) {
  __extends(Output, _super);

  function Output(channel, expression) {
    this.expression = expression;
    Output.__super__.constructor.call(this, channel);
  }

  Output.prototype.isOutputAction = function() {
    return true;
  };

  Output.prototype.supportsValuePassing = function() {
    return typeof this.expression === "string" && this.expression.length > 0;
  };

  Output.prototype.isSyncableWithAction = function(action) {
    if ((action != null ? action.isInputAction() : void 0) || action.isMatchAction()) {
      return action.isSyncableWithAction(this);
    } else {
      return false;
    }
  };

  Output.prototype.replaceIdentifierWithValue = function(identifier, value) {
    var _ref3;

    if ((_ref3 = this.expression) != null) {
      _ref3.replaceIdentifierWithValue(identifier, value);
    }
    return true;
  };

  Output.prototype.toString = function() {
    return "" + Output.__super__.toString.apply(this, arguments) + "!" + (this.expression ? this.expression.toString() : "");
  };

  Output.prototype.copy = function() {
    var _ref3;

    return new Output(this.channel, (_ref3 = this.expression) != null ? _ref3.copy() : void 0);
  };

  return Output;

})(Action);

Expression = (function() {
  function Expression(evaluationCode, userCode) {
    this.evaluationCode = evaluationCode;
    this.userCode = userCode;
  }

  Expression.prototype.replaceIdentifierWithValue = function(identifier, value) {
    this.evaluationCode.replaceAll("__env(" + identifier + ")", value);
    return this.userCode.replaceAll("__env(" + identifier + ")", value);
  };

  Expression.prototype.evaluateCodeInEnvironment = function(code, env) {
    return (function(__env,__code){return eval(__code)})(env,code);
  };

  Expression.prototype.getExpressionString = function() {
    return this.evaluateCodeInEnvironment(this.userCode, function(a) {
      return a;
    });
  };

  Expression.prototype.evaluate = function() {
    return this.evaluateCodeInEnvironment(this.evaluationCode, (function(v) {
      throw 'Unknown identifier "#{v}"';
    }));
  };

  Expression.prototype.toString = function() {
    return this.getExpressionString();
  };

  Expression.prototype.copy = function() {
    return new Expression(this.evaluationCode, this.userCode);
  };

  return Expression;

})();

ActionSets = {
  isActionInK: function(action) {
    return ActionSets.isActionInCom(action) && action.isSimpleAction();
  },
  isActionInCom: function(action) {
    return ActionSets.isActionInAct(action) && action.channel !== CCSInternalChannel;
  },
  isActionInAct: function(action) {
    return ActionSets.isActionInActPlus(action) && action.channel !== CCSExitChannel;
  },
  isActionInActPlus: function(action) {
    return !action.supportsValuePassing();
  },
  isActionInComVP: function(action) {
    return ActionSets.isActionInActVP(action) && action.channel !== CCSInternalChannel;
  },
  isActionInActVP: function(action) {
    return action.channel !== CCSExitChannel;
  },
  isActionInActVPPlus: function(action) {
    return true;
  }
};

Array.prototype.filterKSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInK(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInCom(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInAct(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActPlusSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInActPlus(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComVPSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInComVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInActVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPPlusSteps = function() {
  return this;
};

String.prototype.replaceAll = function(needle, replacement) {
	var t = this
	var tt = this
	do {
		t = tt;
		tt = t.replace(needle, replacement);
	} while (t != tt);
	return t;
}

Array.prototype.concatChildren = function() {
	if (this.length == 0)
		return [];
	var result = this.shift().concat([]);	// Result should always be a copy
	while (this.length > 0) {
		result = result.concat(this.shift());
	}
	return result;
}

Array.prototype.joinChildren = function(separator) {
	var result = [];
	var i = 0;
	while(true) {
		var joinTarget = [];
		for (var c = 0; c < this.length; c++) {
			if (this[c][i]) joinTarget.push(this[c][i]);
		}
		if (joinTarget.length == 0)
			break;
		result[i++] = joinTarget.join(separator);
	}
	return result;
};

CCSStep = (function() {
  function CCSStep() {
    var action, actionDetails, index, process, rule, s, substeps, _i, _len, _ref3;

    index = arguments[0], process = arguments[1], action = arguments[2], rule = arguments[3], actionDetails = arguments[4], substeps = 6 <= arguments.length ? __slice.call(arguments, 5) : [];
    this.index = index;
    this.process = process;
    this.action = action;
    this.rule = rule;
    this.actionDetails = actionDetails;
    this.substeps = substeps;
    _ref3 = this.substeps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      s = _ref3[_i];
      if (s === void 0 || s === null) {
        throw "substep must not be nil!";
      }
    }
    if (!this.actionDetails) {
      this.actionDetails = this.substeps.length === 1 ? this.substeps[0].actionDetails : "";
    }
  }

  CCSStep.prototype.getLeaveProcesses = function() {
    var step;

    if (this.substeps.length === 0) {
      return [this.process];
    } else {
      return ((function() {
        var _i, _len, _ref3, _results;

        _ref3 = this.substeps;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          step = _ref3[_i];
          _results.push(step.getLeaveProcesses());
        }
        return _results;
      }).call(this)).concatChildren();
    }
  };

  CCSStep.prototype.perform = function() {
    return this.rule.performStep(this);
  };

  CCSStep.prototype.toString = function() {
    return this.action.toString() + (this.actionDetails.length > 0 ? " " + this.actionDetails : "");
  };

  return CCSStep;

})();

CCSBaseStep = (function(_super) {
  __extends(CCSBaseStep, _super);

  function CCSBaseStep(prefix, rule) {
    CCSBaseStep.__super__.constructor.call(this, 0, prefix, prefix.action, rule);
  }

  return CCSBaseStep;

})(CCSStep);

PrefixRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isSimpleAction() : void 0) || !prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.process;
  }
};

OutputRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isOutputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.process;
  }
};

InputRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isInputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    throw new Error("Not implemented");
    return step.process.process;
  }
};

MatchRule = {
  getPossibleSteps: function(prefix) {
    if (prefix != null ? prefix.action.isMatchAction() : void 0) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.process;
  }
};

ChoiceLRule = {
  getPossibleSteps: function(choice) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = choice.left.getPossibleSteps().filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, choice, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

ChoiceRRule = {
  getPossibleSteps: function(choice) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = choice.right.getPossibleSteps().filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, choice, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

ParLRule = {
  getPossibleSteps: function(parallel) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = parallel.left.getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, parallel, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    step.process.left = step.substeps[0].perform();
    return step.process;
  }
};

ParRRule = {
  getPossibleSteps: function(parallel) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = parallel.right.getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, parallel, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    step.process.right = step.substeps[0].perform();
    return step.process;
  }
};

SyncRule = {
  filterStepsSyncableWithStep: function(step, steps) {
    var result, s, _i, _len;

    result = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      s = steps[_i];
      if (s.action.isSyncableWithAction(step.action)) {
        result.push(s);
      }
    }
    return result;
  },
  getPossibleSteps: function(parallel) {
    var c, l, left, r, result, right, _i, _j, _len, _len1, _right;

    left = parallel.left.getPossibleSteps();
    right = parallel.right.getPossibleSteps();
    result = [];
    c = 0;
    for (_i = 0, _len = left.length; _i < _len; _i++) {
      l = left[_i];
      _right = SyncRule.filterStepsSyncableWithStep(l, right);
      for (_j = 0, _len1 = _right.length; _j < _len1; _j++) {
        r = _right[_j];
        result.push(new CCSStep(c++, parallel, new SimpleAction(CCSInternalChannel), this, "[" + (l.toString()) + ", " + (r.toString()) + "]", l, r));
      }
    }
    return result;
  },
  performStep: function(step) {
    step.process.left = step.substeps[0].perform();
    step.process.right = step.substeps[1].perform();
    return step.process;
  }
};

ResRule = {
  getPossibleSteps: function(restriction) {
    var a, c, restr, result, step, steps, _i, _len;

    steps = restriction.process.getPossibleSteps().filterActVPPlusSteps();
    result = [];
    c = 0;
    restr = (function() {
      var _i, _len, _ref3, _results;

      _ref3 = restriction.restrictedActions;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        a = _ref3[_i];
        _results.push(a.channel);
      }
      return _results;
    })();
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      if (restr.indexOf(step.action.channel) === -1) {
        result.push(new CCSStep(c++, restriction, step.action, this, null, step));
      }
    }
    return result;
  },
  performStep: function(step) {
    step.process.process = step.substeps[0].perform();
    return step.process;
  }
};

CondRule = {
  getPossibleSteps: function(condition) {
    if (condition.expression.evaluate()) {
      return condition.process.getPossibleSteps().filterActVPPlusSteps();
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

ExitRule = {
  getPossibleSteps: function(exit) {
    return [new CCSStep(0, exit, new SimpleAction(CCSExitChannel), this)];
  },
  performStep: function(step) {
    return new Stop();
  }
};

SyncExitRule = {
  getPossibleSteps: function(parallel) {
    var c, filter, l, left, r, result, right, _i, _j, _len, _len1;

    filter = function(step) {
      return step.action.channel === CCSExitChannel;
    };
    left = parallel.left.getPossibleSteps().filter(filter);
    right = parallel.right.getPossibleSteps().filter(filter);
    c = 0;
    result = [];
    for (_i = 0, _len = left.length; _i < _len; _i++) {
      l = left[_i];
      for (_j = 0, _len1 = right.length; _j < _len1; _j++) {
        r = right[_j];
        result.push(new CCSStep(c++, parallel, new SimpleAction(CCSExitChannel), this, "[" + (l.toString()) + ", " + (r.toString()) + "]", l, r));
      }
    }
    return result;
  },
  performStep: function(step) {
    return SyncRule.performStep(step);
  }
};

Seq1Rule = {
  getPossibleSteps: function(sequence) {
    var c, step, _i, _len, _ref3, _results;

    c = 0;
    _ref3 = sequence.left.getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(c++, sequence, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.process.left = step.substeps[0].perform();
  }
};

Seq2Rule = {
  getPossibleSteps: function(sequence) {
    var c, filter, result, rho, rhos, _i, _len;

    filter = function(step) {
      return step.action.channel === CCSExitChannel;
    };
    rhos = sequence.left.getPossibleSteps().filter(filter);
    result = [];
    c = 0;
    for (_i = 0, _len = rhos.length; _i < _len; _i++) {
      rho = rhos[_i];
      result.push(new CCSStep(c++, sequence, new SimpleAction(CCSInternalChannel), this, "[" + CCSExitChannel + "]", rho));
    }
    return result;
  },
  performStep: function(step) {
    return step.process.right;
  }
};

RecRule = {
  getPossibleSteps: function(application) {}
};

/*
# - ExtendRule
ExtendRule = 
	getPossibleSteps: (application) ->
		pd = application.ccs.getProcessDefinition(application.processName, application.getArgCount())
		if pd 
		then [new CCSStep(0, application, new SimpleAction(CCSUIChannel), @, "[#{application.processName}]")]
		else []
	performStep: (step) ->
		pd = step.process.ccs.getProcessDefinition(step.process.processName, step.process.getArgCount())
		p = step.process.getProxy()
		((
			id = pd.params[i]
			val = step.process.valuesToPass[i].evaluate()
			p.replaceIdentifierWithValue(id, val)
		) for i in [0..pd.params.length-1] ) if pd.params
		return p


# - CollapseRule
CollapseRule = 
	getPossibleSteps: (proxy) ->
		[new CCSStep(0, proxy, new SimpleAction(CCSUIChannel), @, "[\u21aa #{proxy.processApplication.processName}]")]
	performStep: (step) -> step.process.processApplication


# - ProxyForwardRule
ProxyForwardRule =
	getPossibleSteps: (proxy) ->
		steps = proxy.subprocess.getPossibleSteps().filterActVPPlusSteps()
		c = 0 
		new CCSStep(c++, proxy, step.action, @, null, step) for step in steps
	performStep: (step) -> 
		step.substeps[0].perform()
*/


CCSProcessCreateView = function(stepView, process, needsBrackets) {
  if (process instanceof Prefix) {
    return new CCSPrefixView(stepView, process);
  } else if (process instanceof Condition) {
    return new CCSConditionView(stepView, process);
  } else if (process instanceof Stop) {
    return new CCSStopView(stepView, process);
  } else if (process instanceof Exit) {
    return new CCSExitView(stepView, process);
  } else if (process instanceof ProcessApplication) {
    return new CCSProcessApplicationView(stepView, process);
  } else if (process instanceof ProcessApplicationProxy) {
    return new CCSProcessApplicationProxyView(stepView, process);
  } else if (process instanceof Choice) {
    return new CCSChoiceView(stepView, process, needsBrackets);
  } else if (process instanceof Parallel) {
    return new CCSParallelView(stepView, process, needsBrackets);
  } else if (process instanceof Sequence) {
    return new CCSSequenceView(stepView, process, needsBrackets);
  } else if (process instanceof Restriction) {
    return new CCSRestrictionView(stepView, process, needsBrackets);
  } else {
    throw new Error("Process view could not be created for unknown process!");
  }
};

CCSProcessView = (function() {
  function CCSProcessView() {
    var needsBrackets, process, stepView, subviews;

    stepView = arguments[0], process = arguments[1], needsBrackets = arguments[2], subviews = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.stepView = stepView;
    this.process = process;
    this.needsBrackets = needsBrackets;
    this.subviews = subviews;
  }

  CCSProcessView.prototype.setPossibleSteps = function(steps) {
    var v, _i, _len, _ref3, _results;

    _ref3 = this.subviews;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      v = _ref3[_i];
      _results.push(v.setPossibleSteps(steps));
    }
    return _results;
  };

  CCSProcessView.prototype.setPossibleSyncableSteps = function(steps) {
    var v, _i, _len, _ref3, _results;

    _ref3 = this.subviews;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      v = _ref3[_i];
      _results.push(v.setPossibleSyncableSteps(steps));
    }
    return _results;
  };

  CCSProcessView.prototype.removeView = function() {
    var _ref3;

    return (_ref3 = this.span) != null ? _ref3.parentNode.removeChild(this.span) : void 0;
  };

  return CCSProcessView;

})();

CCSStopView = (function(_super) {
  __extends(CCSStopView, _super);

  function CCSStopView(stepView, stop) {
    CCSStopView.__super__.constructor.call(this, stepView, stop, false);
  }

  CCSStopView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    t = document.createTextNode("0");
    this.span.appendChild(t);
    return this.span;
  };

  return CCSStopView;

})(CCSProcessView);

CCSExitView = (function(_super) {
  __extends(CCSExitView, _super);

  function CCSExitView(stepView, exit) {
    CCSExitView.__super__.constructor.call(this, stepView, exit, false);
  }

  CCSExitView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.a = document.createElement("A");
    this.span.appendChild(this.a);
    this.a.setAttribute("HREF", "javascript:void(0)");
    this._setEnabled(false);
    t = document.createTextNode("1");
    this.a.appendChild(t);
    return this.span;
  };

  CCSExitView.prototype._setEnabled = function(enabled) {
    var _ref3, _ref4;

    if (enabled) {
      return (_ref3 = this.a) != null ? _ref3.setAttribute("CLASS", "ccs_step") : void 0;
    }
    return (_ref4 = this.a) != null ? _ref4.setAttribute("CLASS", "ccs_step disabled") : void 0;
  };

  CCSExitView.prototype.setPossibleSteps = function(steps) {
    var p, s, _i, _len, _ref3;

    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (p === this.process) {
        this.steps.push([p, s]);
      }
    }
    return this._setEnabled(this.steps.length > 0);
  };

  CCSExitView.prototype.setPossibleSyncableSteps = function(steps) {
    return this.setPossibleSteps(steps);
  };

  return CCSExitView;

})(CCSProcessView);

CCSProcessApplicationView = (function(_super) {
  __extends(CCSProcessApplicationView, _super);

  function CCSProcessApplicationView(stepView, application) {
    CCSProcessApplicationView.__super__.constructor.call(this, stepView, application, false);
  }

  CCSProcessApplicationView.prototype.getNode = function() {
    var sup, t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    sup = document.createElement("SUP");
    this.span.appendChild(sup);
    this.toggleA = document.createElement("A");
    sup.appendChild(this.toggleA);
    this.toggleA.setAttribute("HREF", "javascript:void(0)");
    this.toggleA.setAttribute("CLASS", "ccs_toggle_process");
    this.toggleA.innerText = "\u21e3";
    this.toggleA.__this = this;
    this.toggleA.addEventListener("click", this._handleClick);
    this._setEnabled(false);
    t = document.createTextNode(this.process.toString());
    this.span.appendChild(t);
    return this.span;
  };

  CCSProcessApplicationView.prototype._setEnabled = function(enabled) {
    if (enabled) {
      return this.toggleA.style.display = "inline";
    }
    return this.toggleA.style.display = "none";
  };

  CCSProcessApplicationView.prototype.setPossibleSteps = function(steps) {
    var p, s, _i, _len, _ref3;

    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (p === this.process) {
        this.steps.push([p, s]);
      }
    }
    return this._setEnabled(this.steps.length > 0);
  };

  CCSProcessApplicationView.prototype._handleClick = function(event) {
    return this.__this.stepView._handleProcessExtension(this.__this);
  };

  return CCSProcessApplicationView;

})(CCSProcessView);

CCSProcessApplicationProxyView = (function(_super) {
  __extends(CCSProcessApplicationProxyView, _super);

  function CCSProcessApplicationProxyView(stepView, proxy, needsBrackets) {
    CCSProcessApplicationProxyView.__super__.constructor.call(this, stepView, proxy, false, CCSProcessCreateView(stepView, proxy.subprocess, needsBrackets));
  }

  CCSProcessApplicationProxyView.prototype.getNode = function() {
    var sup;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    sup = document.createElement("SUP");
    this.span.appendChild(sup);
    this.toggleA = document.createElement("A");
    sup.appendChild(this.toggleA);
    this.toggleA.setAttribute("HREF", "javascript:void(0)");
    this.toggleA.setAttribute("CLASS", "ccs_toggle_process");
    this.toggleA.innerText = "\u21e1";
    this.toggleA.__this = this;
    this.toggleA.addEventListener("click", this._handleClick);
    this._setEnabled(false);
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    return this.span;
  };

  CCSProcessApplicationProxyView.prototype._setEnabled = function(enabled) {
    if (enabled) {
      return this.toggleA.style.display = "inline";
    }
    return this.toggleA.style.display = "none";
  };

  CCSProcessApplicationProxyView.prototype.setPossibleSteps = function(steps) {
    var p, s, _i, _len, _ref3;

    CCSProcessApplicationProxyView.__super__.setPossibleSteps.call(this, steps);
    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (p === this.process) {
        this.steps.push([p, s]);
      }
    }
    return this._setEnabled(this.steps.length > 0);
  };

  CCSProcessApplicationProxyView.prototype._handleClick = function(event) {
    return this.__this.stepView._handleProcessCollapse(this.__this);
  };

  return CCSProcessApplicationProxyView;

})(CCSProcessView);

CCSPrefixView = (function(_super) {
  __extends(CCSPrefixView, _super);

  function CCSPrefixView(stepView, prefix) {
    CCSPrefixView.__super__.constructor.call(this, stepView, prefix, false, CCSProcessCreateView(stepView, prefix.process));
    this.allowsInternalActions = true;
  }

  CCSPrefixView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.a = document.createElement("A");
    this.span.appendChild(this.a);
    this.a.setAttribute("HREF", "javascript:void(0)");
    this.a.__this = this;
    this._setEnabled(false);
    t = document.createTextNode(this.process.action.toString());
    this.a.appendChild(t);
    t = document.createTextNode(".");
    this.span.appendChild(t);
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    return this.span;
  };

  CCSPrefixView.prototype._setEnabled = function(enabled) {
    if (!this.a) {
      return;
    }
    if (enabled) {
      this.a.setAttribute("CLASS", "ccs_step");
      return this.a.addEventListener("click", this._handleClick);
    } else {
      this.a.setAttribute("CLASS", "ccs_step disabled");
      return this.a.removeEventListener("click", this._handleClick);
    }
  };

  CCSPrefixView.prototype.setPossibleSteps = function(steps) {
    var p, s, _i, _len, _ref3;

    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (p === this.process && (this.allowsInternalActions || s.action.channel !== CCSInternalChannel)) {
        this.steps.push([p, s]);
      }
    }
    return this._setEnabled(this.steps.length > 0);
  };

  CCSPrefixView.prototype.setPossibleSyncableSteps = function(steps) {
    return this.setPossibleSteps(steps);
  };

  CCSPrefixView.prototype._handleClick = function(event) {
    return this.__this.stepView._handleActionSelection(this.__this);
  };

  return CCSPrefixView;

})(CCSProcessView);

CCSConditionView = (function(_super) {
  __extends(CCSConditionView, _super);

  function CCSConditionView(stepView, condition) {
    CCSConditionView.__super__.constructor.call(this, stepView, condition, false, CCSProcessCreateView(stepView, condition.process));
  }

  CCSConditionView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    t = document.createTextNode("when (" + (this.process.expression.toString()) + ") ");
    this.span.appendChild(t);
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    return this.span;
  };

  return CCSConditionView;

})(CCSProcessView);

CCSChoiceView = (function(_super) {
  __extends(CCSChoiceView, _super);

  function CCSChoiceView(stepView, choice, needsBrackets) {
    var lv, rv;

    lv = CCSProcessCreateView(stepView, choice.left, choice.needsBracketsForSubprocess(choice.left));
    rv = CCSProcessCreateView(stepView, choice.right, choice.needsBracketsForSubprocess(choice.left));
    CCSChoiceView.__super__.constructor.call(this, stepView, choice, needsBrackets, lv, rv);
  }

  CCSChoiceView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.leftSpan = this.subviews[0].getNode();
    this.rightSpan = this.subviews[1].getNode();
    this.span.appendChild(this.leftSpan);
    t = document.createTextNode(" + ");
    this.span.appendChild(t);
    this.span.appendChild(this.rightSpan);
    return this.span;
  };

  return CCSChoiceView;

})(CCSProcessView);

CCSParallelView = (function(_super) {
  __extends(CCSParallelView, _super);

  function CCSParallelView(stepView, parallel, needsBrackets) {
    var lv, rv;

    lv = CCSProcessCreateView(stepView, parallel.left, parallel.needsBracketsForSubprocess(parallel.left));
    rv = CCSProcessCreateView(stepView, parallel.right, parallel.needsBracketsForSubprocess(parallel.left));
    CCSParallelView.__super__.constructor.call(this, stepView, parallel, needsBrackets, lv, rv);
  }

  CCSParallelView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    if (this.needsBrackets) {
      this.span.appendChild(document.createTextNode("("));
    }
    this.leftSpan = this.subviews[0].getNode();
    this.rightSpan = this.subviews[1].getNode();
    this.span.appendChild(this.leftSpan);
    t = document.createTextNode(" | ");
    this.span.appendChild(t);
    this.span.appendChild(this.rightSpan);
    if (this.needsBrackets) {
      this.span.appendChild(document.createTextNode(")"));
    }
    return this.span;
  };

  return CCSParallelView;

})(CCSProcessView);

CCSSequenceView = (function(_super) {
  __extends(CCSSequenceView, _super);

  function CCSSequenceView(stepView, sequence, needsBrackets) {
    CCSSequenceView.__super__.constructor.call(this, stepView, sequence, needsBrackets, CCSProcessCreateView(stepView, sequence.left), CCSProcessCreateView(this.stepView, sequence.right));
  }

  CCSSequenceView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.leftSpan = this.subviews[0].getNode();
    this.rightSpan = this.subviews[1].getNode();
    this.span.appendChild(this.leftSpan);
    t = document.createTextNode(" ; ");
    this.span.appendChild(t);
    this.span.appendChild(this.rightSpan);
    return this.span;
  };

  return CCSSequenceView;

})(CCSProcessView);

CCSRestrictionView = (function(_super) {
  __extends(CCSRestrictionView, _super);

  function CCSRestrictionView(stepView, restriction, needsBrackets) {
    CCSRestrictionView.__super__.constructor.call(this, stepView, restriction, needsBrackets, CCSProcessCreateView(stepView, restriction.process));
  }

  CCSRestrictionView.prototype.getNode = function() {
    var a, t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    t = document.createTextNode(" \\ {" + (((function() {
      var _i, _len, _ref3, _results;

      _ref3 = this.process.restrictedActions;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        a = _ref3[_i];
        _results.push(a.toString());
      }
      return _results;
    }).call(this)).join(", ")) + "}");
    this.span.appendChild(t);
    return this.span;
  };

  return CCSRestrictionView;

})(CCSProcessView);

CCSStepView = (function() {
  function CCSStepView(ccs) {
    this.ccs = ccs;
    this.syncableSteps = null;
  }

  CCSStepView.prototype.getNode = function() {
    if (this.p) {
      return this.p;
    }
    this.p = document.createElement("P");
    this.p.setAttribute("CLASS", "ccs_view");
    this.system = this.ccs.system.copy();
    this.rootView = CCSProcessCreateView(this, this.system);
    this.p.appendChild(this.rootView.getNode());
    this._updatePossibleSteps();
    return this.p;
  };

  CCSStepView.prototype._setPossibleSteps = function(steps) {
    var p, s;

    this.steps = ((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        s = steps[_i];
        _results.push((function() {
          var _j, _len1, _ref3, _results1;

          _ref3 = s.getLeaveProcesses();
          _results1 = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            p = _ref3[_j];
            _results1.push([p, s]);
          }
          return _results1;
        })());
      }
      return _results;
    })()).concatChildren();
    return this.rootView.setPossibleSteps(this.steps);
  };

  CCSStepView.prototype._setPossibleSyncableSteps = function(steps) {
    var p, s;

    this.syncableSteps = ((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        s = steps[_i];
        _results.push((function() {
          var _j, _len1, _ref3, _results1;

          _ref3 = s.getLeaveProcesses();
          _results1 = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            p = _ref3[_j];
            _results1.push([p, s]);
          }
          return _results1;
        })());
      }
      return _results;
    })()).concatChildren();
    return this.rootView.setPossibleSyncableSteps(this.syncableSteps);
  };

  CCSStepView.prototype._handleActionSelection = function(prefixView) {
    var p, s;

    this.prefixView = prefixView;
    if (this.syncableSteps) {
      this.prefixView.allowsInternalActions = true;
      this.syncableSteps = null;
      if (this.prefixView.steps.length !== 1) {
        console.warn("Prefix view has more than one possible step: " + this.prefixView.steps);
      }
      this.system = this.prefixView.steps[0][1].perform();
      return this._checkSystemChanges();
    } else {
      this.prefixView.allowsInternalActions = false;
      return this._setPossibleSyncableSteps((function() {
        var _i, _len, _ref3, _ref4, _results;

        _ref3 = this.prefixView.steps;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          _ref4 = _ref3[_i], p = _ref4[0], s = _ref4[1];
          _results.push(s);
        }
        return _results;
      }).call(this));
    }
  };

  CCSStepView.prototype._handleProcessExtension = function(pappView) {
    this.pappView = pappView;
    if (this.pappView.steps.length !== 1) {
      console.warn("Process application view doesn't have one possible step: " + this.pappView.steps);
    }
    this.system = this.pappView.steps[0][1].perform();
    return this._checkSystemChanges();
  };

  CCSStepView.prototype._handleProcessCollapse = function(proxy) {
    this.proxy = proxy;
    if (this.proxy.steps.length !== 1) {
      console.warn("Process application proxy view doesn't have one possible step: " + this.proxy.steps);
    }
    this.system = this.proxy.steps[0][1].perform();
    return this._checkSystemChanges();
  };

  CCSStepView.prototype._checkSystemChanges = function() {
    this.rootView.removeView();
    this.rootView = CCSProcessCreateView(this, this.system);
    this.p.appendChild(this.rootView.getNode());
    return this._updatePossibleSteps();
  };

  CCSStepView.prototype._updatePossibleSteps = function() {
    var _ref3;

    if (!this.rootView) {
      return;
    }
    this._setPossibleSteps(this.system.getPossibleSteps());
    if (this.syncableSteps) {
      return (_ref3 = this.rootView) != null ? _ref3.setPossibleSyncableSteps(this.syncableSteps) : void 0;
    }
  };

  return CCSStepView;

})();
