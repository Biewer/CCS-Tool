// Generated by CoffeeScript 1.6.2
var Action, ActionSets, AdditiveExpression, CCS, CCSBaseStep, CCSChoiceView, CCSConditionView, CCSExitChannel, CCSExitView, CCSGetMostGeneralType, CCSInputView, CCSInternalChannel, CCSParallelView, CCSPrefixView, CCSProcessApplicationView, CCSProcessCreateView, CCSProcessView, CCSRestrictionView, CCSSequenceView, CCSStep, CCSStepView, CCSStopView, CCSTypeChannel, CCSTypeUnknown, CCSTypeValue, CCSUIChannel, Channel, Choice, ChoiceLRule, ChoiceRRule, ConcatenatingExpression, CondRule, Condition, ConstantExpression, EqualityExpression, Exit, ExitRule, Expression, Input, InputRule, Match, MatchRule, MultiplicativeExpression, ObjID, Output, OutputRule, PCAdditiveExpression, PCAndExpression, PCArrayExpression, PCAssignDestination, PCAssignExpression, PCBaseType, PCBreakStmt, PCChannelType, PCClassCall, PCClassType, PCConditionDeclStmt, PCConditionalExpression, PCContinueStmt, PCDecl, PCDoStmt, PCEqualityExpression, PCExpression, PCExpressionList, PCForStmt, PCFormalParameter, PCIdentifierExpression, PCIfStmt, PCLiteralExpression, PCMainAgent, PCMonitor, PCMultiplicativeExpression, PCNode, PCOrExpression, PCPostfixExpression, PCPrimitiveStmt, PCPrintStmt, PCProcedure, PCProcedureCall, PCProgram, PCReceiveExpression, PCRelationalExpression, PCReturnStmt, PCSelectStmt, PCSendExpression, PCSimpleType, PCStartExpression, PCStatement, PCStmtBlock, PCStruct, PCType, PCUnaryExpression, PCVariableDeclarator, PCWhileStmt, ParLRule, ParRRule, Parallel, Prefix, PrefixRule, Process, ProcessApplication, ProcessDefinition, RecRule, RelationalExpression, ResRule, Restriction, Seq1Rule, Seq2Rule, Sequence, SimpleAction, Stop, SyncExitRule, SyncRule, VariableExpression, _DEBUG, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref31, _ref32, _ref33, _ref34, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CCSInternalChannel = "\u03c4";

CCSExitChannel = "\u03b4";

CCSUIChannel = "\u03c8";

ObjID = 1;

_DEBUG = [];

CCSTypeUnknown = 0;

CCSTypeChannel = 1;

CCSTypeValue = 2;

CCSGetMostGeneralType = function(t1, t2) {
  if (t2 === CCSTypeUnknown) {
    return t1;
  }
  if (t1 === CCSTypeUnknown) {
    return t2;
  }
  if (t1 === t2) {
    return t1;
  }
  throw new Error("Incopatible Types: " + t1 + " and " + t2 + "!");
};

CCS = (function() {
  function CCS(processDefinitions, system) {
    var pd, _i, _len, _ref;

    this.processDefinitions = processDefinitions;
    this.system = system;
    this.system.setCCS(this);
    _ref = this.processDefinitions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pd = _ref[_i];
      pd.setCCS(this);
      pd.getArgTypes();
    }
  }

  CCS.prototype.getProcessDefinition = function(name, argCount) {
    var pd, result, _i, _len, _ref;

    result = null;
    _ref = this.processDefinitions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pd = _ref[_i];
      if (pd.name === name && argCount === pd.getArgCount()) {
        result = pd;
      }
    }
    return result;
  };

  CCS.prototype.getPossibleSteps = function(env) {
    return this.system.getPossibleSteps(env);
  };

  CCS.prototype.toString = function() {
    var process;

    return "" + (((function() {
      var _i, _len, _ref, _results;

      _ref = this.processDefinitions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        process = _ref[_i];
        _results.push(process.toString());
      }
      return _results;
    }).call(this)).join("")) + "\n" + (this.system.toString());
  };

  return CCS;

})();

ProcessDefinition = (function() {
  function ProcessDefinition(name, process, params) {
    var p;

    this.name = name;
    this.process = process;
    this.params = params;
    if (this.params) {
      this.types = (function() {
        var _i, _len, _ref, _results;

        _ref = this.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push(CCSTypeUnknown);
        }
        return _results;
      }).call(this);
    }
  }

  ProcessDefinition.prototype.getArgCount = function() {
    if (this.params) {
      return this.params.length;
    } else {
      return 0;
    }
  };

  ProcessDefinition.prototype.setCCS = function(ccs) {
    return this.process.setCCS(ccs);
  };

  ProcessDefinition.prototype.getArgTypes = function() {
    var x;

    if (!this.params) {
      return null;
    }
    return this.types = (function() {
      var _i, _len, _ref, _results;

      _ref = this.params;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        _results.push(this.process.getTypeOfIdentifier(x, CCSTypeUnknown));
      }
      return _results;
    }).call(this);
  };

  ProcessDefinition.prototype.toString = function() {
    var result;

    result = this.name;
    if (this.params != null) {
      result += "[" + (this.params.join(", ")) + "]";
    }
    result += " := " + (this.process.toString()) + "\n";
    return result;
  };

  return ProcessDefinition;

})();

Process = (function() {
  function Process() {
    var subprocesses;

    subprocesses = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.subprocesses = subprocesses;
    this.__id = ObjID++;
  }

  Process.prototype.setCCS = function(ccs) {
    var p, _i, _len, _ref, _results;

    this.ccs = ccs;
    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.setCCS(this.ccs));
    }
    return _results;
  };

  Process.prototype._setCCS = function(ccs) {
    this.ccs = ccs;
    if (!this.ccs) {
      throw "no ccs";
    }
    return this;
  };

  Process.prototype.getLeft = function() {
    return this.subprocesses[0];
  };

  Process.prototype.getRight = function() {
    return this.subprocesses[1];
  };

  Process.prototype.setLeft = function(left) {
    return this.subprocesses[0] = left;
  };

  Process.prototype.setRight = function(right) {
    return this.subprocesses[1] = right;
  };

  Process.prototype.replaceIdentifierWithValue = function(identifier, value) {
    var p, _i, _len, _ref, _results;

    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.replaceIdentifierWithValue(identifier, value));
    }
    return _results;
  };

  Process.prototype.replaceIdentifier = function(old, newID) {
    var p, _i, _len, _ref, _results;

    _ref = this.subprocesses;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(p.replaceIdentifier(old, newID));
    }
    return _results;
  };

  Process.prototype.getTypeOfIdentifier = function(identifier, type) {
    var p, t, _i, _len, _ref;

    _ref = (function() {
      var _j, _len, _ref, _results;

      _ref = this.subprocesses;
      _results = [];
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        p = _ref[_j];
        _results.push(p.getTypeOfIdentifier(identifier, type));
      }
      return _results;
    }).call(this);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      type = CCSGetMostGeneralType(type, t);
    }
    return type;
  };

  Process.prototype.getApplicapleRules = function() {
    return [];
  };

  Process.prototype.getPossibleSteps = function() {
    var rule;

    return ((function() {
      var _i, _len, _ref, _results;

      _ref = this.getApplicapleRules();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        _results.push(rule.getPossibleSteps(this));
      }
      return _results;
    }).call(this)).concatChildren();
  };

  Process.prototype.needsBracketsForSubprocess = function(process) {
    return (this.getPrecedence != null) && (process.getPrecedence != null) && process.getPrecedence() < this.getPrecedence();
  };

  Process.prototype.stringForSubprocess = function(process) {
    if (this.needsBracketsForSubprocess(process)) {
      return "(" + (process.toString()) + ")";
    } else {
      return "" + (process.toString());
    }
  };

  Process.prototype.getPrefixes = function() {
    var p;

    return ((function() {
      var _i, _len, _ref, _results;

      _ref = this.subprocesses;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.getPrefixes());
      }
      return _results;
    }).call(this)).concatChildren();
  };

  Process.prototype.getExits = function() {
    var p;

    return ((function() {
      var _i, _len, _ref, _results;

      _ref = this.subprocesses;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.getExits());
      }
      return _results;
    }).call(this)).concatChildren();
  };

  return Process;

})();

Stop = (function(_super) {
  __extends(Stop, _super);

  function Stop() {
    _ref = Stop.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Stop.prototype.getPrecedence = function() {
    return 12;
  };

  Stop.prototype.toString = function() {
    return "0";
  };

  Stop.prototype.copy = function() {
    return (new Stop())._setCCS(this.ccs);
  };

  return Stop;

})(Process);

Exit = (function(_super) {
  __extends(Exit, _super);

  function Exit() {
    _ref1 = Exit.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Exit.prototype.getPrecedence = function() {
    return 12;
  };

  Exit.prototype.getApplicapleRules = function() {
    return [ExitRule];
  };

  Exit.prototype.getExits = function() {
    return [this];
  };

  Exit.prototype.toString = function() {
    return "1";
  };

  Exit.prototype.copy = function() {
    return (new Exit())._setCCS(this.ccs);
  };

  return Exit;

})(Process);

ProcessApplication = (function(_super) {
  __extends(ProcessApplication, _super);

  function ProcessApplication(processName, valuesToPass) {
    this.processName = processName;
    this.valuesToPass = valuesToPass != null ? valuesToPass : [];
    ProcessApplication.__super__.constructor.call(this);
  }

  ProcessApplication.prototype.getArgCount = function() {
    return this.valuesToPass.length;
  };

  ProcessApplication.prototype.getProcess = function() {
    var i, id, pd, _i, _ref2;

    if (this.process) {
      return this.process;
    }
    pd = this.ccs.getProcessDefinition(this.processName, this.getArgCount());
    this.process = pd.process.copy();
    if (pd.params) {
      for (i = _i = 0, _ref2 = pd.params.length - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
        id = pd.params[i];
        if (pd.types[i] === CCSTypeChannel) {
          this.process.replaceIdentifier(id, this.valuesToPass[i].variableName);
        } else {
          this.process.replaceIdentifierWithValue(id, this.valuesToPass[i].evaluate());
        }
      }
    }
    return this.process;
  };

  ProcessApplication.prototype.getPrecedence = function() {
    return 12;
  };

  ProcessApplication.prototype.getTypeOfIdentifier = function(identifier, type) {
    var i, pd, _i, _ref2;

    pd = this.ccs.getProcessDefinition(this.processName, this.getArgCount());
    if (pd.params) {
      for (i = _i = 0, _ref2 = pd.params.length - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
        type = CCSGetMostGeneralType(type, this.valuesToPass[i].getType(identifier));
        type = CCSGetMostGeneralType(type, pd.types[i]);
      }
    }
    return type;
  };

  ProcessApplication.prototype.getApplicapleRules = function() {
    return [RecRule];
  };

  ProcessApplication.prototype.getPrefixes = function() {
    return this.getProcess().getPrefixes();
  };

  ProcessApplication.prototype.getExits = function() {
    if (this.process) {
      return this.process.getExits();
    } else {
      return [];
    }
  };

  ProcessApplication.prototype.replaceIdentifierWithValue = function(identifier, value) {
    var e;

    return this.valuesToPass = (function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.valuesToPass;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        e = _ref2[_i];
        _results.push(e.replaceIdentifierWithValue(identifier, value));
      }
      return _results;
    }).call(this);
  };

  ProcessApplication.prototype.replaceIdentifier = function(old, newID) {
    var e, _i, _len, _ref2, _results;

    _ref2 = this.valuesToPass;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      e = _ref2[_i];
      _results.push(e.replaceIdentifier(old, newID));
    }
    return _results;
  };

  /*getProxy: -> 	# ToDo: cache result
  		pd = @ccs.getProcessDefinition(@processName, @getArgCount())
  		new ProcessApplicationProxy(@, pd.process.copy())
  */


  ProcessApplication.prototype.toString = function() {
    var e, result;

    result = this.processName;
    if (this.getArgCount() > 0) {
      result += "[" + (((function() {
        var _i, _len, _ref2, _results;

        _ref2 = this.valuesToPass;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          e = _ref2[_i];
          _results.push(e.toString());
        }
        return _results;
      }).call(this)).join(", ")) + "]";
    }
    return result;
  };

  ProcessApplication.prototype.copy = function() {
    var v;

    return (new ProcessApplication(this.processName, (function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.valuesToPass;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        v = _ref2[_i];
        _results.push(v.copy());
      }
      return _results;
    }).call(this)))._setCCS(this.ccs);
  };

  return ProcessApplication;

})(Process);

Prefix = (function(_super) {
  __extends(Prefix, _super);

  function Prefix(action, process) {
    this.action = action;
    Prefix.__super__.constructor.call(this, process);
  }

  Prefix.prototype.getPrecedence = function() {
    return 12;
  };

  Prefix.prototype.getApplicapleRules = function() {
    return [PrefixRule, OutputRule, InputRule];
  };

  Prefix.prototype.getProcess = function() {
    return this.subprocesses[0];
  };

  Prefix.prototype.replaceIdentifierWithValue = function(identifier, value) {
    this.action.replaceIdentifierWithValue(identifier, value);
    if (this.action.replaceIdentifierWithValue(identifier, value)) {
      return Prefix.__super__.replaceIdentifierWithValue.call(this, identifier, value);
    }
  };

  Prefix.prototype.replaceIdentifier = function(old, newID) {
    this.action.replaceIdentifier(old, newID);
    if (this.action.replaceIdentifier(old, newID)) {
      return Prefix.__super__.replaceIdentifier.call(this, old, newID);
    }
  };

  Prefix.prototype.getPrefixes = function() {
    return [this];
  };

  Prefix.prototype.getTypeOfIdentifier = function(identifier, type) {
    type = CCSGetMostGeneralType(type, this.action.getTypeOfIdentifier(identifier, type));
    if (this.action.isInputAction() && this.action.variable === "identifier") {
      return type;
    }
    return Prefix.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  Prefix.prototype.toString = function() {
    return "" + (this.action.toString()) + "." + (this.stringForSubprocess(this.getProcess()));
  };

  Prefix.prototype.copy = function() {
    return (new Prefix(this.action.copy(), this.getProcess().copy()))._setCCS(this.ccs);
  };

  return Prefix;

})(Process);

Condition = (function(_super) {
  __extends(Condition, _super);

  function Condition(expression, process) {
    this.expression = expression;
    this.process = process;
    Condition.__super__.constructor.call(this, this.process);
  }

  Condition.prototype.getPrecedence = function() {
    return 12;
  };

  Condition.prototype.getApplicapleRules = function() {
    return [CondRule];
  };

  Condition.prototype.toString = function() {
    return "when (" + (this.expression.toString()) + ") " + (this.stringForSubprocess(this.process));
  };

  Condition.prototype.copy = function() {
    return (new Condition(this.expression.copy(), this.process.copy()))._setCCS(this.ccs);
  };

  return Condition;

})(Process);

Choice = (function(_super) {
  __extends(Choice, _super);

  function Choice(left, right) {
    Choice.__super__.constructor.call(this, left, right);
  }

  Choice.prototype.getPrecedence = function() {
    return 9;
  };

  Choice.prototype.getApplicapleRules = function() {
    return [ChoiceLRule, ChoiceRRule];
  };

  Choice.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getLeft())) + " + " + (this.stringForSubprocess(this.getRight()));
  };

  Choice.prototype.copy = function() {
    return (new Choice(this.getLeft().copy(), this.getRight().copy()))._setCCS(this.ccs);
  };

  return Choice;

})(Process);

Parallel = (function(_super) {
  __extends(Parallel, _super);

  function Parallel(left, right) {
    Parallel.__super__.constructor.call(this, left, right);
  }

  Parallel.prototype.getPrecedence = function() {
    return 6;
  };

  Parallel.prototype.getApplicapleRules = function() {
    return [ParLRule, ParRRule, SyncRule, SyncExitRule];
  };

  Parallel.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getLeft())) + " | " + (this.stringForSubprocess(this.getRight()));
  };

  Parallel.prototype.copy = function() {
    return (new Parallel(this.getLeft().copy(), this.getRight().copy()))._setCCS(this.ccs);
  };

  return Parallel;

})(Process);

Sequence = (function(_super) {
  __extends(Sequence, _super);

  function Sequence(left, right) {
    Sequence.__super__.constructor.call(this, left, right);
  }

  Sequence.prototype.getPrecedence = function() {
    return 3;
  };

  Sequence.prototype.getApplicapleRules = function() {
    return [Seq1Rule, Seq2Rule];
  };

  Sequence.prototype.getPrefixes = function() {
    return this.getLeft().getPrefixes();
  };

  Sequence.prototype.getExits = function() {
    return this.getLeft().getExits();
  };

  Sequence.prototype.toString = function() {
    return "" + (this.stringForSubprocess(this.getLeft())) + " ; " + (this.stringForSubprocess(this.getRight()));
  };

  Sequence.prototype.copy = function() {
    return (new Sequence(this.getLeft().copy(), this.getRight().copy()))._setCCS(this.ccs);
  };

  return Sequence;

})(Process);

Restriction = (function(_super) {
  __extends(Restriction, _super);

  function Restriction(process, restrictedActions) {
    this.restrictedActions = restrictedActions;
    Restriction.__super__.constructor.call(this, process);
  }

  Restriction.prototype.getPrecedence = function() {
    return 1;
  };

  Restriction.prototype.getApplicapleRules = function() {
    return [ResRule];
  };

  Restriction.prototype.getProcess = function() {
    return this.subprocesses[0];
  };

  Restriction.prototype.setProcess = function(process) {
    return this.subprocesses[0] = process;
  };

  Restriction.prototype.toString = function() {
    var a;

    return "" + (this.stringForSubprocess(this.getProcess())) + " \\ {" + (((function() {
      var _i, _len, _ref2, _results;

      _ref2 = this.restrictedActions;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        a = _ref2[_i];
        _results.push(a.toString());
      }
      return _results;
    }).call(this)).join(", ")) + "}";
  };

  Restriction.prototype.copy = function() {
    return (new Restriction(this.getProcess().copy(), this.restrictedActions))._setCCS(this.ccs);
  };

  return Restriction;

})(Process);

Channel = (function() {
  function Channel(name, expression) {
    this.name = name;
    this.expression = expression;
  }

  Channel.prototype.isEqual = function(channel) {
    if (channel.name !== this.name) {
      return false;
    }
    if (channel.expression === null && this.expression === null) {
      return true;
    }
    if (channel.expression === null || this.expression === null) {
      return false;
    }
    return channel.expression.evaluate() === this.expression.evaluate();
  };

  Channel.prototype.replaceIdentifierWithValue = function(identifier, value) {
    if (this.expression) {
      return this.expression = this.expression.replaceIdentifierWithValue(identifier, value);
    }
  };

  Channel.prototype.replaceIdentifier = function(old, newID) {
    if (this.name === old) {
      return this.name = newID;
    }
  };

  Channel.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.name === identifier) {
      type = CCSGetMostGeneralType(type, CCSTypeChannel);
    }
    if (this.expression) {
      type = CCSGetMostGeneralType(type, this.expression.getType());
    }
    return type;
  };

  Channel.prototype.toString = function() {
    var result;

    result = "" + this.name;
    if (this.expression) {
      if (this.expression.isEvaluatable()) {
        result += "(" + (this.expression.evaluate()) + ")";
      } else {
        result += "(" + (this.expression.toString()) + ")";
      }
    }
    return result;
  };

  return Channel;

})();

Action = (function() {
  function Action(channel) {
    this.channel = channel;
    if (this.channel === "i") {
      if (!this.isSimpleAction()) {
        throw new Error("Internal channel i is only allowed as simple action!");
      }
      this.channel = CCSInternalChannel;
    } else if (this.channel === "e") {
      if (!this.isSimpleAction()) {
        throw new Error("Exit channel e is only allowed as simple action!");
      }
      this.channel = CCSExitChannel;
    }
  }

  Action.prototype.isSimpleAction = function() {
    return false;
  };

  Action.prototype.isInputAction = function() {
    return false;
  };

  Action.prototype.isMatchAction = function() {
    return false;
  };

  Action.prototype.isOutputAction = function() {
    return false;
  };

  Action.prototype.toString = function() {
    return this.channel.toString();
  };

  Action.prototype.isSyncableWithAction = function(action) {
    return false;
  };

  Action.prototype.replaceIdentifierWithValue = function(identifier, value) {
    this.channel.replaceIdentifierWithValue(identifier, value);
    return true;
  };

  Action.prototype.replaceIdentifier = function(old, newID) {
    return this.channel.replaceIdentifier(old, newID);
  };

  Action.prototype.getTypeOfIdentifier = function(identifier, type) {
    return this.channel.getTypeOfIdentifier(identifier, type);
  };

  return Action;

})();

SimpleAction = (function(_super) {
  __extends(SimpleAction, _super);

  function SimpleAction() {
    _ref2 = SimpleAction.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  SimpleAction.prototype.isSimpleAction = function() {
    return true;
  };

  SimpleAction.prototype.copy = function() {
    return new SimpleAction(this.channel);
  };

  return SimpleAction;

})(Action);

Input = (function(_super) {
  __extends(Input, _super);

  function Input(channel, variable, range) {
    this.variable = variable;
    this.range = range;
    Input.__super__.constructor.call(this, channel);
    this.incommingValue = null;
  }

  Input.prototype.isInputAction = function() {
    return true;
  };

  Input.prototype.supportsValuePassing = function() {
    return typeof this.variable === "string" && this.variable.length > 0;
  };

  Input.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel.isEqual(this.channel) && action.supportsValuePassing() === this.supportsValuePassing();
  };

  Input.prototype.replaceIdentifierWithValue = function(identifier, value) {
    Input.__super__.replaceIdentifierWithValue.call(this, identifier, value);
    return this.variable !== identifier;
  };

  Input.prototype.replaceIdentifier = function(old, newID) {
    Input.__super__.replaceIdentifier.call(this, old, newID);
    return this.variable !== old;
  };

  Input.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.variable === identifier) {
      type = CCSGetMostGeneralType(type, CCSTypeValue);
    }
    return Input.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  Input.prototype.toString = function() {
    return "" + Input.__super__.toString.apply(this, arguments) + "?" + this.variable;
  };

  Input.prototype.copy = function() {
    return new Input(this.channel, this.variable, this.range);
  };

  return Input;

})(Action);

Match = (function(_super) {
  __extends(Match, _super);

  function Match(channel, expression) {
    this.expression = expression;
    Match.__super__.constructor.call(this, channel);
  }

  Match.prototype.isMatchAction = function() {
    return true;
  };

  Match.prototype.supportsValuePassing = function() {
    return true;
  };

  Match.prototype.isSyncableWithAction = function(action) {
    return (action != null ? action.isOutputAction() : void 0) && action.channel.isEqual(this.channel) && action.supportsValuePassing() && action.expression.evaluate() === this.expression.evaluate();
  };

  Match.prototype.replaceIdentifierWithValue = function(identifier, value) {
    Match.__super__.replaceIdentifierWithValue.call(this, identifier, value);
    this.expression = this.expression.replaceIdentifierWithValue(identifier, value);
    return true;
  };

  Match.prototype.replaceIdentifier = function(old, newID) {
    Match.__super__.replaceIdentifier.call(this, old, newID);
    this.expression.replaceIdentifier(old, newID);
    return true;
  };

  Match.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.expression) {
      type = CCSGetMostGeneralType(type, this.expression.getType(identifier));
    }
    return Match.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  Match.prototype.toString = function() {
    return "" + Match.__super__.toString.apply(this, arguments) + "?=" + (this.expression ? this.expression.toString() : "");
  };

  Match.prototype.copy = function() {
    var _ref3;

    return new Match(this.channel, (_ref3 = this.expression) != null ? _ref3.copy() : void 0);
  };

  return Match;

})(Action);

Output = (function(_super) {
  __extends(Output, _super);

  function Output(channel, expression) {
    this.expression = expression;
    Output.__super__.constructor.call(this, channel);
  }

  Output.prototype.isOutputAction = function() {
    return true;
  };

  Output.prototype.supportsValuePassing = function() {
    return this.expression instanceof Expression;
  };

  Output.prototype.isSyncableWithAction = function(action) {
    if ((action != null ? action.isInputAction() : void 0) || action.isMatchAction()) {
      return action.isSyncableWithAction(this);
    } else {
      return false;
    }
  };

  Output.prototype.replaceIdentifierWithValue = function(identifier, value) {
    Output.__super__.replaceIdentifierWithValue.call(this, identifier, value);
    if (this.expression) {
      this.expression = this.expression.replaceIdentifierWithValue(identifier, value);
    }
    return true;
  };

  Output.prototype.replaceIdentifier = function(old, newID) {
    var _ref3;

    Output.__super__.replaceIdentifier.call(this, old, newID);
    if ((_ref3 = this.expression) != null) {
      _ref3.replaceIdentifier(old, newID);
    }
    return true;
  };

  Output.prototype.getTypeOfIdentifier = function(identifier, type) {
    if (this.expression) {
      type = CCSGetMostGeneralType(type, this.expression.getType(identifier));
    }
    return Output.__super__.getTypeOfIdentifier.call(this, identifier, type);
  };

  Output.prototype.toString = function() {
    return "" + Output.__super__.toString.apply(this, arguments) + "!" + (this.expression ? this.expression.toString() : "");
  };

  Output.prototype.copy = function() {
    var _ref3;

    return new Output(this.channel, (_ref3 = this.expression) != null ? _ref3.copy() : void 0);
  };

  return Output;

})(Action);

Expression = (function() {
  function Expression() {
    var subExps;

    subExps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.subExps = subExps;
  }

  Expression.prototype.getLeft = function() {
    return this.subExps[0];
  };

  Expression.prototype.getRight = function() {
    return this.subExps[1];
  };

  Expression.prototype.replaceIdentifierWithValue = function(identifier, value) {
    var exp;

    this.subExps = (function() {
      var _i, _len, _ref3, _results;

      _ref3 = this.subExps;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        exp = _ref3[_i];
        _results.push(exp.replaceIdentifierWithValue(identifier, value));
      }
      return _results;
    }).call(this);
    return this;
  };

  Expression.prototype.replaceIdentifier = function(old, newID) {
    var exp, _i, _len, _ref3, _results;

    _ref3 = this.subExps;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      exp = _ref3[_i];
      _results.push(exp.replaceIdentifier(old, newID));
    }
    return _results;
  };

  Expression.prototype.usesIdentifier = function(identifier) {
    var e, result, _i, _len, _ref3;

    result = false;
    _ref3 = this.subExps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      e = _ref3[_i];
      result || e.usesIdentifier();
    }
    return result;
  };

  Expression.prototype.getType = function(identifier) {
    if (this.usesIdentifier(identifier)) {
      CCSTypeValue;
    }
    return CCSTypeUnknown;
  };

  Expression.prototype.evaluate = function() {
    throw new Error("Abstract method!");
  };

  Expression.prototype.isEvaluatable = function() {
    return false;
  };

  Expression.prototype.needsBracketsForSubExp = function(exp) {
    return (this.getPrecedence != null) && (exp.getPrecedence != null) && exp.getPrecedence() < this.getPrecedence();
  };

  Expression.prototype.stringForSubExp = function(exp) {
    if (this.needsBracketsForSubExp(exp)) {
      return "(" + (exp.toString()) + ")";
    } else {
      return "" + (exp.toString());
    }
  };

  Expression.prototype.toString = function() {
    throw new Error("Abstract method not implemented!");
  };

  Expression.prototype.copy = function() {
    throw new Error("Abstract method not implemented!");
  };

  return Expression;

})();

ConstantExpression = (function(_super) {
  __extends(ConstantExpression, _super);

  function ConstantExpression(value) {
    this.value = value;
    ConstantExpression.__super__.constructor.call(this);
  }

  ConstantExpression.prototype.getPrecedence = function() {
    return 18;
  };

  ConstantExpression.prototype.evaluate = function() {
    if (typeof this.value === "boolean") {
      if (this.value === true) {
        return 1;
      } else {
        return 0;
      }
    } else {
      return this.value;
    }
  };

  ConstantExpression.prototype.isEvaluatable = function() {
    return true;
  };

  ConstantExpression.prototype.toString = function() {
    if (typeof this.value === "string") {
      return '"' + this.value + '"';
    } else {
      return "" + this.value;
    }
  };

  ConstantExpression.prototype.copy = function() {
    return new ConstantExpression(this.value);
  };

  return ConstantExpression;

})(Expression);

VariableExpression = (function(_super) {
  __extends(VariableExpression, _super);

  function VariableExpression(variableName) {
    this.variableName = variableName;
    VariableExpression.__super__.constructor.call(this);
  }

  VariableExpression.prototype.getPrecedence = function() {
    return 18;
  };

  VariableExpression.prototype.replaceIdentifierWithValue = function(identifier, value) {
    if (identifier === this.variableName) {
      return new ConstantExpression(value);
    } else {
      return this;
    }
  };

  VariableExpression.prototype.replaceIdentifier = function(old, newID) {
    if (this.variableName === old) {
      return this.variableName = newID;
    }
  };

  VariableExpression.prototype.evaluate = function() {
    throw new Error('Unbound identifier!');
  };

  VariableExpression.prototype.isEvaluatable = function() {
    return false;
  };

  VariableExpression.prototype.toString = function() {
    return this.variableName;
  };

  VariableExpression.prototype.copy = function() {
    return new VariableExpression(this.variableName);
  };

  return VariableExpression;

})(Expression);

AdditiveExpression = (function(_super) {
  __extends(AdditiveExpression, _super);

  function AdditiveExpression(left, right, op) {
    this.op = op;
    AdditiveExpression.__super__.constructor.call(this, left, right);
  }

  AdditiveExpression.prototype.getPrecedence = function() {
    return 15;
  };

  AdditiveExpression.prototype.evaluate = function() {
    var l, r;

    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    if (this.op === "+") {
      return l + r;
    } else if (this.op === "-") {
      return l - r;
    } else {
      throw new Error("Invalid operator!");
    }
  };

  AdditiveExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  AdditiveExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  AdditiveExpression.prototype.copy = function() {
    return new AdditiveExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return AdditiveExpression;

})(Expression);

MultiplicativeExpression = (function(_super) {
  __extends(MultiplicativeExpression, _super);

  function MultiplicativeExpression(left, right, op) {
    this.op = op;
    MultiplicativeExpression.__super__.constructor.call(this, left, right);
  }

  MultiplicativeExpression.prototype.getPrecedence = function() {
    return 12;
  };

  MultiplicativeExpression.prototype.evaluate = function() {
    var l, r;

    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    if (this.op === "*") {
      return l * r;
    } else if (this.op === "/") {
      return Math.floor(l / r);
    } else {
      throw new Error("Invalid operator!");
    }
  };

  MultiplicativeExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  MultiplicativeExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  MultiplicativeExpression.prototype.copy = function() {
    return new MultiplicativeExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return MultiplicativeExpression;

})(Expression);

ConcatenatingExpression = (function(_super) {
  __extends(ConcatenatingExpression, _super);

  function ConcatenatingExpression(left, right, op) {
    this.op = op;
    ConcatenatingExpression.__super__.constructor.call(this, left, right);
  }

  ConcatenatingExpression.prototype.getPrecedence = function() {
    return 9;
  };

  ConcatenatingExpression.prototype.evaluate = function() {
    return "" + this.getLeft().evaluate() + this.getRight().evaluate();
  };

  ConcatenatingExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  ConcatenatingExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + "^" + this.stringForSubExp(this.getRight());
  };

  ConcatenatingExpression.prototype.copy = function() {
    return new ConcatenatingExpression(this.getLeft().copy(), this.getRight().copy());
  };

  return ConcatenatingExpression;

})(Expression);

RelationalExpression = (function(_super) {
  __extends(RelationalExpression, _super);

  function RelationalExpression(left, right, op) {
    this.op = op;
    RelationalExpression.__super__.constructor.call(this, left, right);
  }

  RelationalExpression.prototype.getPrecedence = function() {
    return 6;
  };

  RelationalExpression.prototype.evaluate = function() {
    var l, r;

    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    if (this.op === "<") {
      return l < r;
    } else if (this.op === "<=") {
      return l <= r;
    } else if (this.op === ">") {
      return l > r;
    } else if (this.op === ">=") {
      return l >= r;
    } else {
      throw new Error("Invalid operator!");
    }
  };

  RelationalExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  RelationalExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  RelationalExpression.prototype.copy = function() {
    return new RelationalExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return RelationalExpression;

})(Expression);

EqualityExpression = (function(_super) {
  __extends(EqualityExpression, _super);

  function EqualityExpression(left, right, op) {
    this.op = op;
    EqualityExpression.__super__.constructor.call(this, left, right);
  }

  EqualityExpression.prototype.getPrecedence = function() {
    return 3;
  };

  EqualityExpression.prototype.evaluate = function() {
    var l, r;

    l = parseInt(this.getLeft().evaluate());
    r = parseInt(this.getRight().evaluate());
    if (this.op === "==") {
      return l === r;
    } else if (this.op === "!=") {
      return l !== r;
    } else {
      throw new Error("Invalid operator!");
    }
  };

  EqualityExpression.prototype.isEvaluatable = function() {
    return this.getLeft().isEvaluatable() && this.getRight().isEvaluatable();
  };

  EqualityExpression.prototype.toString = function() {
    return this.stringForSubExp(this.getLeft()) + this.op + this.stringForSubExp(this.getRight());
  };

  EqualityExpression.prototype.copy = function() {
    return new EqualityExpression(this.getLeft().copy(), this.getRight().copy(), this.op);
  };

  return EqualityExpression;

})(Expression);

ActionSets = {
  isActionInK: function(action) {
    return ActionSets.isActionInCom(action) && action.isSimpleAction();
  },
  isActionInCom: function(action) {
    return ActionSets.isActionInAct(action) && action.channel !== CCSInternalChannel;
  },
  isActionInAct: function(action) {
    return ActionSets.isActionInActPlus(action) && action.channel !== CCSExitChannel;
  },
  isActionInActPlus: function(action) {
    return !action.supportsValuePassing();
  },
  isActionInComVP: function(action) {
    return ActionSets.isActionInActVP(action) && action.channel !== CCSInternalChannel;
  },
  isActionInActVP: function(action) {
    return action.channel !== CCSExitChannel;
  },
  isActionInActVPPlus: function(action) {
    return true;
  }
};

Array.prototype.filterKSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInK(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInCom(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInAct(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActPlusSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInActPlus(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterComVPSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInComVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPSteps = function() {
  var filter;

  filter = function(step) {
    return ActionSets.isActionInActVP(step.action);
  };
  return this.filter(filter);
};

Array.prototype.filterActVPPlusSteps = function() {
  return this;
};

String.prototype.replaceAll = function(needle, replacement) {
	var t = this
	var tt = this
	do {
		t = tt;
		tt = t.replace(needle, replacement);
	} while (t != tt);
	return t;
}

Array.prototype.concatChildren = function() {
	if (this.length == 0)
		return [];
	var result = this.shift().concat([]);	// Result should always be a copy
	while (this.length > 0) {
		result = result.concat(this.shift());
	}
	return result;
}

Array.prototype.joinChildren = function(separator) {
	var result = [];
	var i = 0;
	while(true) {
		var joinTarget = [];
		for (var c = 0; c < this.length; c++) {
			if (this[c][i]) joinTarget.push(this[c][i]);
		}
		if (joinTarget.length == 0)
			break;
		result[i++] = joinTarget.join(separator);
	}
	return result;
};

CCSStep = (function() {
  function CCSStep() {
    var action, actionDetails, index, process, rule, s, substeps, _i, _len, _ref3;

    index = arguments[0], process = arguments[1], action = arguments[2], rule = arguments[3], actionDetails = arguments[4], substeps = 6 <= arguments.length ? __slice.call(arguments, 5) : [];
    this.index = index;
    this.process = process;
    this.action = action;
    this.rule = rule;
    this.actionDetails = actionDetails;
    this.substeps = substeps;
    _ref3 = this.substeps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      s = _ref3[_i];
      if (s === void 0 || s === null) {
        throw "substep must not be nil!";
      }
    }
    if (!this.actionDetails) {
      this.actionDetails = this.substeps.length === 1 ? this.substeps[0].actionDetails : "";
    }
  }

  CCSStep.prototype.getLeaveProcesses = function() {
    var step;

    if (this.substeps.length === 0) {
      return [this.process];
    } else {
      return ((function() {
        var _i, _len, _ref3, _results;

        _ref3 = this.substeps;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          step = _ref3[_i];
          _results.push(step.getLeaveProcesses());
        }
        return _results;
      }).call(this)).concatChildren();
    }
  };

  CCSStep.prototype.perform = function() {
    return this.rule.performStep(this);
  };

  CCSStep.prototype.toString = function() {
    return this.action.toString() + (this.actionDetails.length > 0 ? " " + this.actionDetails : "");
  };

  return CCSStep;

})();

CCSBaseStep = (function(_super) {
  __extends(CCSBaseStep, _super);

  function CCSBaseStep(prefix, rule) {
    CCSBaseStep.__super__.constructor.call(this, 0, prefix, prefix.action, rule);
  }

  return CCSBaseStep;

})(CCSStep);

PrefixRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isSimpleAction() : void 0) || !prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.getProcess();
  }
};

OutputRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isOutputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.getProcess();
  }
};

InputRule = {
  getPossibleSteps: function(prefix) {
    if ((prefix != null ? prefix.action.isInputAction() : void 0) && prefix.action.supportsValuePassing()) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    var result;

    if (step.process.action.incommingValue === void 0) {
      throw new Error("Input action's incomming value was not set!");
    }
    result = step.process.getProcess();
    result.replaceIdentifierWithValue(step.process.action.variable, step.process.action.incommingValue);
    return result;
  }
};

MatchRule = {
  getPossibleSteps: function(prefix) {
    if (prefix != null ? prefix.action.isMatchAction() : void 0) {
      return [new CCSBaseStep(prefix, this)];
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.process.getProcess();
  }
};

ChoiceLRule = {
  getPossibleSteps: function(choice) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = choice.getLeft().getPossibleSteps().filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, choice, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

ChoiceRRule = {
  getPossibleSteps: function(choice) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = choice.getRight().getPossibleSteps().filterActVPPlusSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, choice, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

ParLRule = {
  getPossibleSteps: function(parallel) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = parallel.getLeft().getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, parallel, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    step.process.setLeft(step.substeps[0].perform());
    return step.process;
  }
};

ParRRule = {
  getPossibleSteps: function(parallel) {
    var i, step, _i, _len, _ref3, _results;

    i = 0;
    _ref3 = parallel.getRight().getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(i++, parallel, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    step.process.setRight(step.substeps[0].perform());
    return step.process;
  }
};

SyncRule = {
  filterStepsSyncableWithStep: function(step, steps) {
    var result, s, _i, _len;

    result = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      s = steps[_i];
      if (s.action.isSyncableWithAction(step.action)) {
        result.push(s);
      }
    }
    return result;
  },
  getPossibleSteps: function(parallel) {
    var c, l, left, r, result, right, _i, _j, _len, _len1, _right;

    left = parallel.getLeft().getPossibleSteps();
    right = parallel.getRight().getPossibleSteps();
    result = [];
    c = 0;
    for (_i = 0, _len = left.length; _i < _len; _i++) {
      l = left[_i];
      _right = SyncRule.filterStepsSyncableWithStep(l, right);
      for (_j = 0, _len1 = _right.length; _j < _len1; _j++) {
        r = _right[_j];
        result.push(new CCSStep(c++, parallel, new SimpleAction(CCSInternalChannel), this, "[" + (l.toString()) + ", " + (r.toString()) + "]", l, r));
      }
    }
    return result;
  },
  performStep: function(step) {
    var inp, out, prefix;

    inp = null;
    out = null;
    prefix = step.substeps[0].getLeaveProcesses()[0];
    if (prefix.action.supportsValuePassing()) {
      if (prefix.action.isInputAction()) {
        inp = prefix;
        out = step.substeps[1].getLeaveProcesses()[0];
      } else {
        out = prefix;
        inp = step.substeps[1].getLeaveProcesses()[0];
      }
      inp.action.incommingValue = out.action.expression.evaluate();
    }
    step.process.setLeft(step.substeps[0].perform());
    step.process.setRight(step.substeps[1].perform());
    return step.process;
  }
};

ResRule = {
  shouldRestrictChannel: function(chan, restr) {
    if (chan === CCSInternalChannel || chan === CCSExitChannel) {
      return false;
    }
    if (restr.length === 0) {
      return false;
    }
    if (restr[0] === "*") {
      return true;
    }
    return restr.indexOf(chan) !== -1;
  },
  getPossibleSteps: function(restriction) {
    var a, c, restr, result, step, steps, _i, _len;

    steps = restriction.getProcess().getPossibleSteps().filterActVPPlusSteps();
    result = [];
    c = 0;
    restr = (function() {
      var _i, _len, _ref3, _results;

      _ref3 = restriction.restrictedActions;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        a = _ref3[_i];
        _results.push(a.channel);
      }
      return _results;
    })();
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      if (!this.shouldRestrictChannel(step.action.channel.name, restr)) {
        result.push(new CCSStep(c++, restriction, step.action, this, null, step));
      }
    }
    return result;
  },
  performStep: function(step) {
    step.process.setProcess(step.substeps[0].perform());
    return step.process;
  }
};

CondRule = {
  getPossibleSteps: function(condition) {
    if (condition.expression.evaluate()) {
      return condition.process.getPossibleSteps().filterActVPPlusSteps();
    } else {
      return [];
    }
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

ExitRule = {
  getPossibleSteps: function(exit) {
    return [new CCSStep(0, exit, new SimpleAction(CCSExitChannel), this)];
  },
  performStep: function(step) {
    return new Stop();
  }
};

SyncExitRule = {
  getPossibleSteps: function(parallel) {
    var c, filter, l, left, r, result, right, _i, _j, _len, _len1;

    filter = function(step) {
      return step.action.channel === CCSExitChannel;
    };
    left = parallel.getLeft().getPossibleSteps().filter(filter);
    right = parallel.getRight().getPossibleSteps().filter(filter);
    c = 0;
    result = [];
    for (_i = 0, _len = left.length; _i < _len; _i++) {
      l = left[_i];
      for (_j = 0, _len1 = right.length; _j < _len1; _j++) {
        r = right[_j];
        result.push(new CCSStep(c++, parallel, new SimpleAction(CCSExitChannel), this, "[" + (l.toString()) + ", " + (r.toString()) + "]", l, r));
      }
    }
    return result;
  },
  performStep: function(step) {
    return SyncRule.performStep(step);
  }
};

Seq1Rule = {
  getPossibleSteps: function(sequence) {
    var c, step, _i, _len, _ref3, _results;

    c = 0;
    _ref3 = sequence.getLeft().getPossibleSteps().filterActVPSteps();
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      step = _ref3[_i];
      _results.push(new CCSStep(c++, sequence, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    step.process.setLeft(step.substeps[0].perform());
    return step.process;
  }
};

Seq2Rule = {
  getPossibleSteps: function(sequence) {
    var c, filter, result, rho, rhos, _i, _len;

    filter = function(step) {
      return step.action.channel === CCSExitChannel;
    };
    rhos = sequence.getLeft().getPossibleSteps().filter(filter);
    result = [];
    c = 0;
    for (_i = 0, _len = rhos.length; _i < _len; _i++) {
      rho = rhos[_i];
      result.push(new CCSStep(c++, sequence, new SimpleAction(CCSInternalChannel), this, "[" + CCSExitChannel + "]", rho));
    }
    return result;
  },
  performStep: function(step) {
    return step.process.getRight();
  }
};

RecRule = {
  getPossibleSteps: function(application) {
    var c, step, steps, _i, _len, _results;

    steps = application.getProcess().getPossibleSteps();
    c = 0;
    _results = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      _results.push(new CCSStep(c++, application, step.action, this, null, step));
    }
    return _results;
  },
  performStep: function(step) {
    return step.substeps[0].perform();
  }
};

CCSProcessCreateView = function(stepView, process, needsBrackets) {
  if (process instanceof Prefix) {
    if (process.action.isInputAction() && process.action.supportsValuePassing()) {
      return new CCSInputView(stepView, process);
    } else {
      return new CCSPrefixView(stepView, process);
    }
  } else if (process instanceof Condition) {
    return new CCSConditionView(stepView, process);
  } else if (process instanceof Stop) {
    return new CCSStopView(stepView, process);
  } else if (process instanceof Exit) {
    return new CCSExitView(stepView, process);
  } else if (process instanceof ProcessApplication) {
    return new CCSProcessApplicationView(stepView, process);
  } else if (process instanceof Choice) {
    return new CCSChoiceView(stepView, process, needsBrackets);
  } else if (process instanceof Parallel) {
    return new CCSParallelView(stepView, process, needsBrackets);
  } else if (process instanceof Sequence) {
    return new CCSSequenceView(stepView, process, needsBrackets);
  } else if (process instanceof Restriction) {
    return new CCSRestrictionView(stepView, process, needsBrackets);
  } else {
    throw new Error("Process view could not be created for unknown process!");
  }
};

CCSProcessView = (function() {
  function CCSProcessView() {
    var needsBrackets, process, stepView, subviews;

    stepView = arguments[0], process = arguments[1], needsBrackets = arguments[2], subviews = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.stepView = stepView;
    this.process = process;
    this.needsBrackets = needsBrackets;
    this.subviews = subviews;
  }

  CCSProcessView.prototype.setPossibleSteps = function(steps) {
    var v, _i, _len, _ref3, _results;

    _ref3 = this.subviews;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      v = _ref3[_i];
      _results.push(v.setPossibleSteps(steps));
    }
    return _results;
  };

  CCSProcessView.prototype.setPossibleSyncableSteps = function(steps) {
    var v, _i, _len, _ref3, _results;

    _ref3 = this.subviews;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      v = _ref3[_i];
      _results.push(v.setPossibleSyncableSteps(steps));
    }
    return _results;
  };

  CCSProcessView.prototype.removeView = function() {
    var _ref3;

    return (_ref3 = this.span) != null ? _ref3.parentNode.removeChild(this.span) : void 0;
  };

  return CCSProcessView;

})();

CCSStopView = (function(_super) {
  __extends(CCSStopView, _super);

  function CCSStopView(stepView, stop) {
    CCSStopView.__super__.constructor.call(this, stepView, stop, false);
  }

  CCSStopView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    t = document.createTextNode("0");
    this.span.appendChild(t);
    return this.span;
  };

  return CCSStopView;

})(CCSProcessView);

CCSExitView = (function(_super) {
  __extends(CCSExitView, _super);

  function CCSExitView(stepView, exit) {
    CCSExitView.__super__.constructor.call(this, stepView, exit, false);
  }

  CCSExitView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.a = document.createElement("A");
    this.span.appendChild(this.a);
    this.a.setAttribute("HREF", "javascript:void(0)");
    this.a.__this = this;
    this._setEnabled(false);
    t = document.createTextNode("1");
    this.a.appendChild(t);
    return this.span;
  };

  CCSExitView.prototype._setEnabled = function(enabled) {
    if (!this.a) {
      return;
    }
    if (enabled) {
      this.a.setAttribute("CLASS", "ccs_step");
      return this.a.addEventListener("click", this._handleClick);
    } else {
      this.a.setAttribute("CLASS", "ccs_step disabled");
      return this.a.removeEventListener("click", this._handleClick);
    }
  };

  CCSExitView.prototype.setPossibleSteps = function(steps) {
    var p, s, _i, _len, _ref3;

    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (p === this.process) {
        this.steps.push([p, s]);
      }
    }
    return this._setEnabled(this.steps.length > 0);
  };

  CCSExitView.prototype.setPossibleSyncableSteps = function(steps) {
    return this.setPossibleSteps(steps);
  };

  CCSExitView.prototype._handleClick = function(event) {
    return this.__this.stepView._handleExitSelection(this.__this);
  };

  return CCSExitView;

})(CCSProcessView);

CCSProcessApplicationView = (function(_super) {
  __extends(CCSProcessApplicationView, _super);

  function CCSProcessApplicationView(stepView, application) {
    CCSProcessApplicationView.__super__.constructor.call(this, stepView, application, false);
  }

  CCSProcessApplicationView.prototype.getNode = function() {
    var sup;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    sup = document.createElement("SUP");
    this.span.appendChild(sup);
    this.toggleA = document.createElement("A");
    sup.appendChild(this.toggleA);
    this.toggleA.setAttribute("HREF", "javascript:void(0)");
    this.toggleA.setAttribute("CLASS", "ccs_toggle_process");
    this.toggleA.innerHTML = "\u21e3";
    this.toggleA.__this = this;
    this.toggleA.addEventListener("click", this._handleClick);
    this._setEnabled(false);
    this.subspan = document.createElement("SPAN");
    this.span.appendChild(this.subspan);
    this.badge = document.createElement("SUP");
    this.steps = [];
    this.setShowsProcess(false);
    this.span.appendChild(this.badge);
    this.badge.setAttribute("CLASS", "ccs_badge");
    this._setBadge(0);
    return this.span;
  };

  CCSProcessApplicationView.prototype._setEnabled = function(enabled) {
    if (enabled) {
      return this.toggleA.style.display = "inline";
    }
    return this.toggleA.style.display = "none";
  };

  CCSProcessApplicationView.prototype._setBadge = function(num) {
    this.badge.style.display = num <= 0 ? "none" : "inline";
    return this.badge.innerHTML = num;
  };

  CCSProcessApplicationView.prototype.setShowsProcess = function(flag) {
    if (flag === this.showsProcess) {
      return;
    }
    this.showsProcess = flag;
    this.subspan.innerHTML = "";
    if (flag) {
      if (!this.subviews[0]) {
        this.subviews[0] = CCSProcessCreateView(this.stepView, this.process.getProcess(), false);
      }
      this.subspan.appendChild(this.subviews[0].getNode());
      this._setBadge(0);
      this.toggleA.innerHTML = "\u21e1";
      return this.setPossibleSteps(this.steps, true);
    } else {
      this.subspan.appendChild(document.createTextNode(this.process.toString()));
      this._setBadge(this.steps.length);
      return this.toggleA.innerHTML = "\u21e3";
    }
  };

  CCSProcessApplicationView.prototype._isProcessResponsibleForStep = function(step) {
    var s, _i, _len, _ref3;

    if (step.process === this.process) {
      return true;
    }
    _ref3 = step.substeps;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      s = _ref3[_i];
      if (this._isProcessResponsibleForStep(s)) {
        return true;
      }
    }
    return false;
  };

  CCSProcessApplicationView.prototype.setPossibleSteps = function(steps, superonly) {
    var exits, p, prefixes, s, _i, _len, _ref3;

    if (superonly == null) {
      superonly = false;
    }
    if (superonly) {
      return CCSProcessApplicationView.__super__.setPossibleSteps.call(this, steps);
    }
    this._setEnabled(steps.length > 0);
    prefixes = this.process.getPrefixes();
    exits = this.process.getExits();
    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (prefixes.indexOf(p) !== -1 || exits.indexOf(p) !== -1) {
        this.steps.push([p, s]);
      }
    }
    if (this.showsProcess) {
      return CCSProcessApplicationView.__super__.setPossibleSteps.call(this, steps);
    }
    return this._setBadge(this.steps.length);
  };

  CCSProcessApplicationView.prototype._handleClick = function(event) {
    return this.__this.setShowsProcess(!this.__this.showsProcess);
  };

  return CCSProcessApplicationView;

})(CCSProcessView);

/* - CCSProcessApplicationProxyView
class CCSProcessApplicationProxyView extends CCSProcessView
	constructor: (stepView, proxy, needsBrackets) ->
		super stepView, proxy, false, CCSProcessCreateView(stepView, proxy.subprocess, needsBrackets)
	getNode: ->
		return @span if @span
		@span = document.createElement("SPAN")
		sup = document.createElement("SUP")
		@span.appendChild(sup)
		@toggleA = document.createElement("A")
		sup.appendChild(@toggleA)
		@toggleA.setAttribute("HREF", "javascript:void(0)")
		@toggleA.setAttribute("CLASS", "ccs_toggle_process")
		@toggleA.innerHTML = "\u21e1"
		@toggleA.__this = @
		@toggleA.addEventListener("click", @_handleClick)
		@_setEnabled(false)
		@subSpan = @subviews[0].getNode()
		@span.appendChild(@subSpan)
		return @span
	_setEnabled: (enabled) ->
		return @toggleA.style.display = "inline" if enabled
		@toggleA.style.display = "none"
	setPossibleSteps: (steps) -> 
		super steps
		@steps = []
		(
			@steps.push([p,s]) if p == @process
		) for [p, s] in steps
		@_setEnabled(@steps.length > 0)
	_handleClick: (event) -> this.__this.stepView._handleProcessCollapse(this.__this)
*/


CCSPrefixView = (function(_super) {
  __extends(CCSPrefixView, _super);

  function CCSPrefixView(stepView, prefix) {
    CCSPrefixView.__super__.constructor.call(this, stepView, prefix, false, CCSProcessCreateView(stepView, prefix.getProcess()));
    this.allowsInternalActions = true;
  }

  CCSPrefixView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.a = document.createElement("A");
    this.span.appendChild(this.a);
    this.a.setAttribute("HREF", "javascript:void(0)");
    this.a.__this = this;
    this._setEnabled(false);
    t = document.createTextNode(this.process.action.toString());
    this.a.appendChild(t);
    t = document.createTextNode(".");
    this.span.appendChild(t);
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    return this.span;
  };

  CCSPrefixView.prototype._setEnabled = function(enabled) {
    if (!this.a) {
      return;
    }
    if (enabled) {
      this.a.setAttribute("CLASS", "ccs_step");
      return this.a.addEventListener("click", this._handleClick);
    } else {
      this.a.setAttribute("CLASS", "ccs_step disabled");
      return this.a.removeEventListener("click", this._handleClick);
    }
  };

  CCSPrefixView.prototype.setPossibleSteps = function(steps) {
    var p, s, _i, _len, _ref3;

    this.steps = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      _ref3 = steps[_i], p = _ref3[0], s = _ref3[1];
      if (p === this.process && (this.allowsInternalActions || s.action.channel !== CCSInternalChannel)) {
        this.steps.push([p, s]);
      }
    }
    return this._setEnabled(this.steps.length > 0);
  };

  CCSPrefixView.prototype.setPossibleSyncableSteps = function(steps) {
    return this.setPossibleSteps(steps);
  };

  CCSPrefixView.prototype._handleClick = function(event) {
    return this.__this.stepView._handleActionSelection(this.__this);
  };

  return CCSPrefixView;

})(CCSProcessView);

CCSInputView = (function(_super) {
  __extends(CCSInputView, _super);

  function CCSInputView(stepView, prefix) {
    CCSInputView.__super__.constructor.call(this, stepView, prefix);
  }

  CCSInputView.prototype.getNode = function() {
    CCSInputView.__super__.getNode.apply(this, arguments);
    /*
    		@input = document.createElement("INPUT")
    		equals = document.createTextNode("=")
    		dot = @a.nextSibling
    		@span.insertBefore(equals, dot)
    		@span.insertBefore(@input, dot)
    		@input.setAttribute("CLASS", "ccs_input")
    */

    return this.span;
  };

  return CCSInputView;

})(CCSPrefixView);

CCSConditionView = (function(_super) {
  __extends(CCSConditionView, _super);

  function CCSConditionView(stepView, condition) {
    CCSConditionView.__super__.constructor.call(this, stepView, condition, false, CCSProcessCreateView(stepView, condition.process));
  }

  CCSConditionView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    t = document.createTextNode("when (" + (this.process.expression.toString()) + ") ");
    this.span.appendChild(t);
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    return this.span;
  };

  return CCSConditionView;

})(CCSProcessView);

CCSChoiceView = (function(_super) {
  __extends(CCSChoiceView, _super);

  function CCSChoiceView(stepView, choice, needsBrackets) {
    var lv, rv;

    lv = CCSProcessCreateView(stepView, choice.getLeft(), choice.needsBracketsForSubprocess(choice.getLeft()));
    rv = CCSProcessCreateView(stepView, choice.getRight(), choice.needsBracketsForSubprocess(choice.getRight()));
    CCSChoiceView.__super__.constructor.call(this, stepView, choice, needsBrackets, lv, rv);
  }

  CCSChoiceView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.leftSpan = this.subviews[0].getNode();
    this.rightSpan = this.subviews[1].getNode();
    this.span.appendChild(this.leftSpan);
    t = document.createTextNode(" + ");
    this.span.appendChild(t);
    this.span.appendChild(this.rightSpan);
    return this.span;
  };

  return CCSChoiceView;

})(CCSProcessView);

CCSParallelView = (function(_super) {
  __extends(CCSParallelView, _super);

  function CCSParallelView(stepView, parallel, needsBrackets) {
    var lv, rv;

    lv = CCSProcessCreateView(stepView, parallel.getLeft(), parallel.needsBracketsForSubprocess(parallel.getLeft()));
    rv = CCSProcessCreateView(stepView, parallel.getRight(), parallel.needsBracketsForSubprocess(parallel.getRight()));
    CCSParallelView.__super__.constructor.call(this, stepView, parallel, needsBrackets, lv, rv);
  }

  CCSParallelView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    if (this.needsBrackets) {
      this.span.appendChild(document.createTextNode("("));
    }
    this.leftSpan = this.subviews[0].getNode();
    this.rightSpan = this.subviews[1].getNode();
    this.span.appendChild(this.leftSpan);
    t = document.createTextNode(" | ");
    this.span.appendChild(t);
    this.span.appendChild(this.rightSpan);
    if (this.needsBrackets) {
      this.span.appendChild(document.createTextNode(")"));
    }
    return this.span;
  };

  return CCSParallelView;

})(CCSProcessView);

CCSSequenceView = (function(_super) {
  __extends(CCSSequenceView, _super);

  function CCSSequenceView(stepView, sequence, needsBrackets) {
    CCSSequenceView.__super__.constructor.call(this, stepView, sequence, needsBrackets, CCSProcessCreateView(stepView, sequence.getLeft()), CCSProcessCreateView(this.stepView, sequence.getRight()));
  }

  CCSSequenceView.prototype.getNode = function() {
    var t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.leftSpan = this.subviews[0].getNode();
    this.rightSpan = this.subviews[1].getNode();
    this.span.appendChild(this.leftSpan);
    t = document.createTextNode(" ; ");
    this.span.appendChild(t);
    this.span.appendChild(this.rightSpan);
    return this.span;
  };

  CCSSequenceView.prototype.setPossibleSteps = function(steps) {
    return this.subviews[0].setPossibleSteps(steps);
  };

  return CCSSequenceView;

})(CCSProcessView);

CCSRestrictionView = (function(_super) {
  __extends(CCSRestrictionView, _super);

  function CCSRestrictionView(stepView, restriction, needsBrackets) {
    CCSRestrictionView.__super__.constructor.call(this, stepView, restriction, needsBrackets, CCSProcessCreateView(stepView, restriction.getProcess()));
  }

  CCSRestrictionView.prototype.getNode = function() {
    var a, t;

    if (this.span) {
      return this.span;
    }
    this.span = document.createElement("SPAN");
    this.subSpan = this.subviews[0].getNode();
    this.span.appendChild(this.subSpan);
    t = document.createTextNode(" \\ {" + (((function() {
      var _i, _len, _ref3, _results;

      _ref3 = this.process.restrictedActions;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        a = _ref3[_i];
        _results.push(a.toString());
      }
      return _results;
    }).call(this)).join(", ")) + "}");
    this.span.appendChild(t);
    return this.span;
  };

  return CCSRestrictionView;

})(CCSProcessView);

CCSStepView = (function() {
  function CCSStepView(ccs) {
    this.ccs = ccs;
    this.syncableSteps = null;
  }

  CCSStepView.prototype.getNode = function() {
    if (this.p) {
      return this.p;
    }
    this.p = document.createElement("P");
    this.p.setAttribute("CLASS", "ccs_view");
    this.system = this.ccs.system.copy();
    this.rootView = CCSProcessCreateView(this, this.system);
    this.p.appendChild(this.rootView.getNode());
    this._updatePossibleSteps();
    return this.p;
  };

  CCSStepView.prototype._setPossibleSteps = function(steps) {
    var p, s;

    this.steps = ((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        s = steps[_i];
        _results.push((function() {
          var _j, _len1, _ref3, _results1;

          _ref3 = s.getLeaveProcesses();
          _results1 = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            p = _ref3[_j];
            _results1.push([p, s]);
          }
          return _results1;
        })());
      }
      return _results;
    })()).concatChildren();
    return this.rootView.setPossibleSteps(this.steps);
  };

  CCSStepView.prototype._setPossibleSyncableSteps = function(steps) {
    var p, s;

    this.syncableSteps = ((function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        s = steps[_i];
        _results.push((function() {
          var _j, _len1, _ref3, _results1;

          _ref3 = s.getLeaveProcesses();
          _results1 = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            p = _ref3[_j];
            _results1.push([p, s]);
          }
          return _results1;
        })());
      }
      return _results;
    })()).concatChildren();
    return this.rootView.setPossibleSteps(this.syncableSteps);
  };

  CCSStepView.prototype._handleActionSelection = function(prefixView) {
    var p, s;

    this.prefixView = prefixView;
    if (this.syncableSteps) {
      this.prefixView.allowsInternalActions = true;
      this.syncableSteps = null;
      if (this.prefixView.steps.length !== 1) {
        console.warn("Prefix view has more than one possible step: " + this.prefixView.steps);
      }
      this.system = this.prefixView.steps[0][1].perform();
      return this._checkSystemChanges();
    } else {
      this.prefixView.allowsInternalActions = false;
      return this._setPossibleSyncableSteps((function() {
        var _i, _len, _ref3, _ref4, _results;

        _ref3 = this.prefixView.steps;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          _ref4 = _ref3[_i], p = _ref4[0], s = _ref4[1];
          _results.push(s);
        }
        return _results;
      }).call(this));
    }
  };

  CCSStepView.prototype._handleExitSelection = function(exitView) {
    if (exitView.steps.length !== 1) {
      console.warn("Exit view has more than one possible step: " + exitView.steps);
    }
    this.system = exitView.steps[0][1].perform();
    return this._checkSystemChanges();
  };

  CCSStepView.prototype._checkSystemChanges = function() {
    this.rootView.removeView();
    this.rootView = CCSProcessCreateView(this, this.system);
    this.p.appendChild(this.rootView.getNode());
    return this._updatePossibleSteps();
  };

  CCSStepView.prototype._updatePossibleSteps = function() {
    if (!this.rootView) {
      return;
    }
    return this._setPossibleSteps(this.system.getPossibleSteps());
  };

  return CCSStepView;

})();

PCNode = (function() {
  function PCNode() {
    var c, children, _i, _len, _ref3;

    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.children = children;
    this.parent = null;
    _ref3 = this.children;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      c = _ref3[_i];
      c.parent = this;
    }
  }

  return PCNode;

})();

PCProgram = (function(_super) {
  __extends(PCProgram, _super);

  function PCProgram() {
    _ref3 = PCProgram.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  return PCProgram;

})(PCNode);

PCMainAgent = (function(_super) {
  __extends(PCMainAgent, _super);

  function PCMainAgent() {
    _ref4 = PCMainAgent.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  return PCMainAgent;

})(PCNode);

PCProcedure = (function(_super) {
  __extends(PCProcedure, _super);

  function PCProcedure() {
    _ref5 = PCProcedure.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  return PCProcedure;

})(PCNode);

PCFormalParameter = (function(_super) {
  __extends(PCFormalParameter, _super);

  function PCFormalParameter() {
    _ref6 = PCFormalParameter.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  return PCFormalParameter;

})(PCNode);

PCMonitor = (function(_super) {
  __extends(PCMonitor, _super);

  function PCMonitor() {
    _ref7 = PCMonitor.__super__.constructor.apply(this, arguments);
    return _ref7;
  }

  return PCMonitor;

})(PCNode);

PCStruct = (function(_super) {
  __extends(PCStruct, _super);

  function PCStruct() {
    _ref8 = PCStruct.__super__.constructor.apply(this, arguments);
    return _ref8;
  }

  return PCStruct;

})(PCNode);

PCConditionDeclStmt = (function(_super) {
  __extends(PCConditionDeclStmt, _super);

  function PCConditionDeclStmt() {
    _ref9 = PCConditionDeclStmt.__super__.constructor.apply(this, arguments);
    return _ref9;
  }

  return PCConditionDeclStmt;

})(PCNode);

PCDecl = (function(_super) {
  __extends(PCDecl, _super);

  function PCDecl() {
    _ref10 = PCDecl.__super__.constructor.apply(this, arguments);
    return _ref10;
  }

  return PCDecl;

})(PCNode);

PCVariableDeclarator = (function(_super) {
  __extends(PCVariableDeclarator, _super);

  function PCVariableDeclarator() {
    _ref11 = PCVariableDeclarator.__super__.constructor.apply(this, arguments);
    return _ref11;
  }

  return PCVariableDeclarator;

})(PCNode);

PCType = (function(_super) {
  __extends(PCType, _super);

  function PCType() {
    _ref12 = PCType.__super__.constructor.apply(this, arguments);
    return _ref12;
  }

  return PCType;

})(PCNode);

PCBaseType = (function(_super) {
  __extends(PCBaseType, _super);

  function PCBaseType() {
    _ref13 = PCBaseType.__super__.constructor.apply(this, arguments);
    return _ref13;
  }

  return PCBaseType;

})(PCNode);

PCSimpleType = (function(_super) {
  __extends(PCSimpleType, _super);

  function PCSimpleType(type) {
    this.type = type;
    if (this.type < 0 || this.type > 5) {
      throw "Unknown type";
    }
  }

  return PCSimpleType;

})(PCBaseType);

PCSimpleType.prototype.VOID = 0;

PCSimpleType.prototype.BOOL = 1;

PCSimpleType.prototype.INT = 2;

PCSimpleType.prototype.STRING = 3;

PCSimpleType.prototype.MUTEX = 4;

PCSimpleType.prototype.AGENT = 5;

PCChannelType = (function(_super) {
  __extends(PCChannelType, _super);

  function PCChannelType(valueType, capacity) {
    this.valueType = valueType;
    this.capacity = capacity;
  }

  return PCChannelType;

})(PCBaseType);

PCClassType = (function(_super) {
  __extends(PCClassType, _super);

  function PCClassType(className, classType) {
    this.className = className;
    this.classType = classType;
    if (this.classType < 0 || this.classType > 1) {
      throw "Unknown type";
    }
  }

  return PCClassType;

})(PCBaseType);

PCClassType.prototype.STRUCT = 0;

PCClassType.prototype.MONITOR = 1;

PCExpression = (function(_super) {
  __extends(PCExpression, _super);

  function PCExpression() {
    _ref14 = PCExpression.__super__.constructor.apply(this, arguments);
    return _ref14;
  }

  return PCExpression;

})(PCNode);

PCExpressionList = (function(_super) {
  __extends(PCExpressionList, _super);

  function PCExpressionList() {
    _ref15 = PCExpressionList.__super__.constructor.apply(this, arguments);
    return _ref15;
  }

  return PCExpressionList;

})(PCNode);

PCStartExpression = (function(_super) {
  __extends(PCStartExpression, _super);

  function PCStartExpression() {
    _ref16 = PCStartExpression.__super__.constructor.apply(this, arguments);
    return _ref16;
  }

  return PCStartExpression;

})(PCExpression);

PCAssignExpression = (function(_super) {
  __extends(PCAssignExpression, _super);

  function PCAssignExpression(destination, operator, expression) {
    this.operator = operator;
    PCAssignExpression.__super__.constructor.call(this, destination, expression);
  }

  return PCAssignExpression;

})(PCExpression);

PCAssignDestination = (function(_super) {
  __extends(PCAssignDestination, _super);

  function PCAssignDestination() {
    _ref17 = PCAssignDestination.__super__.constructor.apply(this, arguments);
    return _ref17;
  }

  return PCAssignDestination;

})(PCNode);

PCSendExpression = (function(_super) {
  __extends(PCSendExpression, _super);

  function PCSendExpression() {
    _ref18 = PCSendExpression.__super__.constructor.apply(this, arguments);
    return _ref18;
  }

  return PCSendExpression;

})(PCExpression);

PCConditionalExpression = (function(_super) {
  __extends(PCConditionalExpression, _super);

  function PCConditionalExpression() {
    _ref19 = PCConditionalExpression.__super__.constructor.apply(this, arguments);
    return _ref19;
  }

  return PCConditionalExpression;

})(PCExpression);

PCOrExpression = (function(_super) {
  __extends(PCOrExpression, _super);

  function PCOrExpression() {
    _ref20 = PCOrExpression.__super__.constructor.apply(this, arguments);
    return _ref20;
  }

  return PCOrExpression;

})(PCExpression);

PCAndExpression = (function(_super) {
  __extends(PCAndExpression, _super);

  function PCAndExpression() {
    _ref21 = PCAndExpression.__super__.constructor.apply(this, arguments);
    return _ref21;
  }

  return PCAndExpression;

})(PCExpression);

PCEqualityExpression = (function(_super) {
  __extends(PCEqualityExpression, _super);

  function PCEqualityExpression(left, operator, right) {
    this.operator = operator;
    PCEqualityExpression.__super__.constructor.call(this, left, right);
  }

  return PCEqualityExpression;

})(PCExpression);

PCRelationalExpression = (function(_super) {
  __extends(PCRelationalExpression, _super);

  function PCRelationalExpression(left, operator, right) {
    this.operator = operator;
    PCRelationalExpression.__super__.constructor.call(this, left, right);
  }

  return PCRelationalExpression;

})(PCExpression);

PCAdditiveExpression = (function(_super) {
  __extends(PCAdditiveExpression, _super);

  function PCAdditiveExpression(left, operator, right) {
    this.operator = operator;
    PCAdditiveExpression.__super__.constructor.call(this, left, right);
  }

  return PCAdditiveExpression;

})(PCExpression);

PCMultiplicativeExpression = (function(_super) {
  __extends(PCMultiplicativeExpression, _super);

  function PCMultiplicativeExpression(left, operator, right) {
    this.operator = operator;
    PCMultiplicativeExpression.__super__.constructor.call(this, left, right);
  }

  return PCMultiplicativeExpression;

})(PCExpression);

PCUnaryExpression = (function(_super) {
  __extends(PCUnaryExpression, _super);

  function PCUnaryExpression(operator, expression) {
    this.operator = operator;
    PCUnaryExpression.__super__.constructor.call(this, expression);
  }

  return PCUnaryExpression;

})(PCExpression);

PCPostfixExpression = (function(_super) {
  __extends(PCPostfixExpression, _super);

  function PCPostfixExpression(assignDestination, operator) {
    this.operator = operator;
    PCPostfixExpression.__super__.constructor.call(this, assignDestination);
  }

  return PCPostfixExpression;

})(PCExpression);

PCReceiveExpression = (function(_super) {
  __extends(PCReceiveExpression, _super);

  function PCReceiveExpression() {
    _ref22 = PCReceiveExpression.__super__.constructor.apply(this, arguments);
    return _ref22;
  }

  return PCReceiveExpression;

})(PCExpression);

PCProcedureCall = (function(_super) {
  __extends(PCProcedureCall, _super);

  function PCProcedureCall() {
    var args, procedureName;

    procedureName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.procedureName = procedureName;
    PCProcedureCall.__super__.constructor.apply(this, args);
  }

  return PCProcedureCall;

})(PCExpression);

PCClassCall = (function(_super) {
  __extends(PCClassCall, _super);

  function PCClassCall() {
    _ref23 = PCClassCall.__super__.constructor.apply(this, arguments);
    return _ref23;
  }

  return PCClassCall;

})(PCExpression);

PCArrayExpression = (function(_super) {
  __extends(PCArrayExpression, _super);

  function PCArrayExpression() {
    _ref24 = PCArrayExpression.__super__.constructor.apply(this, arguments);
    return _ref24;
  }

  return PCArrayExpression;

})(PCExpression);

PCLiteralExpression = (function(_super) {
  __extends(PCLiteralExpression, _super);

  function PCLiteralExpression(value) {
    this.value = value;
    PCLiteralExpression.__super__.constructor.apply(this, arguments);
  }

  return PCLiteralExpression;

})(PCExpression);

PCIdentifierExpression = (function(_super) {
  __extends(PCIdentifierExpression, _super);

  function PCIdentifierExpression(identifier) {
    this.identifier = identifier;
    PCIdentifierExpression.__super__.constructor.apply(this, arguments);
  }

  return PCIdentifierExpression;

})(PCExpression);

PCStatement = (function(_super) {
  __extends(PCStatement, _super);

  function PCStatement() {
    _ref25 = PCStatement.__super__.constructor.apply(this, arguments);
    return _ref25;
  }

  return PCStatement;

})(PCNode);

PCBreakStmt = (function(_super) {
  __extends(PCBreakStmt, _super);

  function PCBreakStmt() {
    PCBreakStmt.__super__.constructor.apply(this, arguments);
  }

  return PCBreakStmt;

})(PCStatement);

PCContinueStmt = (function(_super) {
  __extends(PCContinueStmt, _super);

  function PCContinueStmt() {
    PCContinueStmt.__super__.constructor.apply(this, arguments);
  }

  return PCContinueStmt;

})(PCStatement);

PCStmtBlock = (function(_super) {
  __extends(PCStmtBlock, _super);

  function PCStmtBlock() {
    _ref26 = PCStmtBlock.__super__.constructor.apply(this, arguments);
    return _ref26;
  }

  return PCStmtBlock;

})(PCStatement);

PCSelectStmt = (function(_super) {
  __extends(PCSelectStmt, _super);

  function PCSelectStmt() {
    _ref27 = PCSelectStmt.__super__.constructor.apply(this, arguments);
    return _ref27;
  }

  return PCSelectStmt;

})(PCStatement);

PCIfStmt = (function(_super) {
  __extends(PCIfStmt, _super);

  function PCIfStmt() {
    _ref28 = PCIfStmt.__super__.constructor.apply(this, arguments);
    return _ref28;
  }

  return PCIfStmt;

})(PCStatement);

PCWhileStmt = (function(_super) {
  __extends(PCWhileStmt, _super);

  function PCWhileStmt() {
    _ref29 = PCWhileStmt.__super__.constructor.apply(this, arguments);
    return _ref29;
  }

  return PCWhileStmt;

})(PCStatement);

PCDoStmt = (function(_super) {
  __extends(PCDoStmt, _super);

  function PCDoStmt() {
    _ref30 = PCDoStmt.__super__.constructor.apply(this, arguments);
    return _ref30;
  }

  return PCDoStmt;

})(PCStatement);

PCForStmt = (function(_super) {
  __extends(PCForStmt, _super);

  function PCForStmt() {
    _ref31 = PCForStmt.__super__.constructor.apply(this, arguments);
    return _ref31;
  }

  return PCForStmt;

})(PCStatement);

PCReturnStmt = (function(_super) {
  __extends(PCReturnStmt, _super);

  function PCReturnStmt() {
    _ref32 = PCReturnStmt.__super__.constructor.apply(this, arguments);
    return _ref32;
  }

  return PCReturnStmt;

})(PCStatement);

PCPrimitiveStmt = (function(_super) {
  __extends(PCPrimitiveStmt, _super);

  function PCPrimitiveStmt() {
    _ref33 = PCPrimitiveStmt.__super__.constructor.apply(this, arguments);
    return _ref33;
  }

  return PCPrimitiveStmt;

})(PCStatement);

PCPrintStmt = (function(_super) {
  __extends(PCPrintStmt, _super);

  function PCPrintStmt() {
    _ref34 = PCPrintStmt.__super__.constructor.apply(this, arguments);
    return _ref34;
  }

  return PCPrintStmt;

})(PCStatement);
